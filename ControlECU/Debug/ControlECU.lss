
ControlECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00002eda  00002f6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800172  00800172  00003080  2**0
                  ALLOC
  3 .stab         0000318c  00000000  00000000  00003080  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016fe  00000000  00000000  0000620c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000790a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a0a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c604  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000caba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 0a 	call	0x1572	; 0x1572 <main>
      8a:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <BUZZER_init>:
 *      Author: Kirollos Medhat
 */

#include "Buzzer.h"
#include "gpio.h"
void BUZZER_init(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_OUTPUT);
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	62 e0       	ldi	r22, 0x02	; 2
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <BUZZER_ON>:


void BUZZER_ON(){
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID, PIN2_ID, LOGIC_HIGH);
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <BUZZER_OFF>:

void BUZZER_OFF(){
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID, PIN2_ID, LOGIC_LOW);
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	62 e0       	ldi	r22, 0x02	; 2
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <Calculate_time>:
 *                            FUNCTIONS DEFINITIONS                            *
 *******************************************************************************/

/*Function responsible for calculating seconds*/
void Calculate_time(void)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
	g_tick ++; /*Every overflow increase ticks*/
     e7e:	80 91 73 01 	lds	r24, 0x0173
     e82:	90 91 74 01 	lds	r25, 0x0174
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	90 93 74 01 	sts	0x0174, r25
     e8c:	80 93 73 01 	sts	0x0173, r24

	/*Once ticks become 30(according to the used prescalar),increase seconds flag and tick =0*/
	if(g_tick == 30)
     e90:	80 91 73 01 	lds	r24, 0x0173
     e94:	90 91 74 01 	lds	r25, 0x0174
     e98:	8e 31       	cpi	r24, 0x1E	; 30
     e9a:	91 05       	cpc	r25, r1
     e9c:	49 f4       	brne	.+18     	; 0xeb0 <Calculate_time+0x3a>
	{
		g_calc_sec_flag++; /*Every 30 tick, increase seconds flag*/
     e9e:	80 91 75 01 	lds	r24, 0x0175
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	80 93 75 01 	sts	0x0175, r24
		g_tick =0; /*Put tick=0 to start counting new second*/
     ea8:	10 92 74 01 	sts	0x0174, r1
     eac:	10 92 73 01 	sts	0x0173, r1
	}
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <CONTROL_recievePassword>:
void CONTROL_recievePassword(void){
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	a4 97       	sbiw	r28, 0x24	; 36
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
	uint8 arrayPass[5];
	uint8 index=0;
     ece:	1f 8e       	std	Y+31, r1	; 0x1f
	while(UART_recieveByte() != SAVE);
     ed0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
     ed4:	81 37       	cpi	r24, 0x71	; 113
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <CONTROL_recievePassword+0x1a>

	for(int i=0; i<PASSWORDLIMIT;i++){
     ed8:	1e 8e       	std	Y+30, r1	; 0x1e
     eda:	1d 8e       	std	Y+29, r1	; 0x1d
     edc:	9b c0       	rjmp	.+310    	; 0x1014 <CONTROL_recievePassword+0x15e>
		UART_sendByte(M2_Ready);
     ede:	87 e7       	ldi	r24, 0x77	; 119
     ee0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <UART_sendByte>
		arrayPass[index] = UART_recieveByte();
     ee4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ee6:	08 2f       	mov	r16, r24
     ee8:	10 e0       	ldi	r17, 0x00	; 0
     eea:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
     eee:	28 2f       	mov	r18, r24
     ef0:	ce 01       	movw	r24, r28
     ef2:	80 96       	adiw	r24, 0x20	; 32
     ef4:	fc 01       	movw	r30, r24
     ef6:	e0 0f       	add	r30, r16
     ef8:	f1 1f       	adc	r31, r17
     efa:	20 83       	st	Z, r18
		EEPROM_writeByte((0x0311+i), arrayPass[index]);
     efc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     efe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f00:	8f 5e       	subi	r24, 0xEF	; 239
     f02:	9c 4f       	sbci	r25, 0xFC	; 252
     f04:	ac 01       	movw	r20, r24
     f06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	ce 01       	movw	r24, r28
     f0e:	80 96       	adiw	r24, 0x20	; 32
     f10:	fc 01       	movw	r30, r24
     f12:	e2 0f       	add	r30, r18
     f14:	f3 1f       	adc	r31, r19
     f16:	20 81       	ld	r18, Z
     f18:	ca 01       	movw	r24, r20
     f1a:	62 2f       	mov	r22, r18
     f1c:	0e 94 ae 0b 	call	0x175c	; 0x175c <EEPROM_writeByte>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	ac e8       	ldi	r26, 0x8C	; 140
     f26:	b2 e4       	ldi	r27, 0x42	; 66
     f28:	89 8f       	std	Y+25, r24	; 0x19
     f2a:	9a 8f       	std	Y+26, r25	; 0x1a
     f2c:	ab 8f       	std	Y+27, r26	; 0x1b
     f2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f30:	69 8d       	ldd	r22, Y+25	; 0x19
     f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a ef       	ldi	r20, 0xFA	; 250
     f3e:	54 e4       	ldi	r21, 0x44	; 68
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8d 8b       	std	Y+21, r24	; 0x15
     f4a:	9e 8b       	std	Y+22, r25	; 0x16
     f4c:	af 8b       	std	Y+23, r26	; 0x17
     f4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f50:	6d 89       	ldd	r22, Y+21	; 0x15
     f52:	7e 89       	ldd	r23, Y+22	; 0x16
     f54:	8f 89       	ldd	r24, Y+23	; 0x17
     f56:	98 8d       	ldd	r25, Y+24	; 0x18
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f64:	88 23       	and	r24, r24
     f66:	2c f4       	brge	.+10     	; 0xf72 <CONTROL_recievePassword+0xbc>
		__ticks = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9c 8b       	std	Y+20, r25	; 0x14
     f6e:	8b 8b       	std	Y+19, r24	; 0x13
     f70:	3f c0       	rjmp	.+126    	; 0xff0 <CONTROL_recievePassword+0x13a>
	else if (__tmp > 65535)
     f72:	6d 89       	ldd	r22, Y+21	; 0x15
     f74:	7e 89       	ldd	r23, Y+22	; 0x16
     f76:	8f 89       	ldd	r24, Y+23	; 0x17
     f78:	98 8d       	ldd	r25, Y+24	; 0x18
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f86:	18 16       	cp	r1, r24
     f88:	4c f5       	brge	.+82     	; 0xfdc <CONTROL_recievePassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	69 8d       	ldd	r22, Y+25	; 0x19
     f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9c 8b       	std	Y+20, r25	; 0x14
     fb0:	8b 8b       	std	Y+19, r24	; 0x13
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <CONTROL_recievePassword+0x11c>
     fb4:	88 ec       	ldi	r24, 0xC8	; 200
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9a 8b       	std	Y+18, r25	; 0x12
     fba:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fbc:	89 89       	ldd	r24, Y+17	; 0x11
     fbe:	9a 89       	ldd	r25, Y+18	; 0x12
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <CONTROL_recievePassword+0x10a>
     fc4:	9a 8b       	std	Y+18, r25	; 0x12
     fc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc8:	8b 89       	ldd	r24, Y+19	; 0x13
     fca:	9c 89       	ldd	r25, Y+20	; 0x14
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	9c 8b       	std	Y+20, r25	; 0x14
     fd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd2:	8b 89       	ldd	r24, Y+19	; 0x13
     fd4:	9c 89       	ldd	r25, Y+20	; 0x14
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	69 f7       	brne	.-38     	; 0xfb4 <CONTROL_recievePassword+0xfe>
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <CONTROL_recievePassword+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	6d 89       	ldd	r22, Y+21	; 0x15
     fde:	7e 89       	ldd	r23, Y+22	; 0x16
     fe0:	8f 89       	ldd	r24, Y+23	; 0x17
     fe2:	98 8d       	ldd	r25, Y+24	; 0x18
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9c 8b       	std	Y+20, r25	; 0x14
     fee:	8b 8b       	std	Y+19, r24	; 0x13
     ff0:	8b 89       	ldd	r24, Y+19	; 0x13
     ff2:	9c 89       	ldd	r25, Y+20	; 0x14
     ff4:	98 8b       	std	Y+16, r25	; 0x10
     ff6:	8f 87       	std	Y+15, r24	; 0x0f
     ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffa:	98 89       	ldd	r25, Y+16	; 0x10
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <CONTROL_recievePassword+0x146>
    1000:	98 8b       	std	Y+16, r25	; 0x10
    1002:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(70);
		index++;
    1004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	8f 8f       	std	Y+31, r24	; 0x1f
void CONTROL_recievePassword(void){
	uint8 arrayPass[5];
	uint8 index=0;
	while(UART_recieveByte() != SAVE);

	for(int i=0; i<PASSWORDLIMIT;i++){
    100a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    100c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	9e 8f       	std	Y+30, r25	; 0x1e
    1012:	8d 8f       	std	Y+29, r24	; 0x1d
    1014:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1016:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1018:	85 30       	cpi	r24, 0x05	; 5
    101a:	91 05       	cpc	r25, r1
    101c:	0c f4       	brge	.+2      	; 0x1020 <CONTROL_recievePassword+0x16a>
    101e:	5f cf       	rjmp	.-322    	; 0xede <CONTROL_recievePassword+0x28>
		arrayPass[index] = UART_recieveByte();
		EEPROM_writeByte((0x0311+i), arrayPass[index]);
		_delay_ms(70);
		index++;
	}
	EEPROM_writeByte(0x0420, NOTFIRSTTIME);
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	94 e0       	ldi	r25, 0x04	; 4
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	0e 94 ae 0b 	call	0x175c	; 0x175c <EEPROM_writeByte>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	ac e8       	ldi	r26, 0x8C	; 140
    1030:	b2 e4       	ldi	r27, 0x42	; 66
    1032:	8b 87       	std	Y+11, r24	; 0x0b
    1034:	9c 87       	std	Y+12, r25	; 0x0c
    1036:	ad 87       	std	Y+13, r26	; 0x0d
    1038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103a:	6b 85       	ldd	r22, Y+11	; 0x0b
    103c:	7c 85       	ldd	r23, Y+12	; 0x0c
    103e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1040:	9e 85       	ldd	r25, Y+14	; 0x0e
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a ef       	ldi	r20, 0xFA	; 250
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	8f 83       	std	Y+7, r24	; 0x07
    1054:	98 87       	std	Y+8, r25	; 0x08
    1056:	a9 87       	std	Y+9, r26	; 0x09
    1058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    105a:	6f 81       	ldd	r22, Y+7	; 0x07
    105c:	78 85       	ldd	r23, Y+8	; 0x08
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106e:	88 23       	and	r24, r24
    1070:	2c f4       	brge	.+10     	; 0x107c <CONTROL_recievePassword+0x1c6>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
    107a:	3f c0       	rjmp	.+126    	; 0x10fa <CONTROL_recievePassword+0x244>
	else if (__tmp > 65535)
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	57 e4       	ldi	r21, 0x47	; 71
    108c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	4c f5       	brge	.+82     	; 0x10e6 <CONTROL_recievePassword+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	6b 85       	ldd	r22, Y+11	; 0x0b
    1096:	7c 85       	ldd	r23, Y+12	; 0x0c
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	51 e4       	ldi	r21, 0x41	; 65
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9e 83       	std	Y+6, r25	; 0x06
    10ba:	8d 83       	std	Y+5, r24	; 0x05
    10bc:	0f c0       	rjmp	.+30     	; 0x10dc <CONTROL_recievePassword+0x226>
    10be:	88 ec       	ldi	r24, 0xC8	; 200
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9c 83       	std	Y+4, r25	; 0x04
    10c4:	8b 83       	std	Y+3, r24	; 0x03
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <CONTROL_recievePassword+0x214>
    10ce:	9c 83       	std	Y+4, r25	; 0x04
    10d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f7       	brne	.-38     	; 0x10be <CONTROL_recievePassword+0x208>
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <CONTROL_recievePassword+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e6:	6f 81       	ldd	r22, Y+7	; 0x07
    10e8:	78 85       	ldd	r23, Y+8	; 0x08
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <CONTROL_recievePassword+0x250>
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(70);
	UART_sendByte(SAVED);
    110e:	85 e6       	ldi	r24, 0x65	; 101
    1110:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <UART_sendByte>
}
    1114:	a4 96       	adiw	r28, 0x24	; 36
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <ledOn>:

void ledOn(void){
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	65 e0       	ldi	r22, 0x05	; 5
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN5_ID, LOGIC_HIGH);
    113c:	83 e0       	ldi	r24, 0x03	; 3
    113e:	65 e0       	ldi	r22, 0x05	; 5
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
}
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <ledoff>:
void ledoff(void){
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	65 e0       	ldi	r22, 0x05	; 5
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN5_ID, LOGIC_LOW);
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	65 e0       	ldi	r22, 0x05	; 5
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <ledOn2>:
void ledOn2(void){
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID, PIN5_ID, PIN_OUTPUT);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	65 e0       	ldi	r22, 0x05	; 5
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_HIGH);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	65 e0       	ldi	r22, 0x05	; 5
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <CONTROL_mainMenu>:

void CONTROL_mainMenu(void){
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	/*
	 *Call this function where it check whether the entered password is right or not
	 *and it handle all the cases
	 */
	CONTROL_checkPassword();
    1198:	0e 94 b4 09 	call	0x1368	; 0x1368 <CONTROL_checkPassword>

	if(UART_recieveByte() == 0)
    119c:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    11a0:	88 23       	and	r24, r24
    11a2:	49 f4       	brne	.+18     	; 0x11b6 <CONTROL_mainMenu+0x26>
	{
		if(UART_recieveByte() == '*'){
    11a4:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    11a8:	8a 32       	cpi	r24, 0x2A	; 42
    11aa:	19 f4       	brne	.+6      	; 0x11b2 <CONTROL_mainMenu+0x22>
			CONTROL_recievePassword();
    11ac:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CONTROL_recievePassword>
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <CONTROL_mainMenu+0x26>
		}
		else{
			CONTROL_openTheDoor();
    11b2:	0e 94 de 08 	call	0x11bc	; 0x11bc <CONTROL_openTheDoor>
		}
	}
}
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <CONTROL_openTheDoor>:

void CONTROL_openTheDoor(void)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	62 97       	sbiw	r28, 0x12	; 18
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
	while(UART_recieveByte() != unlockDoor);
    11d0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    11d4:	83 37       	cpi	r24, 0x73	; 115
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <CONTROL_openTheDoor+0x14>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	aa e7       	ldi	r26, 0x7A	; 122
    11de:	b4 e4       	ldi	r27, 0x44	; 68
    11e0:	8b 87       	std	Y+11, r24	; 0x0b
    11e2:	9c 87       	std	Y+12, r25	; 0x0c
    11e4:	ad 87       	std	Y+13, r26	; 0x0d
    11e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	8f 83       	std	Y+7, r24	; 0x07
    1202:	98 87       	std	Y+8, r25	; 0x08
    1204:	a9 87       	std	Y+9, r26	; 0x09
    1206:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1208:	6f 81       	ldd	r22, Y+7	; 0x07
    120a:	78 85       	ldd	r23, Y+8	; 0x08
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	5f e3       	ldi	r21, 0x3F	; 63
    1218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    121c:	88 23       	and	r24, r24
    121e:	2c f4       	brge	.+10     	; 0x122a <CONTROL_openTheDoor+0x6e>
		__ticks = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <CONTROL_openTheDoor+0xec>
	else if (__tmp > 65535)
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	4c f5       	brge	.+82     	; 0x1294 <CONTROL_openTheDoor+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	6b 85       	ldd	r22, Y+11	; 0x0b
    1244:	7c 85       	ldd	r23, Y+12	; 0x0c
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	51 e4       	ldi	r21, 0x41	; 65
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	0f c0       	rjmp	.+30     	; 0x128a <CONTROL_openTheDoor+0xce>
    126c:	88 ec       	ldi	r24, 0xC8	; 200
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <CONTROL_openTheDoor+0xbc>
    127c:	9c 83       	std	Y+4, r25	; 0x04
    127e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	9e 83       	std	Y+6, r25	; 0x06
    1288:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	69 f7       	brne	.-38     	; 0x126c <CONTROL_openTheDoor+0xb0>
    1292:	14 c0       	rjmp	.+40     	; 0x12bc <CONTROL_openTheDoor+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1294:	6f 81       	ldd	r22, Y+7	; 0x07
    1296:	78 85       	ldd	r23, Y+8	; 0x08
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <CONTROL_openTheDoor+0xf8>
    12b8:	9a 83       	std	Y+2, r25	; 0x02
    12ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	DcMotor_Rotate(CLOCKWISE, 90);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	6a e5       	ldi	r22, 0x5A	; 90
    12c0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DcMotor_Rotate>
	TIMER_Config Config = {CPU_1024,COMPARE,0,65000};
    12c4:	85 e0       	ldi	r24, 0x05	; 5
    12c6:	8f 87       	std	Y+15, r24	; 0x0f
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	88 8b       	std	Y+16, r24	; 0x10
    12cc:	19 8a       	std	Y+17, r1	; 0x11
    12ce:	88 ee       	ldi	r24, 0xE8	; 232
    12d0:	8a 8b       	std	Y+18, r24	; 0x12
	TIMER_init(&Config);
    12d2:	ce 01       	movw	r24, r28
    12d4:	0f 96       	adiw	r24, 0x0f	; 15
    12d6:	0e 94 cb 14 	call	0x2996	; 0x2996 <TIMER_init>


}
    12da:	62 96       	adiw	r28, 0x12	; 18
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <CONTROL_timerCallFunction3>:
void CONTROL_timerCallFunction3(void)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(ANTI_CLOCKWISE, 90);
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	6a e5       	ldi	r22, 0x5A	; 90
    12f8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DcMotor_Rotate>
	Timer_DeInit();
    12fc:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Timer_DeInit>


}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <CONTROL_timerCallFunction2>:
void CONTROL_timerCallFunction2(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <CONTROL_timerCallFunction2+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <CONTROL_timerCallFunction2+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(STOP, 0);
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DcMotor_Rotate>
	Timer_DeInit();
    131a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Timer_DeInit>
	Timer_setCallBack(CONTROL_timerCallFunction3);
    131e:	86 e7       	ldi	r24, 0x76	; 118
    1320:	99 e0       	ldi	r25, 0x09	; 9
    1322:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_setCallBack>
	TIMER_Config Config = {CPU_1024,COMPARE,0,20000};
    1326:	85 e0       	ldi	r24, 0x05	; 5
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	1b 82       	std	Y+3, r1	; 0x03
    1330:	80 e2       	ldi	r24, 0x20	; 32
    1332:	8c 83       	std	Y+4, r24	; 0x04
	TIMER_init(&Config);
    1334:	ce 01       	movw	r24, r28
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	0e 94 cb 14 	call	0x2996	; 0x2996 <TIMER_init>
	Timer_setCallBack(CONTROL_timerCallFunction3);
    133c:	86 e7       	ldi	r24, 0x76	; 118
    133e:	99 e0       	ldi	r25, 0x09	; 9
    1340:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_setCallBack>

}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <CONTROL_buzzerCallBack>:
void CONTROL_buzzerCallBack(void)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62

	BUZZER_OFF();
    135a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <BUZZER_OFF>
	Timer_DeInit();
    135e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Timer_DeInit>

}
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <CONTROL_checkPassword>:
void CONTROL_checkPassword(void)
{
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	6f 97       	sbiw	r28, 0x1f	; 31
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
	 *arraypass2[5] to save the password getting from EEPROM
	 *uartReceive to get the receive byte UART
	 *wrongEntry to count the wrong trials
	 */
	uint8 arrayPass[5],arrayPass2[5];
	uint8 wrongEntry=0;
    1380:	19 8a       	std	Y+17, r1	; 0x11


	/*Looping until HMI sends the ready handshake for checking the password with EEPROM*/

	while(UART_recieveByte() != checkPasswordEntered);
    1382:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    1386:	89 37       	cpi	r24, 0x79	; 121
    1388:	e1 f7       	brne	.-8      	; 0x1382 <CONTROL_checkPassword+0x1a>

	/*looping to get the password entered in array and get the array saved in EEPROM
	 * in other array to prepare for comparing them
	 */

	for(int i=0;i<PASSWORDLIMIT;i++){
    138a:	18 8a       	std	Y+16, r1	; 0x10
    138c:	1f 86       	std	Y+15, r1	; 0x0f
    138e:	ab c0       	rjmp	.+342    	; 0x14e6 <CONTROL_checkPassword+0x17e>
		arrayPass[i] = UART_recieveByte();
    1390:	0f 85       	ldd	r16, Y+15	; 0x0f
    1392:	18 89       	ldd	r17, Y+16	; 0x10
    1394:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    1398:	28 2f       	mov	r18, r24
    139a:	ce 01       	movw	r24, r28
    139c:	42 96       	adiw	r24, 0x12	; 18
    139e:	fc 01       	movw	r30, r24
    13a0:	e0 0f       	add	r30, r16
    13a2:	f1 1f       	adc	r31, r17
    13a4:	20 83       	st	Z, r18
		EEPROM_readByte((0x0311+i), &arrayPass2[i]);
    13a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a8:	98 89       	ldd	r25, Y+16	; 0x10
    13aa:	8f 5e       	subi	r24, 0xEF	; 239
    13ac:	9c 4f       	sbci	r25, 0xFC	; 252
    13ae:	ac 01       	movw	r20, r24
    13b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b2:	98 89       	ldd	r25, Y+16	; 0x10
    13b4:	9e 01       	movw	r18, r28
    13b6:	29 5e       	subi	r18, 0xE9	; 233
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	28 0f       	add	r18, r24
    13bc:	39 1f       	adc	r19, r25
    13be:	ca 01       	movw	r24, r20
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 ef 0b 	call	0x17de	; 0x17de <EEPROM_readByte>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	ac e8       	ldi	r26, 0x8C	; 140
    13cc:	b2 e4       	ldi	r27, 0x42	; 66
    13ce:	8b 87       	std	Y+11, r24	; 0x0b
    13d0:	9c 87       	std	Y+12, r25	; 0x0c
    13d2:	ad 87       	std	Y+13, r26	; 0x0d
    13d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13da:	8d 85       	ldd	r24, Y+13	; 0x0d
    13dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4a ef       	ldi	r20, 0xFA	; 250
    13e4:	54 e4       	ldi	r21, 0x44	; 68
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8f 83       	std	Y+7, r24	; 0x07
    13f0:	98 87       	std	Y+8, r25	; 0x08
    13f2:	a9 87       	std	Y+9, r26	; 0x09
    13f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f6:	6f 81       	ldd	r22, Y+7	; 0x07
    13f8:	78 85       	ldd	r23, Y+8	; 0x08
    13fa:	89 85       	ldd	r24, Y+9	; 0x09
    13fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <CONTROL_checkPassword+0xb0>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <CONTROL_checkPassword+0x12e>
	else if (__tmp > 65535)
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <CONTROL_checkPassword+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	6b 85       	ldd	r22, Y+11	; 0x0b
    1432:	7c 85       	ldd	r23, Y+12	; 0x0c
    1434:	8d 85       	ldd	r24, Y+13	; 0x0d
    1436:	9e 85       	ldd	r25, Y+14	; 0x0e
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <CONTROL_checkPassword+0x110>
    145a:	88 ec       	ldi	r24, 0xC8	; 200
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9c 83       	std	Y+4, r25	; 0x04
    1460:	8b 83       	std	Y+3, r24	; 0x03
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <CONTROL_checkPassword+0xfe>
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f7       	brne	.-38     	; 0x145a <CONTROL_checkPassword+0xf2>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <CONTROL_checkPassword+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <CONTROL_checkPassword+0x13a>
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(70);
		/*if the arrays don't match send to the HMI by UART that there is an Error
		 *with the saved array in EEPROM so that it appears in LCD
		 */
		if(arrayPass[i] != arrayPass2[i])
    14aa:	2f 85       	ldd	r18, Y+15	; 0x0f
    14ac:	38 89       	ldd	r19, Y+16	; 0x10
    14ae:	ce 01       	movw	r24, r28
    14b0:	42 96       	adiw	r24, 0x12	; 18
    14b2:	fc 01       	movw	r30, r24
    14b4:	e2 0f       	add	r30, r18
    14b6:	f3 1f       	adc	r31, r19
    14b8:	40 81       	ld	r20, Z
    14ba:	2f 85       	ldd	r18, Y+15	; 0x0f
    14bc:	38 89       	ldd	r19, Y+16	; 0x10
    14be:	ce 01       	movw	r24, r28
    14c0:	47 96       	adiw	r24, 0x17	; 23
    14c2:	fc 01       	movw	r30, r24
    14c4:	e2 0f       	add	r30, r18
    14c6:	f3 1f       	adc	r31, r19
    14c8:	80 81       	ld	r24, Z
    14ca:	48 17       	cp	r20, r24
    14cc:	21 f0       	breq	.+8      	; 0x14d6 <CONTROL_checkPassword+0x16e>
		{
			UART_sendByte(wrongPassword);
    14ce:	85 e7       	ldi	r24, 0x75	; 117
    14d0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <UART_sendByte>
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <CONTROL_checkPassword+0x174>

		}
		else
		{
			UART_sendByte(correctPassword);
    14d6:	89 e6       	ldi	r24, 0x69	; 105
    14d8:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <UART_sendByte>

	/*looping to get the password entered in array and get the array saved in EEPROM
	 * in other array to prepare for comparing them
	 */

	for(int i=0;i<PASSWORDLIMIT;i++){
    14dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14de:	98 89       	ldd	r25, Y+16	; 0x10
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	98 8b       	std	Y+16, r25	; 0x10
    14e4:	8f 87       	std	Y+15, r24	; 0x0f
    14e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e8:	98 89       	ldd	r25, Y+16	; 0x10
    14ea:	85 30       	cpi	r24, 0x05	; 5
    14ec:	91 05       	cpc	r25, r1
    14ee:	0c f4       	brge	.+2      	; 0x14f2 <CONTROL_checkPassword+0x18a>
    14f0:	4f cf       	rjmp	.-354    	; 0x1390 <CONTROL_checkPassword+0x28>

		}
	}

	/*Receiving the numbers of wrong entries to HMI to decide the buzzer action*/
	wrongEntry = UART_recieveByte();
    14f2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    14f6:	89 8b       	std	Y+17, r24	; 0x11
	/*Asking to try again of the number of trials is less than 3*/
	if(wrongEntry <= 2)
    14f8:	89 89       	ldd	r24, Y+17	; 0x11
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	18 f4       	brcc	.+6      	; 0x1504 <CONTROL_checkPassword+0x19c>
	{
		CONTROL_checkPassword();
    14fe:	0e 94 b4 09 	call	0x1368	; 0x1368 <CONTROL_checkPassword>
    1502:	2c c0       	rjmp	.+88     	; 0x155c <CONTROL_checkPassword+0x1f4>
	}
	else if (wrongEntry ==3)
    1504:	89 89       	ldd	r24, Y+17	; 0x11
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	29 f5       	brne	.+74     	; 0x1554 <CONTROL_checkPassword+0x1ec>
	{
		SREG |= (1<<7);
    150a:	af e5       	ldi	r26, 0x5F	; 95
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ef e5       	ldi	r30, 0x5F	; 95
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	8c 93       	st	X, r24

		//BUZZER_init();
		Timer_setCallBack(Calculate_time);
    1518:	8b e3       	ldi	r24, 0x3B	; 59
    151a:	97 e0       	ldi	r25, 0x07	; 7
    151c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_setCallBack>
		TIMER_Config Config = {CPU_1024,COMPARE,0,250};
    1520:	85 e0       	ldi	r24, 0x05	; 5
    1522:	8c 8f       	std	Y+28, r24	; 0x1c
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	8d 8f       	std	Y+29, r24	; 0x1d
    1528:	1e 8e       	std	Y+30, r1	; 0x1e
    152a:	8a ef       	ldi	r24, 0xFA	; 250
    152c:	8f 8f       	std	Y+31, r24	; 0x1f
		TIMER_init(&Config);
    152e:	ce 01       	movw	r24, r28
    1530:	4c 96       	adiw	r24, 0x1c	; 28
    1532:	0e 94 cb 14 	call	0x2996	; 0x2996 <TIMER_init>
		Timer_setCallBack(Calculate_time);
    1536:	8b e3       	ldi	r24, 0x3B	; 59
    1538:	97 e0       	ldi	r25, 0x07	; 7
    153a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_setCallBack>
//		while(g_calc_sec_flag != 5)
//		{
//			//BUZZER_ON();

//		}
		if(g_calc_sec_flag == 2) {
    153e:	80 91 75 01 	lds	r24, 0x0175
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	11 f4       	brne	.+4      	; 0x154a <CONTROL_checkPassword+0x1e2>
			ledOn();
    1546:	0e 94 95 08 	call	0x112a	; 0x112a <ledOn>
		}
		ledoff();
    154a:	0e 94 a6 08 	call	0x114c	; 0x114c <ledoff>
		g_calc_sec_flag =0;
    154e:	10 92 75 01 	sts	0x0175, r1
    1552:	04 c0       	rjmp	.+8      	; 0x155c <CONTROL_checkPassword+0x1f4>
	}
	else
	{
		CONTROL_openTheDoor();
    1554:	0e 94 de 08 	call	0x11bc	; 0x11bc <CONTROL_openTheDoor>
		ledOn2();
    1558:	0e 94 b7 08 	call	0x116e	; 0x116e <ledOn2>
	}


}
    155c:	6f 96       	adiw	r28, 0x1f	; 31
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <main>:



int main(void){
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	65 97       	sbiw	r28, 0x15	; 21
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    1586:	af e5       	ldi	r26, 0x5F	; 95
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e5       	ldi	r30, 0x5F	; 95
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24
	uint8 firstTimeFlag =0;
    1594:	19 82       	std	Y+1, r1	; 0x01
	UART_Config Config = {EIGHT,ONE,DISABLE_PARITY,9600};
    1596:	ce 01       	movw	r24, r28
    1598:	02 96       	adiw	r24, 0x02	; 2
    159a:	9d 87       	std	Y+13, r25	; 0x0d
    159c:	8c 87       	std	Y+12, r24	; 0x0c
    159e:	eb e6       	ldi	r30, 0x6B	; 107
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	ff 87       	std	Y+15, r31	; 0x0f
    15a4:	ee 87       	std	Y+14, r30	; 0x0e
    15a6:	f7 e0       	ldi	r31, 0x07	; 7
    15a8:	f8 8b       	std	Y+16, r31	; 0x10
    15aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    15ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    15ae:	00 80       	ld	r0, Z
    15b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	9f 87       	std	Y+15, r25	; 0x0f
    15b8:	8e 87       	std	Y+14, r24	; 0x0e
    15ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    15bc:	fd 85       	ldd	r31, Y+13	; 0x0d
    15be:	00 82       	st	Z, r0
    15c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9d 87       	std	Y+13, r25	; 0x0d
    15c8:	8c 87       	std	Y+12, r24	; 0x0c
    15ca:	98 89       	ldd	r25, Y+16	; 0x10
    15cc:	91 50       	subi	r25, 0x01	; 1
    15ce:	98 8b       	std	Y+16, r25	; 0x10
    15d0:	e8 89       	ldd	r30, Y+16	; 0x10
    15d2:	ee 23       	and	r30, r30
    15d4:	51 f7       	brne	.-44     	; 0x15aa <main+0x38>
	UART_init(&Config);
    15d6:	ce 01       	movw	r24, r28
    15d8:	02 96       	adiw	r24, 0x02	; 2
    15da:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <UART_init>
	TWI_ConfigType TWI_Config = {F_CPU_CLOCK_1,0x02,0x01};
    15de:	ce 01       	movw	r24, r28
    15e0:	09 96       	adiw	r24, 0x09	; 9
    15e2:	9a 8b       	std	Y+18, r25	; 0x12
    15e4:	89 8b       	std	Y+17, r24	; 0x11
    15e6:	e8 e6       	ldi	r30, 0x68	; 104
    15e8:	f1 e0       	ldi	r31, 0x01	; 1
    15ea:	fc 8b       	std	Y+20, r31	; 0x14
    15ec:	eb 8b       	std	Y+19, r30	; 0x13
    15ee:	f3 e0       	ldi	r31, 0x03	; 3
    15f0:	fd 8b       	std	Y+21, r31	; 0x15
    15f2:	eb 89       	ldd	r30, Y+19	; 0x13
    15f4:	fc 89       	ldd	r31, Y+20	; 0x14
    15f6:	00 80       	ld	r0, Z
    15f8:	8b 89       	ldd	r24, Y+19	; 0x13
    15fa:	9c 89       	ldd	r25, Y+20	; 0x14
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	9c 8b       	std	Y+20, r25	; 0x14
    1600:	8b 8b       	std	Y+19, r24	; 0x13
    1602:	e9 89       	ldd	r30, Y+17	; 0x11
    1604:	fa 89       	ldd	r31, Y+18	; 0x12
    1606:	00 82       	st	Z, r0
    1608:	89 89       	ldd	r24, Y+17	; 0x11
    160a:	9a 89       	ldd	r25, Y+18	; 0x12
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	9a 8b       	std	Y+18, r25	; 0x12
    1610:	89 8b       	std	Y+17, r24	; 0x11
    1612:	9d 89       	ldd	r25, Y+21	; 0x15
    1614:	91 50       	subi	r25, 0x01	; 1
    1616:	9d 8b       	std	Y+21, r25	; 0x15
    1618:	ed 89       	ldd	r30, Y+21	; 0x15
    161a:	ee 23       	and	r30, r30
    161c:	51 f7       	brne	.-44     	; 0x15f2 <main+0x80>
	TWI_init(&TWI_Config);
    161e:	ce 01       	movw	r24, r28
    1620:	09 96       	adiw	r24, 0x09	; 9
    1622:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <TWI_init>
	DcMotor_Init();
    1626:	0e 94 31 0b 	call	0x1662	; 0x1662 <DcMotor_Init>
	while(1){
		g_UARTValue = UART_recieveByte();
    162a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    162e:	80 93 72 01 	sts	0x0172, r24
		while(g_UARTValue != M1_ready);
    1632:	80 91 72 01 	lds	r24, 0x0172
    1636:	82 37       	cpi	r24, 0x72	; 114
    1638:	e1 f7       	brne	.-8      	; 0x1632 <main+0xc0>
		EEPROM_readByte(0x0420, &firstTimeFlag);
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	94 e0       	ldi	r25, 0x04	; 4
    163e:	9e 01       	movw	r18, r28
    1640:	2f 5f       	subi	r18, 0xFF	; 255
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	b9 01       	movw	r22, r18
    1646:	0e 94 ef 0b 	call	0x17de	; 0x17de <EEPROM_readByte>
		UART_sendByte(firstTimeFlag);
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <UART_sendByte>
		if(firstTimeFlag != NOTFIRSTTIME)
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	19 f0       	breq	.+6      	; 0x165c <main+0xea>
		{
			CONTROL_recievePassword();
    1656:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CONTROL_recievePassword>
    165a:	e7 cf       	rjmp	.-50     	; 0x162a <main+0xb8>
		}
		else
		{
			CONTROL_mainMenu();
    165c:	0e 94 c8 08 	call	0x1190	; 0x1190 <CONTROL_mainMenu>
    1660:	e4 cf       	rjmp	.-56     	; 0x162a <main+0xb8>

00001662 <DcMotor_Init>:
 * Description: Function to Initialize DC Motor Connected to the MC
 * 				Setting the start motion as Stopped
 * Arguments  : void
 * Return Type: void
 */
void DcMotor_Init(void){
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setting the DC Motor which the fan will be connected to
	 * as output pin
	 */
	GPIO_setupPinDirection(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN1_PIN, PIN_OUTPUT);
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN2_PIN, PIN_OUTPUT);
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_CONNECTION_PORT, PIN3_ID, PIN_OUTPUT);
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	63 e0       	ldi	r22, 0x03	; 3
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
	/*
	 * Setting the Motor to be stopped at the start
	 *
	 */

	GPIO_writePin(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN1_PIN, LOGIC_LOW);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
	GPIO_writePin(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN2_PIN, LOGIC_LOW);
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <DcMotor_Rotate>:
 * 				of the Motor according to the generated signal
 * 				from PWM module (0-100)%
 * Arguments  : DC Motor state Configuration structure, Char byte speed of motor
 * Return Type: void
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <DcMotor_Rotate+0x6>
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	6b 83       	std	Y+3, r22	; 0x03

	uint8 duty_cycle=((float)speed/100)*255;
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	48 ec       	ldi	r20, 0xC8	; 200
    16d2:	52 e4       	ldi	r21, 0x42	; 66
    16d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Calling Start timer function from PWM.h module
	 * to start the motion of the motor according to given speed
	 */
	PWM_Timer0_Start(duty_cycle);
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	0e 94 49 14 	call	0x2892	; 0x2892 <PWM_Timer0_Start>

	/*
	 * Setting the State of motor according the given structure Configuration
	 */

	if(state == STOP){
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	88 23       	and	r24, r24
    1708:	59 f4       	brne	.+22     	; 0x1720 <DcMotor_Rotate+0x7e>
		GPIO_writePin(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN1_PIN, LOGIC_LOW);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
		GPIO_writePin(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN2_PIN, LOGIC_LOW);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
    171e:	18 c0       	rjmp	.+48     	; 0x1750 <DcMotor_Rotate+0xae>
	}
	else if(state == CLOCKWISE){
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	59 f4       	brne	.+22     	; 0x173c <DcMotor_Rotate+0x9a>
		GPIO_writePin(DcMotor_CONNECTION_PORT,DcMotor_CONNECTION_IN1_PIN, LOGIC_LOW);
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
		GPIO_writePin(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN2_PIN, LOGIC_HIGH);
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
    173a:	0a c0       	rjmp	.+20     	; 0x1750 <DcMotor_Rotate+0xae>
	}
	else{
		GPIO_writePin(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN1_PIN, LOGIC_LOW);
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
		GPIO_writePin(DcMotor_CONNECTION_PORT, DcMotor_CONNECTION_IN2_PIN, LOGIC_HIGH);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
	}

}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <EEPROM_writeByte>:
#include "twi.h"



uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <EEPROM_writeByte+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <EEPROM_writeByte+0x8>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    176e:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1772:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    1776:	88 30       	cpi	r24, 0x08	; 8
    1778:	11 f0       	breq	.+4      	; 0x177e <EEPROM_writeByte+0x22>
        return ERROR;
    177a:	1c 82       	std	Y+4, r1	; 0x04
    177c:	28 c0       	rjmp	.+80     	; 0x17ce <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	80 70       	andi	r24, 0x00	; 0
    1784:	97 70       	andi	r25, 0x07	; 7
    1786:	88 0f       	add	r24, r24
    1788:	89 2f       	mov	r24, r25
    178a:	88 1f       	adc	r24, r24
    178c:	99 0b       	sbc	r25, r25
    178e:	91 95       	neg	r25
    1790:	80 6a       	ori	r24, 0xA0	; 160
    1792:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1796:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    179a:	88 31       	cpi	r24, 0x18	; 24
    179c:	11 f0       	breq	.+4      	; 0x17a2 <EEPROM_writeByte+0x46>
        return ERROR; 
    179e:	1c 82       	std	Y+4, r1	; 0x04
    17a0:	16 c0       	rjmp	.+44     	; 0x17ce <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17a8:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    17ac:	88 32       	cpi	r24, 0x28	; 40
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <EEPROM_writeByte+0x58>
        return ERROR;
    17b0:	1c 82       	std	Y+4, r1	; 0x04
    17b2:	0d c0       	rjmp	.+26     	; 0x17ce <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17ba:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    17be:	88 32       	cpi	r24, 0x28	; 40
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <EEPROM_writeByte+0x6a>
        return ERROR;
    17c2:	1c 82       	std	Y+4, r1	; 0x04
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    17c6:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TWI_stop>
	
    return SUCCESS;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	8c 83       	std	Y+4, r24	; 0x04
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <EEPROM_readByte+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <EEPROM_readByte+0x8>
    17e6:	0f 92       	push	r0
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	7c 83       	std	Y+4, r23	; 0x04
    17f2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    17f4:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    17f8:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    17fc:	88 30       	cpi	r24, 0x08	; 8
    17fe:	11 f0       	breq	.+4      	; 0x1804 <EEPROM_readByte+0x26>
        return ERROR;
    1800:	1d 82       	std	Y+5, r1	; 0x05
    1802:	44 c0       	rjmp	.+136    	; 0x188c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	80 70       	andi	r24, 0x00	; 0
    180a:	97 70       	andi	r25, 0x07	; 7
    180c:	88 0f       	add	r24, r24
    180e:	89 2f       	mov	r24, r25
    1810:	88 1f       	adc	r24, r24
    1812:	99 0b       	sbc	r25, r25
    1814:	91 95       	neg	r25
    1816:	80 6a       	ori	r24, 0xA0	; 160
    1818:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    181c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    1820:	88 31       	cpi	r24, 0x18	; 24
    1822:	11 f0       	breq	.+4      	; 0x1828 <EEPROM_readByte+0x4a>
        return ERROR;
    1824:	1d 82       	std	Y+5, r1	; 0x05
    1826:	32 c0       	rjmp	.+100    	; 0x188c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    182e:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    1832:	88 32       	cpi	r24, 0x28	; 40
    1834:	11 f0       	breq	.+4      	; 0x183a <EEPROM_readByte+0x5c>
        return ERROR;
    1836:	1d 82       	std	Y+5, r1	; 0x05
    1838:	29 c0       	rjmp	.+82     	; 0x188c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    183a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    183e:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    1842:	80 31       	cpi	r24, 0x10	; 16
    1844:	11 f0       	breq	.+4      	; 0x184a <EEPROM_readByte+0x6c>
        return ERROR;
    1846:	1d 82       	std	Y+5, r1	; 0x05
    1848:	21 c0       	rjmp	.+66     	; 0x188c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	80 70       	andi	r24, 0x00	; 0
    1850:	97 70       	andi	r25, 0x07	; 7
    1852:	88 0f       	add	r24, r24
    1854:	89 2f       	mov	r24, r25
    1856:	88 1f       	adc	r24, r24
    1858:	99 0b       	sbc	r25, r25
    185a:	91 95       	neg	r25
    185c:	81 6a       	ori	r24, 0xA1	; 161
    185e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1862:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    1866:	80 34       	cpi	r24, 0x40	; 64
    1868:	11 f0       	breq	.+4      	; 0x186e <EEPROM_readByte+0x90>
        return ERROR;
    186a:	1d 82       	std	Y+5, r1	; 0x05
    186c:	0f c0       	rjmp	.+30     	; 0x188c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    186e:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <TWI_readByteWithNACK>
    1872:	eb 81       	ldd	r30, Y+3	; 0x03
    1874:	fc 81       	ldd	r31, Y+4	; 0x04
    1876:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1878:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_getStatus>
    187c:	88 35       	cpi	r24, 0x58	; 88
    187e:	11 f0       	breq	.+4      	; 0x1884 <EEPROM_readByte+0xa6>
        return ERROR;
    1880:	1d 82       	std	Y+5, r1	; 0x05
    1882:	04 c0       	rjmp	.+8      	; 0x188c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1884:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TWI_stop>

    return SUCCESS;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	8d 83       	std	Y+5, r24	; 0x05
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <GPIO_setupPinDirection+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <GPIO_setupPinDirection+0x8>
    18a6:	0f 92       	push	r0
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	6a 83       	std	Y+2, r22	; 0x02
    18b0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	88 30       	cpi	r24, 0x08	; 8
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <GPIO_setupPinDirection+0x1c>
    18b8:	d5 c0       	rjmp	.+426    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	84 30       	cpi	r24, 0x04	; 4
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <GPIO_setupPinDirection+0x24>
    18c0:	d1 c0       	rjmp	.+418    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	3d 83       	std	Y+5, r19	; 0x05
    18ca:	2c 83       	std	Y+4, r18	; 0x04
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	91 05       	cpc	r25, r1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <GPIO_setupPinDirection+0x3a>
    18d6:	43 c0       	rjmp	.+134    	; 0x195e <GPIO_setupPinDirection+0xc0>
    18d8:	2c 81       	ldd	r18, Y+4	; 0x04
    18da:	3d 81       	ldd	r19, Y+5	; 0x05
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	2c f4       	brge	.+10     	; 0x18ec <GPIO_setupPinDirection+0x4e>
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	71 f0       	breq	.+28     	; 0x1906 <GPIO_setupPinDirection+0x68>
    18ea:	bc c0       	rjmp	.+376    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
    18ec:	2c 81       	ldd	r18, Y+4	; 0x04
    18ee:	3d 81       	ldd	r19, Y+5	; 0x05
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	31 05       	cpc	r19, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <GPIO_setupPinDirection+0x5a>
    18f6:	5f c0       	rjmp	.+190    	; 0x19b6 <GPIO_setupPinDirection+0x118>
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	83 30       	cpi	r24, 0x03	; 3
    18fe:	91 05       	cpc	r25, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <GPIO_setupPinDirection+0x66>
    1902:	85 c0       	rjmp	.+266    	; 0x1a0e <GPIO_setupPinDirection+0x170>
    1904:	af c0       	rjmp	.+350    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	a1 f4       	brne	.+40     	; 0x1934 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    190c:	aa e3       	ldi	r26, 0x3A	; 58
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ea e3       	ldi	r30, 0x3A	; 58
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <GPIO_setupPinDirection+0x8c>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <GPIO_setupPinDirection+0x88>
    192e:	84 2b       	or	r24, r20
    1930:	8c 93       	st	X, r24
    1932:	98 c0       	rjmp	.+304    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1934:	aa e3       	ldi	r26, 0x3A	; 58
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ea e3       	ldi	r30, 0x3A	; 58
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <GPIO_setupPinDirection+0xb4>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <GPIO_setupPinDirection+0xb0>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	83 c0       	rjmp	.+262    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	a1 f4       	brne	.+40     	; 0x198c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1964:	a7 e3       	ldi	r26, 0x37	; 55
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e7 e3       	ldi	r30, 0x37	; 55
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <GPIO_setupPinDirection+0xe4>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <GPIO_setupPinDirection+0xe0>
    1986:	84 2b       	or	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	6c c0       	rjmp	.+216    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    198c:	a7 e3       	ldi	r26, 0x37	; 55
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e7 e3       	ldi	r30, 0x37	; 55
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <GPIO_setupPinDirection+0x10c>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <GPIO_setupPinDirection+0x108>
    19ae:	80 95       	com	r24
    19b0:	84 23       	and	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	57 c0       	rjmp	.+174    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	a1 f4       	brne	.+40     	; 0x19e4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19bc:	a4 e3       	ldi	r26, 0x34	; 52
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e4 e3       	ldi	r30, 0x34	; 52
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <GPIO_setupPinDirection+0x13c>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <GPIO_setupPinDirection+0x138>
    19de:	84 2b       	or	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	40 c0       	rjmp	.+128    	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19e4:	a4 e3       	ldi	r26, 0x34	; 52
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e4 e3       	ldi	r30, 0x34	; 52
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <GPIO_setupPinDirection+0x164>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <GPIO_setupPinDirection+0x160>
    1a06:	80 95       	com	r24
    1a08:	84 23       	and	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	2b c0       	rjmp	.+86     	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	a1 f4       	brne	.+40     	; 0x1a3c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a14:	a1 e3       	ldi	r26, 0x31	; 49
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e1 e3       	ldi	r30, 0x31	; 49
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <GPIO_setupPinDirection+0x194>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <GPIO_setupPinDirection+0x190>
    1a36:	84 2b       	or	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a3c:	a1 e3       	ldi	r26, 0x31	; 49
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e1 e3       	ldi	r30, 0x31	; 49
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <GPIO_setupPinDirection+0x1bc>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <GPIO_setupPinDirection+0x1b8>
    1a5e:	80 95       	com	r24
    1a60:	84 23       	and	r24, r20
    1a62:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <GPIO_writePin+0x6>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <GPIO_writePin+0x8>
    1a7c:	0f 92       	push	r0
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	6a 83       	std	Y+2, r22	; 0x02
    1a86:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	88 30       	cpi	r24, 0x08	; 8
    1a8c:	08 f0       	brcs	.+2      	; 0x1a90 <GPIO_writePin+0x1c>
    1a8e:	d5 c0       	rjmp	.+426    	; 0x1c3a <GPIO_writePin+0x1c6>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <GPIO_writePin+0x24>
    1a96:	d1 c0       	rjmp	.+418    	; 0x1c3a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	3d 83       	std	Y+5, r19	; 0x05
    1aa0:	2c 83       	std	Y+4, r18	; 0x04
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <GPIO_writePin+0x3a>
    1aac:	43 c0       	rjmp	.+134    	; 0x1b34 <GPIO_writePin+0xc0>
    1aae:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <GPIO_writePin+0x4e>
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	71 f0       	breq	.+28     	; 0x1adc <GPIO_writePin+0x68>
    1ac0:	bc c0       	rjmp	.+376    	; 0x1c3a <GPIO_writePin+0x1c6>
    1ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	09 f4       	brne	.+2      	; 0x1ace <GPIO_writePin+0x5a>
    1acc:	5f c0       	rjmp	.+190    	; 0x1b8c <GPIO_writePin+0x118>
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <GPIO_writePin+0x66>
    1ad8:	85 c0       	rjmp	.+266    	; 0x1be4 <GPIO_writePin+0x170>
    1ada:	af c0       	rjmp	.+350    	; 0x1c3a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	a1 f4       	brne	.+40     	; 0x1b0a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ae2:	ab e3       	ldi	r26, 0x3B	; 59
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	eb e3       	ldi	r30, 0x3B	; 59
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_writePin+0x8c>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_writePin+0x88>
    1b04:	84 2b       	or	r24, r20
    1b06:	8c 93       	st	X, r24
    1b08:	98 c0       	rjmp	.+304    	; 0x1c3a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b0a:	ab e3       	ldi	r26, 0x3B	; 59
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	eb e3       	ldi	r30, 0x3B	; 59
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <GPIO_writePin+0xb4>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <GPIO_writePin+0xb0>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	83 c0       	rjmp	.+262    	; 0x1c3a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	a1 f4       	brne	.+40     	; 0x1b62 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b3a:	a8 e3       	ldi	r26, 0x38	; 56
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e8 e3       	ldi	r30, 0x38	; 56
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_writePin+0xe4>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_writePin+0xe0>
    1b5c:	84 2b       	or	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	6c c0       	rjmp	.+216    	; 0x1c3a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b62:	a8 e3       	ldi	r26, 0x38	; 56
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e8 e3       	ldi	r30, 0x38	; 56
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GPIO_writePin+0x10c>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <GPIO_writePin+0x108>
    1b84:	80 95       	com	r24
    1b86:	84 23       	and	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	57 c0       	rjmp	.+174    	; 0x1c3a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	a1 f4       	brne	.+40     	; 0x1bba <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b92:	a5 e3       	ldi	r26, 0x35	; 53
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e5 e3       	ldi	r30, 0x35	; 53
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 2e       	mov	r0, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <GPIO_writePin+0x13c>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	0a 94       	dec	r0
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <GPIO_writePin+0x138>
    1bb4:	84 2b       	or	r24, r20
    1bb6:	8c 93       	st	X, r24
    1bb8:	40 c0       	rjmp	.+128    	; 0x1c3a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bba:	a5 e3       	ldi	r26, 0x35	; 53
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e5 e3       	ldi	r30, 0x35	; 53
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <GPIO_writePin+0x164>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <GPIO_writePin+0x160>
    1bdc:	80 95       	com	r24
    1bde:	84 23       	and	r24, r20
    1be0:	8c 93       	st	X, r24
    1be2:	2b c0       	rjmp	.+86     	; 0x1c3a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	a1 f4       	brne	.+40     	; 0x1c12 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1bea:	a2 e3       	ldi	r26, 0x32	; 50
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e2 e3       	ldi	r30, 0x32	; 50
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <GPIO_writePin+0x194>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <GPIO_writePin+0x190>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c12:	a2 e3       	ldi	r26, 0x32	; 50
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e2 e3       	ldi	r30, 0x32	; 50
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <GPIO_writePin+0x1bc>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <GPIO_writePin+0x1b8>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <GPIO_readPin+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <GPIO_readPin+0x8>
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c5c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	88 30       	cpi	r24, 0x08	; 8
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <GPIO_readPin+0x1c>
    1c64:	84 c0       	rjmp	.+264    	; 0x1d6e <GPIO_readPin+0x124>
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <GPIO_readPin+0x24>
    1c6c:	80 c0       	rjmp	.+256    	; 0x1d6e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3d 83       	std	Y+5, r19	; 0x05
    1c76:	2c 83       	std	Y+4, r18	; 0x04
    1c78:	4c 81       	ldd	r20, Y+4	; 0x04
    1c7a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c7c:	41 30       	cpi	r20, 0x01	; 1
    1c7e:	51 05       	cpc	r21, r1
    1c80:	79 f1       	breq	.+94     	; 0x1ce0 <GPIO_readPin+0x96>
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	9d 81       	ldd	r25, Y+5	; 0x05
    1c86:	82 30       	cpi	r24, 0x02	; 2
    1c88:	91 05       	cpc	r25, r1
    1c8a:	34 f4       	brge	.+12     	; 0x1c98 <GPIO_readPin+0x4e>
    1c8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c90:	21 15       	cp	r18, r1
    1c92:	31 05       	cpc	r19, r1
    1c94:	69 f0       	breq	.+26     	; 0x1cb0 <GPIO_readPin+0x66>
    1c96:	6b c0       	rjmp	.+214    	; 0x1d6e <GPIO_readPin+0x124>
    1c98:	4c 81       	ldd	r20, Y+4	; 0x04
    1c9a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c9c:	42 30       	cpi	r20, 0x02	; 2
    1c9e:	51 05       	cpc	r21, r1
    1ca0:	b9 f1       	breq	.+110    	; 0x1d10 <GPIO_readPin+0xc6>
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <GPIO_readPin+0x64>
    1cac:	49 c0       	rjmp	.+146    	; 0x1d40 <GPIO_readPin+0xf6>
    1cae:	5f c0       	rjmp	.+190    	; 0x1d6e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1cb0:	e9 e3       	ldi	r30, 0x39	; 57
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <GPIO_readPin+0x7e>
    1cc4:	55 95       	asr	r21
    1cc6:	47 95       	ror	r20
    1cc8:	8a 95       	dec	r24
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <GPIO_readPin+0x7a>
    1ccc:	ca 01       	movw	r24, r20
    1cce:	81 70       	andi	r24, 0x01	; 1
    1cd0:	90 70       	andi	r25, 0x00	; 0
    1cd2:	88 23       	and	r24, r24
    1cd4:	19 f0       	breq	.+6      	; 0x1cdc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	49 c0       	rjmp	.+146    	; 0x1d6e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
    1cde:	47 c0       	rjmp	.+142    	; 0x1d6e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ce0:	e6 e3       	ldi	r30, 0x36	; 54
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a9 01       	movw	r20, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <GPIO_readPin+0xae>
    1cf4:	55 95       	asr	r21
    1cf6:	47 95       	ror	r20
    1cf8:	8a 95       	dec	r24
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <GPIO_readPin+0xaa>
    1cfc:	ca 01       	movw	r24, r20
    1cfe:	81 70       	andi	r24, 0x01	; 1
    1d00:	90 70       	andi	r25, 0x00	; 0
    1d02:	88 23       	and	r24, r24
    1d04:	19 f0       	breq	.+6      	; 0x1d0c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	31 c0       	rjmp	.+98     	; 0x1d6e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d0c:	19 82       	std	Y+1, r1	; 0x01
    1d0e:	2f c0       	rjmp	.+94     	; 0x1d6e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d10:	e3 e3       	ldi	r30, 0x33	; 51
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a9 01       	movw	r20, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <GPIO_readPin+0xde>
    1d24:	55 95       	asr	r21
    1d26:	47 95       	ror	r20
    1d28:	8a 95       	dec	r24
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <GPIO_readPin+0xda>
    1d2c:	ca 01       	movw	r24, r20
    1d2e:	81 70       	andi	r24, 0x01	; 1
    1d30:	90 70       	andi	r25, 0x00	; 0
    1d32:	88 23       	and	r24, r24
    1d34:	19 f0       	breq	.+6      	; 0x1d3c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	19 c0       	rjmp	.+50     	; 0x1d6e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d3c:	19 82       	std	Y+1, r1	; 0x01
    1d3e:	17 c0       	rjmp	.+46     	; 0x1d6e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d40:	e0 e3       	ldi	r30, 0x30	; 48
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	a9 01       	movw	r20, r18
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <GPIO_readPin+0x10e>
    1d54:	55 95       	asr	r21
    1d56:	47 95       	ror	r20
    1d58:	8a 95       	dec	r24
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <GPIO_readPin+0x10a>
    1d5c:	ca 01       	movw	r24, r20
    1d5e:	81 70       	andi	r24, 0x01	; 1
    1d60:	90 70       	andi	r25, 0x00	; 0
    1d62:	88 23       	and	r24, r24
    1d64:	19 f0       	breq	.+6      	; 0x1d6c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d6c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <GPIO_setupPortDirection+0x6>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <GPIO_setupPortDirection+0x8>
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	84 30       	cpi	r24, 0x04	; 4
    1d94:	90 f5       	brcc	.+100    	; 0x1dfa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	3c 83       	std	Y+4, r19	; 0x04
    1d9e:	2b 83       	std	Y+3, r18	; 0x03
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	d1 f0       	breq	.+52     	; 0x1dde <GPIO_setupPortDirection+0x5e>
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <GPIO_setupPortDirection+0x3e>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <GPIO_setupPortDirection+0x54>
    1dbc:	1e c0       	rjmp	.+60     	; 0x1dfa <GPIO_setupPortDirection+0x7a>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	81 f0       	breq	.+32     	; 0x1de8 <GPIO_setupPortDirection+0x68>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	91 05       	cpc	r25, r1
    1dd0:	81 f0       	breq	.+32     	; 0x1df2 <GPIO_setupPortDirection+0x72>
    1dd2:	13 c0       	rjmp	.+38     	; 0x1dfa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dd4:	ea e3       	ldi	r30, 0x3A	; 58
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	80 83       	st	Z, r24
    1ddc:	0e c0       	rjmp	.+28     	; 0x1dfa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1dde:	e7 e3       	ldi	r30, 0x37	; 55
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	80 83       	st	Z, r24
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1de8:	e4 e3       	ldi	r30, 0x34	; 52
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	80 83       	st	Z, r24
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1df2:	e1 e3       	ldi	r30, 0x31	; 49
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <GPIO_writePort+0x6>
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <GPIO_writePort+0x8>
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	90 f5       	brcc	.+100    	; 0x1e82 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	3c 83       	std	Y+4, r19	; 0x04
    1e26:	2b 83       	std	Y+3, r18	; 0x03
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	91 05       	cpc	r25, r1
    1e30:	d1 f0       	breq	.+52     	; 0x1e66 <GPIO_writePort+0x5e>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <GPIO_writePort+0x3e>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	61 f0       	breq	.+24     	; 0x1e5c <GPIO_writePort+0x54>
    1e44:	1e c0       	rjmp	.+60     	; 0x1e82 <GPIO_writePort+0x7a>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	81 f0       	breq	.+32     	; 0x1e70 <GPIO_writePort+0x68>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	81 f0       	breq	.+32     	; 0x1e7a <GPIO_writePort+0x72>
    1e5a:	13 c0       	rjmp	.+38     	; 0x1e82 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e5c:	eb e3       	ldi	r30, 0x3B	; 59
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	80 83       	st	Z, r24
    1e64:	0e c0       	rjmp	.+28     	; 0x1e82 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e66:	e8 e3       	ldi	r30, 0x38	; 56
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 83       	st	Z, r24
    1e6e:	09 c0       	rjmp	.+18     	; 0x1e82 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e70:	e5 e3       	ldi	r30, 0x35	; 53
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e7a:	e2 e3       	ldi	r30, 0x32	; 50
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <GPIO_readPort+0x6>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <GPIO_readPort+0x8>
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e9e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	84 30       	cpi	r24, 0x04	; 4
    1ea4:	90 f5       	brcc	.+100    	; 0x1f0a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	3c 83       	std	Y+4, r19	; 0x04
    1eae:	2b 83       	std	Y+3, r18	; 0x03
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	d1 f0       	breq	.+52     	; 0x1eee <GPIO_readPort+0x5e>
    1eba:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <GPIO_readPort+0x3e>
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	61 f0       	breq	.+24     	; 0x1ee4 <GPIO_readPort+0x54>
    1ecc:	1e c0       	rjmp	.+60     	; 0x1f0a <GPIO_readPort+0x7a>
    1ece:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed2:	22 30       	cpi	r18, 0x02	; 2
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	81 f0       	breq	.+32     	; 0x1ef8 <GPIO_readPort+0x68>
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	83 30       	cpi	r24, 0x03	; 3
    1ede:	91 05       	cpc	r25, r1
    1ee0:	81 f0       	breq	.+32     	; 0x1f02 <GPIO_readPort+0x72>
    1ee2:	13 c0       	rjmp	.+38     	; 0x1f0a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ee4:	e9 e3       	ldi	r30, 0x39	; 57
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	0e c0       	rjmp	.+28     	; 0x1f0a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1eee:	e6 e3       	ldi	r30, 0x36	; 54
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	09 c0       	rjmp	.+18     	; 0x1f0a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ef8:	e3 e3       	ldi	r30, 0x33	; 51
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f02:	e0 e3       	ldi	r30, 0x30	; 48
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <LCD_init>:
 * Description : Initialize the LCD:
 * 				 1. Setup the LCD pins directions by use the GPIO driver.
 * 				 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	62 e0       	ldi	r22, 0x02	; 2
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	63 e0       	ldi	r22, 0x03	; 3
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	64 e0       	ldi	r22, 0x04	; 4
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	6f ef       	ldi	r22, 0xFF	; 255
    1f44:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1f48:	88 e3       	ldi	r24, 0x38	; 56
    1f4a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f4e:	8c e0       	ldi	r24, 0x0C	; 12
    1f50:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_sendCommand>
}
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	e9 97       	sbiw	r28, 0x39	; 57
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	62 e0       	ldi	r22, 0x02	; 2
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	63 e0       	ldi	r22, 0x03	; 3
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a0 e8       	ldi	r26, 0x80	; 128
    1f90:	bf e3       	ldi	r27, 0x3F	; 63
    1f92:	8d ab       	std	Y+53, r24	; 0x35
    1f94:	9e ab       	std	Y+54, r25	; 0x36
    1f96:	af ab       	std	Y+55, r26	; 0x37
    1f98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a ef       	ldi	r20, 0xFA	; 250
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	89 ab       	std	Y+49, r24	; 0x31
    1fb4:	9a ab       	std	Y+50, r25	; 0x32
    1fb6:	ab ab       	std	Y+51, r26	; 0x33
    1fb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fba:	69 a9       	ldd	r22, Y+49	; 0x31
    1fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	2c f4       	brge	.+10     	; 0x1fdc <LCD_sendCommand+0x7c>
		__ticks = 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	98 ab       	std	Y+48, r25	; 0x30
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
    1fda:	3f c0       	rjmp	.+126    	; 0x205a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1fdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fde:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	3f ef       	ldi	r19, 0xFF	; 255
    1fe8:	4f e7       	ldi	r20, 0x7F	; 127
    1fea:	57 e4       	ldi	r21, 0x47	; 71
    1fec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	4c f5       	brge	.+82     	; 0x2046 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff8:	8f a9       	ldd	r24, Y+55	; 0x37
    1ffa:	98 ad       	ldd	r25, Y+56	; 0x38
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	98 ab       	std	Y+48, r25	; 0x30
    201a:	8f a7       	std	Y+47, r24	; 0x2f
    201c:	0f c0       	rjmp	.+30     	; 0x203c <LCD_sendCommand+0xdc>
    201e:	88 ec       	ldi	r24, 0xC8	; 200
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9e a7       	std	Y+46, r25	; 0x2e
    2024:	8d a7       	std	Y+45, r24	; 0x2d
    2026:	8d a5       	ldd	r24, Y+45	; 0x2d
    2028:	9e a5       	ldd	r25, Y+46	; 0x2e
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_sendCommand+0xca>
    202e:	9e a7       	std	Y+46, r25	; 0x2e
    2030:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2032:	8f a5       	ldd	r24, Y+47	; 0x2f
    2034:	98 a9       	ldd	r25, Y+48	; 0x30
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	98 ab       	std	Y+48, r25	; 0x30
    203a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203c:	8f a5       	ldd	r24, Y+47	; 0x2f
    203e:	98 a9       	ldd	r25, Y+48	; 0x30
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	69 f7       	brne	.-38     	; 0x201e <LCD_sendCommand+0xbe>
    2044:	14 c0       	rjmp	.+40     	; 0x206e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2046:	69 a9       	ldd	r22, Y+49	; 0x31
    2048:	7a a9       	ldd	r23, Y+50	; 0x32
    204a:	8b a9       	ldd	r24, Y+51	; 0x33
    204c:	9c a9       	ldd	r25, Y+52	; 0x34
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	98 ab       	std	Y+48, r25	; 0x30
    2058:	8f a7       	std	Y+47, r24	; 0x2f
    205a:	8f a5       	ldd	r24, Y+47	; 0x2f
    205c:	98 a9       	ldd	r25, Y+48	; 0x30
    205e:	9c a7       	std	Y+44, r25	; 0x2c
    2060:	8b a7       	std	Y+43, r24	; 0x2b
    2062:	8b a5       	ldd	r24, Y+43	; 0x2b
    2064:	9c a5       	ldd	r25, Y+44	; 0x2c
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <LCD_sendCommand+0x106>
    206a:	9c a7       	std	Y+44, r25	; 0x2c
    206c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	64 e0       	ldi	r22, 0x04	; 4
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a0 e8       	ldi	r26, 0x80	; 128
    207e:	bf e3       	ldi	r27, 0x3F	; 63
    2080:	8f a3       	std	Y+39, r24	; 0x27
    2082:	98 a7       	std	Y+40, r25	; 0x28
    2084:	a9 a7       	std	Y+41, r26	; 0x29
    2086:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	6f a1       	ldd	r22, Y+39	; 0x27
    208a:	78 a5       	ldd	r23, Y+40	; 0x28
    208c:	89 a5       	ldd	r24, Y+41	; 0x29
    208e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a ef       	ldi	r20, 0xFA	; 250
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8b a3       	std	Y+35, r24	; 0x23
    20a2:	9c a3       	std	Y+36, r25	; 0x24
    20a4:	ad a3       	std	Y+37, r26	; 0x25
    20a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20a8:	6b a1       	ldd	r22, Y+35	; 0x23
    20aa:	7c a1       	ldd	r23, Y+36	; 0x24
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <LCD_sendCommand+0x16a>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	6f a1       	ldd	r22, Y+39	; 0x27
    20e4:	78 a5       	ldd	r23, Y+40	; 0x28
    20e6:	89 a5       	ldd	r24, Y+41	; 0x29
    20e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9a a3       	std	Y+34, r25	; 0x22
    2108:	89 a3       	std	Y+33, r24	; 0x21
    210a:	0f c0       	rjmp	.+30     	; 0x212a <LCD_sendCommand+0x1ca>
    210c:	88 ec       	ldi	r24, 0xC8	; 200
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	8f 8f       	std	Y+31, r24	; 0x1f
    2114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2116:	98 a1       	ldd	r25, Y+32	; 0x20
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <LCD_sendCommand+0x1b8>
    211c:	98 a3       	std	Y+32, r25	; 0x20
    211e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9a a3       	std	Y+34, r25	; 0x22
    2128:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	89 a1       	ldd	r24, Y+33	; 0x21
    212c:	9a a1       	ldd	r25, Y+34	; 0x22
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <LCD_sendCommand+0x1ac>
    2132:	14 c0       	rjmp	.+40     	; 0x215c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	6b a1       	ldd	r22, Y+35	; 0x23
    2136:	7c a1       	ldd	r23, Y+36	; 0x24
    2138:	8d a1       	ldd	r24, Y+37	; 0x25
    213a:	9e a1       	ldd	r25, Y+38	; 0x26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9a a3       	std	Y+34, r25	; 0x22
    2146:	89 a3       	std	Y+33, r24	; 0x21
    2148:	89 a1       	ldd	r24, Y+33	; 0x21
    214a:	9a a1       	ldd	r25, Y+34	; 0x22
    214c:	9e 8f       	std	Y+30, r25	; 0x1e
    214e:	8d 8f       	std	Y+29, r24	; 0x1d
    2150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2152:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_sendCommand+0x1f4>
    2158:	9e 8f       	std	Y+30, r25	; 0x1e
    215a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	69 ad       	ldd	r22, Y+57	; 0x39
    2160:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <GPIO_writePort>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e8       	ldi	r26, 0x80	; 128
    216a:	bf e3       	ldi	r27, 0x3F	; 63
    216c:	89 8f       	std	Y+25, r24	; 0x19
    216e:	9a 8f       	std	Y+26, r25	; 0x1a
    2170:	ab 8f       	std	Y+27, r26	; 0x1b
    2172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	69 8d       	ldd	r22, Y+25	; 0x19
    2176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a ef       	ldi	r20, 0xFA	; 250
    2182:	54 e4       	ldi	r21, 0x44	; 68
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8d 8b       	std	Y+21, r24	; 0x15
    218e:	9e 8b       	std	Y+22, r25	; 0x16
    2190:	af 8b       	std	Y+23, r26	; 0x17
    2192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <LCD_sendCommand+0x256>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <LCD_sendCommand+0x2b6>
    21f8:	88 ec       	ldi	r24, 0xC8	; 200
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	89 8b       	std	Y+17, r24	; 0x11
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	9a 89       	ldd	r25, Y+18	; 0x12
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_sendCommand+0x2a4>
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <LCD_sendCommand+0x298>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	98 8b       	std	Y+16, r25	; 0x10
    223a:	8f 87       	std	Y+15, r24	; 0x0f
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	98 89       	ldd	r25, Y+16	; 0x10
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <LCD_sendCommand+0x2e0>
    2244:	98 8b       	std	Y+16, r25	; 0x10
    2246:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	64 e0       	ldi	r22, 0x04	; 4
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e8       	ldi	r26, 0x80	; 128
    2258:	bf e3       	ldi	r27, 0x3F	; 63
    225a:	8b 87       	std	Y+11, r24	; 0x0b
    225c:	9c 87       	std	Y+12, r25	; 0x0c
    225e:	ad 87       	std	Y+13, r26	; 0x0d
    2260:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2262:	6b 85       	ldd	r22, Y+11	; 0x0b
    2264:	7c 85       	ldd	r23, Y+12	; 0x0c
    2266:	8d 85       	ldd	r24, Y+13	; 0x0d
    2268:	9e 85       	ldd	r25, Y+14	; 0x0e
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4a ef       	ldi	r20, 0xFA	; 250
    2270:	54 e4       	ldi	r21, 0x44	; 68
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	8f 83       	std	Y+7, r24	; 0x07
    227c:	98 87       	std	Y+8, r25	; 0x08
    227e:	a9 87       	std	Y+9, r26	; 0x09
    2280:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	2c f4       	brge	.+10     	; 0x22a4 <LCD_sendCommand+0x344>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	57 e4       	ldi	r21, 0x47	; 71
    22b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f5       	brge	.+82     	; 0x230e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22be:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <LCD_sendCommand+0x3a4>
    22e6:	88 ec       	ldi	r24, 0xC8	; 200
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9c 83       	std	Y+4, r25	; 0x04
    22ec:	8b 83       	std	Y+3, r24	; 0x03
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_sendCommand+0x392>
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	69 f7       	brne	.-38     	; 0x22e6 <LCD_sendCommand+0x386>
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230e:	6f 81       	ldd	r22, Y+7	; 0x07
    2310:	78 85       	ldd	r23, Y+8	; 0x08
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_sendCommand+0x3ce>
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2336:	e9 96       	adiw	r28, 0x39	; 57
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	e9 97       	sbiw	r28, 0x39	; 57
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	62 e0       	ldi	r22, 0x02	; 2
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	63 e0       	ldi	r22, 0x03	; 3
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e8       	ldi	r26, 0x80	; 128
    2378:	bf e3       	ldi	r27, 0x3F	; 63
    237a:	8d ab       	std	Y+53, r24	; 0x35
    237c:	9e ab       	std	Y+54, r25	; 0x36
    237e:	af ab       	std	Y+55, r26	; 0x37
    2380:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	6d a9       	ldd	r22, Y+53	; 0x35
    2384:	7e a9       	ldd	r23, Y+54	; 0x36
    2386:	8f a9       	ldd	r24, Y+55	; 0x37
    2388:	98 ad       	ldd	r25, Y+56	; 0x38
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a ef       	ldi	r20, 0xFA	; 250
    2390:	54 e4       	ldi	r21, 0x44	; 68
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	89 ab       	std	Y+49, r24	; 0x31
    239c:	9a ab       	std	Y+50, r25	; 0x32
    239e:	ab ab       	std	Y+51, r26	; 0x33
    23a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23a2:	69 a9       	ldd	r22, Y+49	; 0x31
    23a4:	7a a9       	ldd	r23, Y+50	; 0x32
    23a6:	8b a9       	ldd	r24, Y+51	; 0x33
    23a8:	9c a9       	ldd	r25, Y+52	; 0x34
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	98 ab       	std	Y+48, r25	; 0x30
    23c0:	8f a7       	std	Y+47, r24	; 0x2f
    23c2:	3f c0       	rjmp	.+126    	; 0x2442 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    23c4:	69 a9       	ldd	r22, Y+49	; 0x31
    23c6:	7a a9       	ldd	r23, Y+50	; 0x32
    23c8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ca:	9c a9       	ldd	r25, Y+52	; 0x34
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	4f e7       	ldi	r20, 0x7F	; 127
    23d2:	57 e4       	ldi	r21, 0x47	; 71
    23d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d8:	18 16       	cp	r1, r24
    23da:	4c f5       	brge	.+82     	; 0x242e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	6d a9       	ldd	r22, Y+53	; 0x35
    23de:	7e a9       	ldd	r23, Y+54	; 0x36
    23e0:	8f a9       	ldd	r24, Y+55	; 0x37
    23e2:	98 ad       	ldd	r25, Y+56	; 0x38
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	98 ab       	std	Y+48, r25	; 0x30
    2402:	8f a7       	std	Y+47, r24	; 0x2f
    2404:	0f c0       	rjmp	.+30     	; 0x2424 <LCD_displayCharacter+0xdc>
    2406:	88 ec       	ldi	r24, 0xC8	; 200
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9e a7       	std	Y+46, r25	; 0x2e
    240c:	8d a7       	std	Y+45, r24	; 0x2d
    240e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2410:	9e a5       	ldd	r25, Y+46	; 0x2e
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <LCD_displayCharacter+0xca>
    2416:	9e a7       	std	Y+46, r25	; 0x2e
    2418:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	8f a5       	ldd	r24, Y+47	; 0x2f
    241c:	98 a9       	ldd	r25, Y+48	; 0x30
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	98 ab       	std	Y+48, r25	; 0x30
    2422:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2424:	8f a5       	ldd	r24, Y+47	; 0x2f
    2426:	98 a9       	ldd	r25, Y+48	; 0x30
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	69 f7       	brne	.-38     	; 0x2406 <LCD_displayCharacter+0xbe>
    242c:	14 c0       	rjmp	.+40     	; 0x2456 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	69 a9       	ldd	r22, Y+49	; 0x31
    2430:	7a a9       	ldd	r23, Y+50	; 0x32
    2432:	8b a9       	ldd	r24, Y+51	; 0x33
    2434:	9c a9       	ldd	r25, Y+52	; 0x34
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	98 ab       	std	Y+48, r25	; 0x30
    2440:	8f a7       	std	Y+47, r24	; 0x2f
    2442:	8f a5       	ldd	r24, Y+47	; 0x2f
    2444:	98 a9       	ldd	r25, Y+48	; 0x30
    2446:	9c a7       	std	Y+44, r25	; 0x2c
    2448:	8b a7       	std	Y+43, r24	; 0x2b
    244a:	8b a5       	ldd	r24, Y+43	; 0x2b
    244c:	9c a5       	ldd	r25, Y+44	; 0x2c
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_displayCharacter+0x106>
    2452:	9c a7       	std	Y+44, r25	; 0x2c
    2454:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	64 e0       	ldi	r22, 0x04	; 4
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 e8       	ldi	r26, 0x80	; 128
    2466:	bf e3       	ldi	r27, 0x3F	; 63
    2468:	8f a3       	std	Y+39, r24	; 0x27
    246a:	98 a7       	std	Y+40, r25	; 0x28
    246c:	a9 a7       	std	Y+41, r26	; 0x29
    246e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	6f a1       	ldd	r22, Y+39	; 0x27
    2472:	78 a5       	ldd	r23, Y+40	; 0x28
    2474:	89 a5       	ldd	r24, Y+41	; 0x29
    2476:	9a a5       	ldd	r25, Y+42	; 0x2a
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a ef       	ldi	r20, 0xFA	; 250
    247e:	54 e4       	ldi	r21, 0x44	; 68
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	8b a3       	std	Y+35, r24	; 0x23
    248a:	9c a3       	std	Y+36, r25	; 0x24
    248c:	ad a3       	std	Y+37, r26	; 0x25
    248e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2490:	6b a1       	ldd	r22, Y+35	; 0x23
    2492:	7c a1       	ldd	r23, Y+36	; 0x24
    2494:	8d a1       	ldd	r24, Y+37	; 0x25
    2496:	9e a1       	ldd	r25, Y+38	; 0x26
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a4:	88 23       	and	r24, r24
    24a6:	2c f4       	brge	.+10     	; 0x24b2 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9a a3       	std	Y+34, r25	; 0x22
    24ae:	89 a3       	std	Y+33, r24	; 0x21
    24b0:	3f c0       	rjmp	.+126    	; 0x2530 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    24b2:	6b a1       	ldd	r22, Y+35	; 0x23
    24b4:	7c a1       	ldd	r23, Y+36	; 0x24
    24b6:	8d a1       	ldd	r24, Y+37	; 0x25
    24b8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	4c f5       	brge	.+82     	; 0x251c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	6f a1       	ldd	r22, Y+39	; 0x27
    24cc:	78 a5       	ldd	r23, Y+40	; 0x28
    24ce:	89 a5       	ldd	r24, Y+41	; 0x29
    24d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	9a a3       	std	Y+34, r25	; 0x22
    24f0:	89 a3       	std	Y+33, r24	; 0x21
    24f2:	0f c0       	rjmp	.+30     	; 0x2512 <LCD_displayCharacter+0x1ca>
    24f4:	88 ec       	ldi	r24, 0xC8	; 200
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	98 a3       	std	Y+32, r25	; 0x20
    24fa:	8f 8f       	std	Y+31, r24	; 0x1f
    24fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <LCD_displayCharacter+0x1b8>
    2504:	98 a3       	std	Y+32, r25	; 0x20
    2506:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2508:	89 a1       	ldd	r24, Y+33	; 0x21
    250a:	9a a1       	ldd	r25, Y+34	; 0x22
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	9a a3       	std	Y+34, r25	; 0x22
    2510:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2512:	89 a1       	ldd	r24, Y+33	; 0x21
    2514:	9a a1       	ldd	r25, Y+34	; 0x22
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	69 f7       	brne	.-38     	; 0x24f4 <LCD_displayCharacter+0x1ac>
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251c:	6b a1       	ldd	r22, Y+35	; 0x23
    251e:	7c a1       	ldd	r23, Y+36	; 0x24
    2520:	8d a1       	ldd	r24, Y+37	; 0x25
    2522:	9e a1       	ldd	r25, Y+38	; 0x26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9a a3       	std	Y+34, r25	; 0x22
    252e:	89 a3       	std	Y+33, r24	; 0x21
    2530:	89 a1       	ldd	r24, Y+33	; 0x21
    2532:	9a a1       	ldd	r25, Y+34	; 0x22
    2534:	9e 8f       	std	Y+30, r25	; 0x1e
    2536:	8d 8f       	std	Y+29, r24	; 0x1d
    2538:	8d 8d       	ldd	r24, Y+29	; 0x1d
    253a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_displayCharacter+0x1f4>
    2540:	9e 8f       	std	Y+30, r25	; 0x1e
    2542:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	69 ad       	ldd	r22, Y+57	; 0x39
    2548:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <GPIO_writePort>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e8       	ldi	r26, 0x80	; 128
    2552:	bf e3       	ldi	r27, 0x3F	; 63
    2554:	89 8f       	std	Y+25, r24	; 0x19
    2556:	9a 8f       	std	Y+26, r25	; 0x1a
    2558:	ab 8f       	std	Y+27, r26	; 0x1b
    255a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	69 8d       	ldd	r22, Y+25	; 0x19
    255e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2560:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2562:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a ef       	ldi	r20, 0xFA	; 250
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	8d 8b       	std	Y+21, r24	; 0x15
    2576:	9e 8b       	std	Y+22, r25	; 0x16
    2578:	af 8b       	std	Y+23, r26	; 0x17
    257a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    257c:	6d 89       	ldd	r22, Y+21	; 0x15
    257e:	7e 89       	ldd	r23, Y+22	; 0x16
    2580:	8f 89       	ldd	r24, Y+23	; 0x17
    2582:	98 8d       	ldd	r25, Y+24	; 0x18
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <LCD_displayCharacter+0x256>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9c 8b       	std	Y+20, r25	; 0x14
    259a:	8b 8b       	std	Y+19, r24	; 0x13
    259c:	3f c0       	rjmp	.+126    	; 0x261c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    259e:	6d 89       	ldd	r22, Y+21	; 0x15
    25a0:	7e 89       	ldd	r23, Y+22	; 0x16
    25a2:	8f 89       	ldd	r24, Y+23	; 0x17
    25a4:	98 8d       	ldd	r25, Y+24	; 0x18
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	69 8d       	ldd	r22, Y+25	; 0x19
    25b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9c 8b       	std	Y+20, r25	; 0x14
    25dc:	8b 8b       	std	Y+19, r24	; 0x13
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <LCD_displayCharacter+0x2b6>
    25e0:	88 ec       	ldi	r24, 0xC8	; 200
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9a 8b       	std	Y+18, r25	; 0x12
    25e6:	89 8b       	std	Y+17, r24	; 0x11
    25e8:	89 89       	ldd	r24, Y+17	; 0x11
    25ea:	9a 89       	ldd	r25, Y+18	; 0x12
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_displayCharacter+0x2a4>
    25f0:	9a 8b       	std	Y+18, r25	; 0x12
    25f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	9c 8b       	std	Y+20, r25	; 0x14
    25fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2600:	9c 89       	ldd	r25, Y+20	; 0x14
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <LCD_displayCharacter+0x298>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	6d 89       	ldd	r22, Y+21	; 0x15
    260a:	7e 89       	ldd	r23, Y+22	; 0x16
    260c:	8f 89       	ldd	r24, Y+23	; 0x17
    260e:	98 8d       	ldd	r25, Y+24	; 0x18
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9c 8b       	std	Y+20, r25	; 0x14
    261a:	8b 8b       	std	Y+19, r24	; 0x13
    261c:	8b 89       	ldd	r24, Y+19	; 0x13
    261e:	9c 89       	ldd	r25, Y+20	; 0x14
    2620:	98 8b       	std	Y+16, r25	; 0x10
    2622:	8f 87       	std	Y+15, r24	; 0x0f
    2624:	8f 85       	ldd	r24, Y+15	; 0x0f
    2626:	98 89       	ldd	r25, Y+16	; 0x10
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_displayCharacter+0x2e0>
    262c:	98 8b       	std	Y+16, r25	; 0x10
    262e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	64 e0       	ldi	r22, 0x04	; 4
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePin>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a0 e8       	ldi	r26, 0x80	; 128
    2640:	bf e3       	ldi	r27, 0x3F	; 63
    2642:	8b 87       	std	Y+11, r24	; 0x0b
    2644:	9c 87       	std	Y+12, r25	; 0x0c
    2646:	ad 87       	std	Y+13, r26	; 0x0d
    2648:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	6b 85       	ldd	r22, Y+11	; 0x0b
    264c:	7c 85       	ldd	r23, Y+12	; 0x0c
    264e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2650:	9e 85       	ldd	r25, Y+14	; 0x0e
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a ef       	ldi	r20, 0xFA	; 250
    2658:	54 e4       	ldi	r21, 0x44	; 68
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	8f 83       	std	Y+7, r24	; 0x07
    2664:	98 87       	std	Y+8, r25	; 0x08
    2666:	a9 87       	std	Y+9, r26	; 0x09
    2668:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    266a:	6f 81       	ldd	r22, Y+7	; 0x07
    266c:	78 85       	ldd	r23, Y+8	; 0x08
    266e:	89 85       	ldd	r24, Y+9	; 0x09
    2670:	9a 85       	ldd	r25, Y+10	; 0x0a
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	2c f4       	brge	.+10     	; 0x268c <LCD_displayCharacter+0x344>
		__ticks = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	3f c0       	rjmp	.+126    	; 0x270a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	3f ef       	ldi	r19, 0xFF	; 255
    2698:	4f e7       	ldi	r20, 0x7F	; 127
    269a:	57 e4       	ldi	r21, 0x47	; 71
    269c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a0:	18 16       	cp	r1, r24
    26a2:	4c f5       	brge	.+82     	; 0x26f6 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <LCD_displayCharacter+0x3a4>
    26ce:	88 ec       	ldi	r24, 0xC8	; 200
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9c 83       	std	Y+4, r25	; 0x04
    26d4:	8b 83       	std	Y+3, r24	; 0x03
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <LCD_displayCharacter+0x392>
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9e 83       	std	Y+6, r25	; 0x06
    26ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f7       	brne	.-38     	; 0x26ce <LCD_displayCharacter+0x386>
    26f4:	14 c0       	rjmp	.+40     	; 0x271e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f6:	6f 81       	ldd	r22, Y+7	; 0x07
    26f8:	78 85       	ldd	r23, Y+8	; 0x08
    26fa:	89 85       	ldd	r24, Y+9	; 0x09
    26fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9e 83       	std	Y+6, r25	; 0x06
    2708:	8d 83       	std	Y+5, r24	; 0x05
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	9e 81       	ldd	r25, Y+6	; 0x06
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_displayCharacter+0x3ce>
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    271e:	e9 96       	adiw	r28, 0x39	; 57
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <LCD_displayString+0x6>
    2736:	0f 92       	push	r0
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9b 83       	std	Y+3, r25	; 0x03
    273e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2740:	19 82       	std	Y+1, r1	; 0x01
    2742:	0e c0       	rjmp	.+28     	; 0x2760 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	fc 01       	movw	r30, r24
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	80 81       	ld	r24, Z
    2756:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_displayCharacter>
		i++;
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	fc 01       	movw	r30, r24
    276c:	e2 0f       	add	r30, r18
    276e:	f3 1f       	adc	r31, r19
    2770:	80 81       	ld	r24, Z
    2772:	88 23       	and	r24, r24
    2774:	39 f7       	brne	.-50     	; 0x2744 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	00 d0       	rcall	.+0      	; 0x2788 <LCD_moveCursor+0x6>
    2788:	00 d0       	rcall	.+0      	; 0x278a <LCD_moveCursor+0x8>
    278a:	0f 92       	push	r0
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	8a 83       	std	Y+2, r24	; 0x02
    2792:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	3d 83       	std	Y+5, r19	; 0x05
    279c:	2c 83       	std	Y+4, r18	; 0x04
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	9d 81       	ldd	r25, Y+5	; 0x05
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	91 05       	cpc	r25, r1
    27a6:	c1 f0       	breq	.+48     	; 0x27d8 <LCD_moveCursor+0x56>
    27a8:	2c 81       	ldd	r18, Y+4	; 0x04
    27aa:	3d 81       	ldd	r19, Y+5	; 0x05
    27ac:	22 30       	cpi	r18, 0x02	; 2
    27ae:	31 05       	cpc	r19, r1
    27b0:	2c f4       	brge	.+10     	; 0x27bc <LCD_moveCursor+0x3a>
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	9d 81       	ldd	r25, Y+5	; 0x05
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	61 f0       	breq	.+24     	; 0x27d2 <LCD_moveCursor+0x50>
    27ba:	19 c0       	rjmp	.+50     	; 0x27ee <LCD_moveCursor+0x6c>
    27bc:	2c 81       	ldd	r18, Y+4	; 0x04
    27be:	3d 81       	ldd	r19, Y+5	; 0x05
    27c0:	22 30       	cpi	r18, 0x02	; 2
    27c2:	31 05       	cpc	r19, r1
    27c4:	69 f0       	breq	.+26     	; 0x27e0 <LCD_moveCursor+0x5e>
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ca:	83 30       	cpi	r24, 0x03	; 3
    27cc:	91 05       	cpc	r25, r1
    27ce:	61 f0       	breq	.+24     	; 0x27e8 <LCD_moveCursor+0x66>
    27d0:	0e c0       	rjmp	.+28     	; 0x27ee <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	0b c0       	rjmp	.+22     	; 0x27ee <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	80 5c       	subi	r24, 0xC0	; 192
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	07 c0       	rjmp	.+14     	; 0x27ee <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	80 5f       	subi	r24, 0xF0	; 240
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	80 5b       	subi	r24, 0xB0	; 176
    27ec:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	80 68       	ori	r24, 0x80	; 128
    27f2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_sendCommand>
}
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	00 d0       	rcall	.+0      	; 0x280c <LCD_displayStringRowColumn+0x6>
    280c:	00 d0       	rcall	.+0      	; 0x280e <LCD_displayStringRowColumn+0x8>
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	6a 83       	std	Y+2, r22	; 0x02
    2816:	5c 83       	std	Y+4, r21	; 0x04
    2818:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	6a 81       	ldd	r22, Y+2	; 0x02
    281e:	0e 94 c1 13 	call	0x2782	; 0x2782 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayString>
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	62 97       	sbiw	r28, 0x12	; 18
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	9a 8b       	std	Y+18, r25	; 0x12
    284e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2850:	89 89       	ldd	r24, Y+17	; 0x11
    2852:	9a 89       	ldd	r25, Y+18	; 0x12
    2854:	9e 01       	movw	r18, r28
    2856:	2f 5f       	subi	r18, 0xFF	; 255
    2858:	3f 4f       	sbci	r19, 0xFF	; 255
    285a:	b9 01       	movw	r22, r18
    285c:	4a e0       	ldi	r20, 0x0A	; 10
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <itoa>
   LCD_displayString(buff); /* Display the string */
    2864:	ce 01       	movw	r24, r28
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayString>
}
    286c:	62 96       	adiw	r28, 0x12	; 18
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_sendCommand>
}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <PWM_Timer0_Start>:
 * 			    through timer0
 * Arguments : Char of 1 byte
 * Return type : void
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	0f 92       	push	r0
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    289e:	e2 e5       	ldi	r30, 0x52	; 82
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	10 82       	st	Z, r1

	OCR0  = (duty_cycle);  // Set Compare Value
    28a4:	ec e5       	ldi	r30, 0x5C	; 92
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	80 83       	st	Z, r24

	SET_BIT(PORTB,PIN3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    28ac:	a8 e3       	ldi	r26, 0x38	; 56
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e8 e3       	ldi	r30, 0x38	; 56
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	88 60       	ori	r24, 0x08	; 8
    28b8:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    28ba:	e3 e5       	ldi	r30, 0x53	; 83
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	8a e6       	ldi	r24, 0x6A	; 106
    28c0:	80 83       	st	Z, r24
}
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
#if (TIMERNUMBER  == 0)
ISR(TIMER0_OVF_vect)
{
    28ca:	1f 92       	push	r1
    28cc:	0f 92       	push	r0
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	0f 92       	push	r0
    28d2:	11 24       	eor	r1, r1
    28d4:	2f 93       	push	r18
    28d6:	3f 93       	push	r19
    28d8:	4f 93       	push	r20
    28da:	5f 93       	push	r21
    28dc:	6f 93       	push	r22
    28de:	7f 93       	push	r23
    28e0:	8f 93       	push	r24
    28e2:	9f 93       	push	r25
    28e4:	af 93       	push	r26
    28e6:	bf 93       	push	r27
    28e8:	ef 93       	push	r30
    28ea:	ff 93       	push	r31
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimerPtr != NULL_PTR)
    28f4:	80 91 76 01 	lds	r24, 0x0176
    28f8:	90 91 77 01 	lds	r25, 0x0177
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	29 f0       	breq	.+10     	; 0x290a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_callBackTimerPtr)();
    2900:	e0 91 76 01 	lds	r30, 0x0176
    2904:	f0 91 77 01 	lds	r31, 0x0177
    2908:	09 95       	icall
	}
}
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	ff 91       	pop	r31
    2910:	ef 91       	pop	r30
    2912:	bf 91       	pop	r27
    2914:	af 91       	pop	r26
    2916:	9f 91       	pop	r25
    2918:	8f 91       	pop	r24
    291a:	7f 91       	pop	r23
    291c:	6f 91       	pop	r22
    291e:	5f 91       	pop	r21
    2920:	4f 91       	pop	r20
    2922:	3f 91       	pop	r19
    2924:	2f 91       	pop	r18
    2926:	0f 90       	pop	r0
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	0f 90       	pop	r0
    292c:	1f 90       	pop	r1
    292e:	18 95       	reti

00002930 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2930:	1f 92       	push	r1
    2932:	0f 92       	push	r0
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	0f 92       	push	r0
    2938:	11 24       	eor	r1, r1
    293a:	2f 93       	push	r18
    293c:	3f 93       	push	r19
    293e:	4f 93       	push	r20
    2940:	5f 93       	push	r21
    2942:	6f 93       	push	r22
    2944:	7f 93       	push	r23
    2946:	8f 93       	push	r24
    2948:	9f 93       	push	r25
    294a:	af 93       	push	r26
    294c:	bf 93       	push	r27
    294e:	ef 93       	push	r30
    2950:	ff 93       	push	r31
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimerPtr != NULL_PTR)
    295a:	80 91 76 01 	lds	r24, 0x0176
    295e:	90 91 77 01 	lds	r25, 0x0177
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	29 f0       	breq	.+10     	; 0x2970 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_callBackTimerPtr)();
    2966:	e0 91 76 01 	lds	r30, 0x0176
    296a:	f0 91 77 01 	lds	r31, 0x0177
    296e:	09 95       	icall
	}
}
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	ff 91       	pop	r31
    2976:	ef 91       	pop	r30
    2978:	bf 91       	pop	r27
    297a:	af 91       	pop	r26
    297c:	9f 91       	pop	r25
    297e:	8f 91       	pop	r24
    2980:	7f 91       	pop	r23
    2982:	6f 91       	pop	r22
    2984:	5f 91       	pop	r21
    2986:	4f 91       	pop	r20
    2988:	3f 91       	pop	r19
    298a:	2f 91       	pop	r18
    298c:	0f 90       	pop	r0
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	0f 90       	pop	r0
    2992:	1f 90       	pop	r1
    2994:	18 95       	reti

00002996 <TIMER_init>:
 * Arguments  : &TIMER_ConfigType
 * Return Type: void
 */
#if TIMERNUMBER  == 0
void TIMER_init(const TIMER_Config * TIMER_ConfigType)
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	00 d0       	rcall	.+0      	; 0x299c <TIMER_init+0x6>
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	89 83       	std	Y+1, r24	; 0x01
//	SREG &= ~(1<<7); /*Disable I-bit at the beginning*/

	/*FOC0=1:Non_PWM mode always
	 * and setting all other bits zero
	 */
	TCCR0 = (1<<FOC0);
    29a4:	e3 e5       	ldi	r30, 0x53	; 83
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 e8       	ldi	r24, 0x80	; 128
    29aa:	80 83       	st	Z, r24
	if (TIMER_ConfigType->TIMER_MODE == 1)  /*compare mode*/
    29ac:	e9 81       	ldd	r30, Y+1	; 0x01
    29ae:	fa 81       	ldd	r31, Y+2	; 0x02
    29b0:	81 81       	ldd	r24, Z+1	; 0x01
    29b2:	81 30       	cpi	r24, 0x01	; 1
    29b4:	21 f5       	brne	.+72     	; 0x29fe <TIMER_init+0x68>
	{
		/*WGM00=0: for compare mode
		 *COM01:0=0: No need for OC0*/
		TCCR0 |= (1<WGM01);
    29b6:	a3 e5       	ldi	r26, 0x53	; 83
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e3 e5       	ldi	r30, 0x53	; 83
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	81 60       	ori	r24, 0x01	; 1
    29c2:	8c 93       	st	X, r24
		/*Setting the compare value by config*/
		OCR0 = TIMER_ConfigType->compareValue;
    29c4:	ac e5       	ldi	r26, 0x5C	; 92
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ca:	fa 81       	ldd	r31, Y+2	; 0x02
    29cc:	83 81       	ldd	r24, Z+3	; 0x03
    29ce:	8c 93       	st	X, r24
		/*setting the reset value*/
		TCNT0 = TIMER_ConfigType->initialValue;
    29d0:	a2 e5       	ldi	r26, 0x52	; 82
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e9 81       	ldd	r30, Y+1	; 0x01
    29d6:	fa 81       	ldd	r31, Y+2	; 0x02
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	8c 93       	st	X, r24

		/*Masking the first 3 bits of TCCR0 to insert the Clock freq*/
		TCCR0 = (TCCR0 & 0xF8) | (TIMER_ConfigType->CLOCK_FREQ); /*Put the prescalar in the first 3-bits*/
    29dc:	a3 e5       	ldi	r26, 0x53	; 83
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e3 e5       	ldi	r30, 0x53	; 83
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	98 2f       	mov	r25, r24
    29e8:	98 7f       	andi	r25, 0xF8	; 248
    29ea:	e9 81       	ldd	r30, Y+1	; 0x01
    29ec:	fa 81       	ldd	r31, Y+2	; 0x02
    29ee:	80 81       	ld	r24, Z
    29f0:	89 2b       	or	r24, r25
    29f2:	8c 93       	st	X, r24
		TIMSK = (1<<OCIE0); /*OCIE0=1: Enable output compare match interrupt*/
    29f4:	e9 e5       	ldi	r30, 0x59	; 89
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	82 e0       	ldi	r24, 0x02	; 2
    29fa:	80 83       	st	Z, r24
    29fc:	04 c0       	rjmp	.+8      	; 0x2a06 <TIMER_init+0x70>
	}
	else
	{
		TIMSK = (1<<TOIE0); /*TOIE0=1: Enable overflow interrupt*/
    29fe:	e9 e5       	ldi	r30, 0x59	; 89
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	80 83       	st	Z, r24
	}

	SREG |= (1<<7); /*Enable I-bit*/
    2a06:	af e5       	ldi	r26, 0x5F	; 95
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ef e5       	ldi	r30, 0x5F	; 95
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	80 68       	ori	r24, 0x80	; 128
    2a12:	8c 93       	st	X, r24
}
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <Timer_setCallBack>:
 * Description:Function to call back function in app layer
 * Arguments  : void(*aTimer_ptr)(void)
 * Return Type: void
 */
void Timer_setCallBack( void(*aTimer_ptr)(void))
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <Timer_setCallBack+0x6>
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackTimerPtr = aTimer_ptr;
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	90 93 77 01 	sts	0x0177, r25
    2a34:	80 93 76 01 	sts	0x0176, r24
}
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <Timer_DeInit>:
 * Description: Function to disable the Timer1
 * Arguments  : void
 * Return Type: void
 */
void Timer_DeInit(void)
{
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2a4a:	ef e4       	ldi	r30, 0x4F	; 79
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	10 82       	st	Z, r1
	TCCR1B = 0;
    2a50:	ee e4       	ldi	r30, 0x4E	; 78
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	10 82       	st	Z, r1
	TCNT1 = 0;
    2a56:	ec e4       	ldi	r30, 0x4C	; 76
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	11 82       	std	Z+1, r1	; 0x01
    2a5c:	10 82       	st	Z, r1
	OCR1A = 0 ;
    2a5e:	ea e4       	ldi	r30, 0x4A	; 74
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	11 82       	std	Z+1, r1	; 0x01
    2a64:	10 82       	st	Z, r1
	OCR1B = 0 ;
    2a66:	e8 e4       	ldi	r30, 0x48	; 72
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	11 82       	std	Z+1, r1	; 0x01
    2a6c:	10 82       	st	Z, r1


}
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <TWI_init>:
 * Function that initialize the I2C
 * According the required prescaler, devision factor and slave address,
 * the registers are initialized
 */
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <TWI_init+0x6>
    2a7a:	0f 92       	push	r0
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01
	/*In order to configure the frequency, get TWBR
	 *Put the whole bits of TWSR zeros except the first 2 bits take them from the structure
	 */
	TWBR = Config_Ptr->s_devision_factor;
    2a84:	a0 e2       	ldi	r26, 0x20	; 32
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8c:	81 81       	ldd	r24, Z+1	; 0x01
    2a8e:	8c 93       	st	X, r24
	TWSR = (TWSR & 0xFC) | (Config_Ptr->prescaler);
    2a90:	a1 e2       	ldi	r26, 0x21	; 33
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e1 e2       	ldi	r30, 0x21	; 33
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	98 2f       	mov	r25, r24
    2a9c:	9c 7f       	andi	r25, 0xFC	; 252
    2a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa2:	80 81       	ld	r24, Z
    2aa4:	89 2b       	or	r24, r25
    2aa6:	8c 93       	st	X, r24

	/*Get the address from the structure, but before putting it in the register, shift it 1 bit
	 * as the General Call Recognition is disabled
	 */
	TWAR = (TWAR & 0x00) | ((Config_Ptr->s_slave_address)<<1);
    2aa8:	e2 e2       	ldi	r30, 0x22	; 34
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	a2 e2       	ldi	r26, 0x22	; 34
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	8c 93       	st	X, r24
	TWCR = (1<<TWEN); /*Enable TWI*/
    2ac2:	e6 e5       	ldi	r30, 0x56	; 86
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	84 e0       	ldi	r24, 0x04	; 4
    2ac8:	80 83       	st	Z, r24
}
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <TWI_start>:


void TWI_start(void)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2ade:	e6 e5       	ldi	r30, 0x56	; 86
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	84 ea       	ldi	r24, 0xA4	; 164
    2ae4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2ae6:	e6 e5       	ldi	r30, 0x56	; 86
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	88 23       	and	r24, r24
    2aee:	dc f7       	brge	.-10     	; 0x2ae6 <TWI_start+0x10>
}
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <TWI_stop>:

void TWI_stop(void)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2afe:	e6 e5       	ldi	r30, 0x56	; 86
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	84 e9       	ldi	r24, 0x94	; 148
    2b04:	80 83       	st	Z, r24
}
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	0f 92       	push	r0
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2b18:	e3 e2       	ldi	r30, 0x23	; 35
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2b20:	e6 e5       	ldi	r30, 0x56	; 86
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	84 e8       	ldi	r24, 0x84	; 132
    2b26:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b28:	e6 e5       	ldi	r30, 0x56	; 86
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	88 23       	and	r24, r24
    2b30:	dc f7       	brge	.-10     	; 0x2b28 <TWI_writeByte+0x1c>
}
    2b32:	0f 90       	pop	r0
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2b42:	e6 e5       	ldi	r30, 0x56	; 86
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	84 ec       	ldi	r24, 0xC4	; 196
    2b48:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b4a:	e6 e5       	ldi	r30, 0x56	; 86
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	88 23       	and	r24, r24
    2b52:	dc f7       	brge	.-10     	; 0x2b4a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2b54:	e3 e2       	ldi	r30, 0x23	; 35
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
}
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2b68:	e6 e5       	ldi	r30, 0x56	; 86
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	84 e8       	ldi	r24, 0x84	; 132
    2b6e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b70:	e6 e5       	ldi	r30, 0x56	; 86
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	88 23       	and	r24, r24
    2b78:	dc f7       	brge	.-10     	; 0x2b70 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2b7a:	e3 e2       	ldi	r30, 0x23	; 35
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
}
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	0f 92       	push	r0
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2b90:	e1 e2       	ldi	r30, 0x21	; 33
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	88 7f       	andi	r24, 0xF8	; 248
    2b98:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_Config * UART_ConfigType)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <UART_init+0x6>
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <UART_init+0x8>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    2bb4:	1a 82       	std	Y+2, r1	; 0x02
    2bb6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2bb8:	eb e2       	ldi	r30, 0x2B	; 43
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
    2bbe:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE) ;
    2bc0:	ea e2       	ldi	r30, 0x2A	; 42
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	88 e9       	ldi	r24, 0x98	; 152
    2bc6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ((UART_ConfigType->dataBits)<<UCSZ0)| ((UART_ConfigType->stopBit)<<USBS) | ((UART_ConfigType->parityMode)<<UPM0);
    2bc8:	a0 e4       	ldi	r26, 0x40	; 64
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2bce:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd0:	80 81       	ld	r24, Z
    2bd2:	88 2f       	mov	r24, r24
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	28 2f       	mov	r18, r24
    2bdc:	20 68       	ori	r18, 0x80	; 128
    2bde:	eb 81       	ldd	r30, Y+3	; 0x03
    2be0:	fc 81       	ldd	r31, Y+4	; 0x04
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	88 2f       	mov	r24, r24
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	28 2b       	or	r18, r24
    2bf6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bfa:	81 81       	ldd	r24, Z+1	; 0x01
    2bfc:	88 2f       	mov	r24, r24
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	82 95       	swap	r24
    2c02:	92 95       	swap	r25
    2c04:	90 7f       	andi	r25, 0xF0	; 240
    2c06:	98 27       	eor	r25, r24
    2c08:	80 7f       	andi	r24, 0xF0	; 240
    2c0a:	98 27       	eor	r25, r24
    2c0c:	82 2b       	or	r24, r18
    2c0e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UART_ConfigType->baurdRate * 8UL))) - 1);
    2c10:	eb 81       	ldd	r30, Y+3	; 0x03
    2c12:	fc 81       	ldd	r31, Y+4	; 0x04
    2c14:	83 81       	ldd	r24, Z+3	; 0x03
    2c16:	94 81       	ldd	r25, Z+4	; 0x04
    2c18:	a5 81       	ldd	r26, Z+5	; 0x05
    2c1a:	b6 81       	ldd	r27, Z+6	; 0x06
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	aa 1f       	adc	r26, r26
    2c22:	bb 1f       	adc	r27, r27
    2c24:	88 0f       	add	r24, r24
    2c26:	99 1f       	adc	r25, r25
    2c28:	aa 1f       	adc	r26, r26
    2c2a:	bb 1f       	adc	r27, r27
    2c2c:	88 0f       	add	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	aa 1f       	adc	r26, r26
    2c32:	bb 1f       	adc	r27, r27
    2c34:	9c 01       	movw	r18, r24
    2c36:	ad 01       	movw	r20, r26
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	92 e1       	ldi	r25, 0x12	; 18
    2c3c:	aa e7       	ldi	r26, 0x7A	; 122
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__udivmodsi4>
    2c48:	da 01       	movw	r26, r20
    2c4a:	c9 01       	movw	r24, r18
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c52:	e0 e4       	ldi	r30, 0x40	; 64
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	89 2f       	mov	r24, r25
    2c5c:	99 27       	eor	r25, r25
    2c5e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2c60:	e9 e2       	ldi	r30, 0x29	; 41
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	80 83       	st	Z, r24
}
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	0f 92       	push	r0
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c82:	eb e2       	ldi	r30, 0x2B	; 43
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	80 72       	andi	r24, 0x20	; 32
    2c8e:	90 70       	andi	r25, 0x00	; 0
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	b9 f3       	breq	.-18     	; 0x2c82 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c94:	ec e2       	ldi	r30, 0x2C	; 44
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c9c:	0f 90       	pop	r0
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret

00002ca4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cac:	eb e2       	ldi	r30, 0x2B	; 43
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	88 23       	and	r24, r24
    2cb4:	dc f7       	brge	.-10     	; 0x2cac <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2cb6:	ec e2       	ldi	r30, 0x2C	; 44
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
}
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <UART_sendString+0x6>
    2cc8:	0f 92       	push	r0
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	9b 83       	std	Y+3, r25	; 0x03
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cd2:	19 82       	std	Y+1, r1	; 0x01
    2cd4:	0e c0       	rjmp	.+28     	; 0x2cf2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e2 0f       	add	r30, r18
    2ce4:	f3 1f       	adc	r31, r19
    2ce6:	80 81       	ld	r24, Z
    2ce8:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <UART_sendByte>
		i++;
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	8f 5f       	subi	r24, 0xFF	; 255
    2cf0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	e2 0f       	add	r30, r18
    2d00:	f3 1f       	adc	r31, r19
    2d02:	80 81       	ld	r24, Z
    2d04:	88 23       	and	r24, r24
    2d06:	39 f7       	brne	.-50     	; 0x2cd6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <UART_receiveString+0xa>
    2d1e:	0f 92       	push	r0
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	9b 83       	std	Y+3, r25	; 0x03
    2d26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d28:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	28 2f       	mov	r18, r24
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	9b 81       	ldd	r25, Y+3	; 0x03
    2d34:	8c 01       	movw	r16, r24
    2d36:	02 0f       	add	r16, r18
    2d38:	13 1f       	adc	r17, r19
    2d3a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    2d3e:	f8 01       	movw	r30, r16
    2d40:	80 83       	st	Z, r24
    2d42:	0f c0       	rjmp	.+30     	; 0x2d62 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	8f 5f       	subi	r24, 0xFF	; 255
    2d48:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	9b 81       	ldd	r25, Y+3	; 0x03
    2d54:	8c 01       	movw	r16, r24
    2d56:	02 0f       	add	r16, r18
    2d58:	13 1f       	adc	r17, r19
    2d5a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <UART_recieveByte>
    2d5e:	f8 01       	movw	r30, r16
    2d60:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	28 2f       	mov	r18, r24
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	e2 0f       	add	r30, r18
    2d70:	f3 1f       	adc	r31, r19
    2d72:	80 81       	ld	r24, Z
    2d74:	83 32       	cpi	r24, 0x23	; 35
    2d76:	31 f7       	brne	.-52     	; 0x2d44 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	28 2f       	mov	r18, r24
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	9b 81       	ldd	r25, Y+3	; 0x03
    2d82:	fc 01       	movw	r30, r24
    2d84:	e2 0f       	add	r30, r18
    2d86:	f3 1f       	adc	r31, r19
    2d88:	10 82       	st	Z, r1
}
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	08 95       	ret

00002d9a <__udivmodsi4>:
    2d9a:	a1 e2       	ldi	r26, 0x21	; 33
    2d9c:	1a 2e       	mov	r1, r26
    2d9e:	aa 1b       	sub	r26, r26
    2da0:	bb 1b       	sub	r27, r27
    2da2:	fd 01       	movw	r30, r26
    2da4:	0d c0       	rjmp	.+26     	; 0x2dc0 <__udivmodsi4_ep>

00002da6 <__udivmodsi4_loop>:
    2da6:	aa 1f       	adc	r26, r26
    2da8:	bb 1f       	adc	r27, r27
    2daa:	ee 1f       	adc	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	a2 17       	cp	r26, r18
    2db0:	b3 07       	cpc	r27, r19
    2db2:	e4 07       	cpc	r30, r20
    2db4:	f5 07       	cpc	r31, r21
    2db6:	20 f0       	brcs	.+8      	; 0x2dc0 <__udivmodsi4_ep>
    2db8:	a2 1b       	sub	r26, r18
    2dba:	b3 0b       	sbc	r27, r19
    2dbc:	e4 0b       	sbc	r30, r20
    2dbe:	f5 0b       	sbc	r31, r21

00002dc0 <__udivmodsi4_ep>:
    2dc0:	66 1f       	adc	r22, r22
    2dc2:	77 1f       	adc	r23, r23
    2dc4:	88 1f       	adc	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	1a 94       	dec	r1
    2dca:	69 f7       	brne	.-38     	; 0x2da6 <__udivmodsi4_loop>
    2dcc:	60 95       	com	r22
    2dce:	70 95       	com	r23
    2dd0:	80 95       	com	r24
    2dd2:	90 95       	com	r25
    2dd4:	9b 01       	movw	r18, r22
    2dd6:	ac 01       	movw	r20, r24
    2dd8:	bd 01       	movw	r22, r26
    2dda:	cf 01       	movw	r24, r30
    2ddc:	08 95       	ret

00002dde <__prologue_saves__>:
    2dde:	2f 92       	push	r2
    2de0:	3f 92       	push	r3
    2de2:	4f 92       	push	r4
    2de4:	5f 92       	push	r5
    2de6:	6f 92       	push	r6
    2de8:	7f 92       	push	r7
    2dea:	8f 92       	push	r8
    2dec:	9f 92       	push	r9
    2dee:	af 92       	push	r10
    2df0:	bf 92       	push	r11
    2df2:	cf 92       	push	r12
    2df4:	df 92       	push	r13
    2df6:	ef 92       	push	r14
    2df8:	ff 92       	push	r15
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	ca 1b       	sub	r28, r26
    2e08:	db 0b       	sbc	r29, r27
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	09 94       	ijmp

00002e16 <__epilogue_restores__>:
    2e16:	2a 88       	ldd	r2, Y+18	; 0x12
    2e18:	39 88       	ldd	r3, Y+17	; 0x11
    2e1a:	48 88       	ldd	r4, Y+16	; 0x10
    2e1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e20:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e22:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e24:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e26:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e28:	b9 84       	ldd	r11, Y+9	; 0x09
    2e2a:	c8 84       	ldd	r12, Y+8	; 0x08
    2e2c:	df 80       	ldd	r13, Y+7	; 0x07
    2e2e:	ee 80       	ldd	r14, Y+6	; 0x06
    2e30:	fd 80       	ldd	r15, Y+5	; 0x05
    2e32:	0c 81       	ldd	r16, Y+4	; 0x04
    2e34:	1b 81       	ldd	r17, Y+3	; 0x03
    2e36:	aa 81       	ldd	r26, Y+2	; 0x02
    2e38:	b9 81       	ldd	r27, Y+1	; 0x01
    2e3a:	ce 0f       	add	r28, r30
    2e3c:	d1 1d       	adc	r29, r1
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	ed 01       	movw	r28, r26
    2e4a:	08 95       	ret

00002e4c <itoa>:
    2e4c:	fb 01       	movw	r30, r22
    2e4e:	9f 01       	movw	r18, r30
    2e50:	e8 94       	clt
    2e52:	42 30       	cpi	r20, 0x02	; 2
    2e54:	c4 f0       	brlt	.+48     	; 0x2e86 <itoa+0x3a>
    2e56:	45 32       	cpi	r20, 0x25	; 37
    2e58:	b4 f4       	brge	.+44     	; 0x2e86 <itoa+0x3a>
    2e5a:	4a 30       	cpi	r20, 0x0A	; 10
    2e5c:	29 f4       	brne	.+10     	; 0x2e68 <itoa+0x1c>
    2e5e:	97 fb       	bst	r25, 7
    2e60:	1e f4       	brtc	.+6      	; 0x2e68 <itoa+0x1c>
    2e62:	90 95       	com	r25
    2e64:	81 95       	neg	r24
    2e66:	9f 4f       	sbci	r25, 0xFF	; 255
    2e68:	64 2f       	mov	r22, r20
    2e6a:	77 27       	eor	r23, r23
    2e6c:	0e 94 57 17 	call	0x2eae	; 0x2eae <__udivmodhi4>
    2e70:	80 5d       	subi	r24, 0xD0	; 208
    2e72:	8a 33       	cpi	r24, 0x3A	; 58
    2e74:	0c f0       	brlt	.+2      	; 0x2e78 <itoa+0x2c>
    2e76:	89 5d       	subi	r24, 0xD9	; 217
    2e78:	81 93       	st	Z+, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	a1 f7       	brne	.-24     	; 0x2e68 <itoa+0x1c>
    2e80:	16 f4       	brtc	.+4      	; 0x2e86 <itoa+0x3a>
    2e82:	5d e2       	ldi	r21, 0x2D	; 45
    2e84:	51 93       	st	Z+, r21
    2e86:	10 82       	st	Z, r1
    2e88:	c9 01       	movw	r24, r18
    2e8a:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <strrev>

00002e8e <strrev>:
    2e8e:	dc 01       	movw	r26, r24
    2e90:	fc 01       	movw	r30, r24
    2e92:	67 2f       	mov	r22, r23
    2e94:	71 91       	ld	r23, Z+
    2e96:	77 23       	and	r23, r23
    2e98:	e1 f7       	brne	.-8      	; 0x2e92 <strrev+0x4>
    2e9a:	32 97       	sbiw	r30, 0x02	; 2
    2e9c:	04 c0       	rjmp	.+8      	; 0x2ea6 <strrev+0x18>
    2e9e:	7c 91       	ld	r23, X
    2ea0:	6d 93       	st	X+, r22
    2ea2:	70 83       	st	Z, r23
    2ea4:	62 91       	ld	r22, -Z
    2ea6:	ae 17       	cp	r26, r30
    2ea8:	bf 07       	cpc	r27, r31
    2eaa:	c8 f3       	brcs	.-14     	; 0x2e9e <strrev+0x10>
    2eac:	08 95       	ret

00002eae <__udivmodhi4>:
    2eae:	aa 1b       	sub	r26, r26
    2eb0:	bb 1b       	sub	r27, r27
    2eb2:	51 e1       	ldi	r21, 0x11	; 17
    2eb4:	07 c0       	rjmp	.+14     	; 0x2ec4 <__udivmodhi4_ep>

00002eb6 <__udivmodhi4_loop>:
    2eb6:	aa 1f       	adc	r26, r26
    2eb8:	bb 1f       	adc	r27, r27
    2eba:	a6 17       	cp	r26, r22
    2ebc:	b7 07       	cpc	r27, r23
    2ebe:	10 f0       	brcs	.+4      	; 0x2ec4 <__udivmodhi4_ep>
    2ec0:	a6 1b       	sub	r26, r22
    2ec2:	b7 0b       	sbc	r27, r23

00002ec4 <__udivmodhi4_ep>:
    2ec4:	88 1f       	adc	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	5a 95       	dec	r21
    2eca:	a9 f7       	brne	.-22     	; 0x2eb6 <__udivmodhi4_loop>
    2ecc:	80 95       	com	r24
    2ece:	90 95       	com	r25
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	08 95       	ret

00002ed6 <_exit>:
    2ed6:	f8 94       	cli

00002ed8 <__stop_program>:
    2ed8:	ff cf       	rjmp	.-2      	; 0x2ed8 <__stop_program>
