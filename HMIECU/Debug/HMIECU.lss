
HMIECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  000031c2  00003256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080012e  0080012e  00003324  2**0
                  ALLOC
  3 .stab         00003180  00000000  00000000  00003324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014c0  00000000  00000000  000064a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000985d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 0c 	call	0x1946	; 0x1946 <main>
      8a:	0c 94 df 18 	jmp	0x31be	; 0x31be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e1       	ldi	r26, 0x1E	; 30
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP_newPassword>:
uint8 correctPasswordFlag=0;

/*******************************************************************************
 *                            FUNCTIONS DEFINITIONS                            *
 *******************************************************************************/
void APP_newPassword(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	c0 54       	subi	r28, 0x40	; 64
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
	uint8 arrayPass[5],arrayPass2[5];
	uint8 key=0,index=0,index2=0,compareResults=0;
     b5c:	1e aa       	std	Y+54, r1	; 0x36
     b5e:	1d aa       	std	Y+53, r1	; 0x35
     b60:	1c aa       	std	Y+52, r1	; 0x34
     b62:	1b aa       	std	Y+51, r1	; 0x33
	LCD_clearScreen();
     b64:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
	LCD_displayString("Enter New Pass:");
     b68:	80 e6       	ldi	r24, 0x60	; 96
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
	LCD_moveCursor(1, 0);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	0e 94 5e 15 	call	0x2abc	; 0x2abc <LCD_moveCursor>
	for(int i=0; i<PASSWORDLIMIT ; i++){
     b78:	1a aa       	std	Y+50, r1	; 0x32
     b7a:	19 aa       	std	Y+49, r1	; 0x31
     b7c:	8a c0       	rjmp	.+276    	; 0xc92 <APP_newPassword+0x14c>
		key = KEYPAD_getPressedKey();
     b7e:	0e 94 32 10 	call	0x2064	; 0x2064 <KEYPAD_getPressedKey>
     b82:	8e ab       	std	Y+54, r24	; 0x36
		LCD_displayCharacter('*');
     b84:	8a e2       	ldi	r24, 0x2A	; 42
     b86:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_displayCharacter>
		arrayPass[index] = key;
     b8a:	8d a9       	ldd	r24, Y+53	; 0x35
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	ce 01       	movw	r24, r28
     b92:	c7 96       	adiw	r24, 0x37	; 55
     b94:	fc 01       	movw	r30, r24
     b96:	e2 0f       	add	r30, r18
     b98:	f3 1f       	adc	r31, r19
     b9a:	8e a9       	ldd	r24, Y+54	; 0x36
     b9c:	80 83       	st	Z, r24
		index++;
     b9e:	8d a9       	ldd	r24, Y+53	; 0x35
     ba0:	8f 5f       	subi	r24, 0xFF	; 255
     ba2:	8d ab       	std	Y+53, r24	; 0x35
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	aa ef       	ldi	r26, 0xFA	; 250
     baa:	b3 e4       	ldi	r27, 0x43	; 67
     bac:	8f a3       	std	Y+39, r24	; 0x27
     bae:	98 a7       	std	Y+40, r25	; 0x28
     bb0:	a9 a7       	std	Y+41, r26	; 0x29
     bb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb4:	6f a1       	ldd	r22, Y+39	; 0x27
     bb6:	78 a5       	ldd	r23, Y+40	; 0x28
     bb8:	89 a5       	ldd	r24, Y+41	; 0x29
     bba:	9a a5       	ldd	r25, Y+42	; 0x2a
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	4a ef       	ldi	r20, 0xFA	; 250
     bc2:	54 e4       	ldi	r21, 0x44	; 68
     bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	8b a3       	std	Y+35, r24	; 0x23
     bce:	9c a3       	std	Y+36, r25	; 0x24
     bd0:	ad a3       	std	Y+37, r26	; 0x25
     bd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bd4:	6b a1       	ldd	r22, Y+35	; 0x23
     bd6:	7c a1       	ldd	r23, Y+36	; 0x24
     bd8:	8d a1       	ldd	r24, Y+37	; 0x25
     bda:	9e a1       	ldd	r25, Y+38	; 0x26
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e8       	ldi	r20, 0x80	; 128
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be8:	88 23       	and	r24, r24
     bea:	2c f4       	brge	.+10     	; 0xbf6 <APP_newPassword+0xb0>
		__ticks = 1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9a a3       	std	Y+34, r25	; 0x22
     bf2:	89 a3       	std	Y+33, r24	; 0x21
     bf4:	3f c0       	rjmp	.+126    	; 0xc74 <APP_newPassword+0x12e>
	else if (__tmp > 65535)
     bf6:	6b a1       	ldd	r22, Y+35	; 0x23
     bf8:	7c a1       	ldd	r23, Y+36	; 0x24
     bfa:	8d a1       	ldd	r24, Y+37	; 0x25
     bfc:	9e a1       	ldd	r25, Y+38	; 0x26
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	3f ef       	ldi	r19, 0xFF	; 255
     c02:	4f e7       	ldi	r20, 0x7F	; 127
     c04:	57 e4       	ldi	r21, 0x47	; 71
     c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0a:	18 16       	cp	r1, r24
     c0c:	4c f5       	brge	.+82     	; 0xc60 <APP_newPassword+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0e:	6f a1       	ldd	r22, Y+39	; 0x27
     c10:	78 a5       	ldd	r23, Y+40	; 0x28
     c12:	89 a5       	ldd	r24, Y+41	; 0x29
     c14:	9a a5       	ldd	r25, Y+42	; 0x2a
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e2       	ldi	r20, 0x20	; 32
     c1c:	51 e4       	ldi	r21, 0x41	; 65
     c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	9a a3       	std	Y+34, r25	; 0x22
     c34:	89 a3       	std	Y+33, r24	; 0x21
     c36:	0f c0       	rjmp	.+30     	; 0xc56 <APP_newPassword+0x110>
     c38:	88 ec       	ldi	r24, 0xC8	; 200
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	98 a3       	std	Y+32, r25	; 0x20
     c3e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c40:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c42:	98 a1       	ldd	r25, Y+32	; 0x20
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <APP_newPassword+0xfe>
     c48:	98 a3       	std	Y+32, r25	; 0x20
     c4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4c:	89 a1       	ldd	r24, Y+33	; 0x21
     c4e:	9a a1       	ldd	r25, Y+34	; 0x22
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	9a a3       	std	Y+34, r25	; 0x22
     c54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c56:	89 a1       	ldd	r24, Y+33	; 0x21
     c58:	9a a1       	ldd	r25, Y+34	; 0x22
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	69 f7       	brne	.-38     	; 0xc38 <APP_newPassword+0xf2>
     c5e:	14 c0       	rjmp	.+40     	; 0xc88 <APP_newPassword+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c60:	6b a1       	ldd	r22, Y+35	; 0x23
     c62:	7c a1       	ldd	r23, Y+36	; 0x24
     c64:	8d a1       	ldd	r24, Y+37	; 0x25
     c66:	9e a1       	ldd	r25, Y+38	; 0x26
     c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	9a a3       	std	Y+34, r25	; 0x22
     c72:	89 a3       	std	Y+33, r24	; 0x21
     c74:	89 a1       	ldd	r24, Y+33	; 0x21
     c76:	9a a1       	ldd	r25, Y+34	; 0x22
     c78:	9e 8f       	std	Y+30, r25	; 0x1e
     c7a:	8d 8f       	std	Y+29, r24	; 0x1d
     c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <APP_newPassword+0x13a>
     c84:	9e 8f       	std	Y+30, r25	; 0x1e
     c86:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 arrayPass[5],arrayPass2[5];
	uint8 key=0,index=0,index2=0,compareResults=0;
	LCD_clearScreen();
	LCD_displayString("Enter New Pass:");
	LCD_moveCursor(1, 0);
	for(int i=0; i<PASSWORDLIMIT ; i++){
     c88:	89 a9       	ldd	r24, Y+49	; 0x31
     c8a:	9a a9       	ldd	r25, Y+50	; 0x32
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	9a ab       	std	Y+50, r25	; 0x32
     c90:	89 ab       	std	Y+49, r24	; 0x31
     c92:	89 a9       	ldd	r24, Y+49	; 0x31
     c94:	9a a9       	ldd	r25, Y+50	; 0x32
     c96:	85 30       	cpi	r24, 0x05	; 5
     c98:	91 05       	cpc	r25, r1
     c9a:	0c f4       	brge	.+2      	; 0xc9e <APP_newPassword+0x158>
     c9c:	70 cf       	rjmp	.-288    	; 0xb7e <APP_newPassword+0x38>
		LCD_displayCharacter('*');
		arrayPass[index] = key;
		index++;
		_delay_ms(500);
	}
	LCD_clearScreen();
     c9e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
	LCD_displayString("ReEnter new Pass:");
     ca2:	80 e7       	ldi	r24, 0x70	; 112
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
	LCD_moveCursor(1, 0);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	0e 94 5e 15 	call	0x2abc	; 0x2abc <LCD_moveCursor>
	for(int i=0; i<PASSWORDLIMIT ; i++){
     cb2:	18 aa       	std	Y+48, r1	; 0x30
     cb4:	1f a6       	std	Y+47, r1	; 0x2f
     cb6:	8a c0       	rjmp	.+276    	; 0xdcc <APP_newPassword+0x286>
		key = KEYPAD_getPressedKey();
     cb8:	0e 94 32 10 	call	0x2064	; 0x2064 <KEYPAD_getPressedKey>
     cbc:	8e ab       	std	Y+54, r24	; 0x36
		LCD_displayCharacter('*');
     cbe:	8a e2       	ldi	r24, 0x2A	; 42
     cc0:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_displayCharacter>
		arrayPass2[index2] = key;
     cc4:	8c a9       	ldd	r24, Y+52	; 0x34
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	ce 01       	movw	r24, r28
     ccc:	cc 96       	adiw	r24, 0x3c	; 60
     cce:	fc 01       	movw	r30, r24
     cd0:	e2 0f       	add	r30, r18
     cd2:	f3 1f       	adc	r31, r19
     cd4:	8e a9       	ldd	r24, Y+54	; 0x36
     cd6:	80 83       	st	Z, r24
		index2++;
     cd8:	8c a9       	ldd	r24, Y+52	; 0x34
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	8c ab       	std	Y+52, r24	; 0x34
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	aa ef       	ldi	r26, 0xFA	; 250
     ce4:	b3 e4       	ldi	r27, 0x43	; 67
     ce6:	89 8f       	std	Y+25, r24	; 0x19
     ce8:	9a 8f       	std	Y+26, r25	; 0x1a
     cea:	ab 8f       	std	Y+27, r26	; 0x1b
     cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cee:	69 8d       	ldd	r22, Y+25	; 0x19
     cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	4a ef       	ldi	r20, 0xFA	; 250
     cfc:	54 e4       	ldi	r21, 0x44	; 68
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	8d 8b       	std	Y+21, r24	; 0x15
     d08:	9e 8b       	std	Y+22, r25	; 0x16
     d0a:	af 8b       	std	Y+23, r26	; 0x17
     d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d0e:	6d 89       	ldd	r22, Y+21	; 0x15
     d10:	7e 89       	ldd	r23, Y+22	; 0x16
     d12:	8f 89       	ldd	r24, Y+23	; 0x17
     d14:	98 8d       	ldd	r25, Y+24	; 0x18
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	5f e3       	ldi	r21, 0x3F	; 63
     d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d22:	88 23       	and	r24, r24
     d24:	2c f4       	brge	.+10     	; 0xd30 <APP_newPassword+0x1ea>
		__ticks = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9c 8b       	std	Y+20, r25	; 0x14
     d2c:	8b 8b       	std	Y+19, r24	; 0x13
     d2e:	3f c0       	rjmp	.+126    	; 0xdae <APP_newPassword+0x268>
	else if (__tmp > 65535)
     d30:	6d 89       	ldd	r22, Y+21	; 0x15
     d32:	7e 89       	ldd	r23, Y+22	; 0x16
     d34:	8f 89       	ldd	r24, Y+23	; 0x17
     d36:	98 8d       	ldd	r25, Y+24	; 0x18
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	3f ef       	ldi	r19, 0xFF	; 255
     d3c:	4f e7       	ldi	r20, 0x7F	; 127
     d3e:	57 e4       	ldi	r21, 0x47	; 71
     d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d44:	18 16       	cp	r1, r24
     d46:	4c f5       	brge	.+82     	; 0xd9a <APP_newPassword+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d48:	69 8d       	ldd	r22, Y+25	; 0x19
     d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	bc 01       	movw	r22, r24
     d62:	cd 01       	movw	r24, r26
     d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	9c 8b       	std	Y+20, r25	; 0x14
     d6e:	8b 8b       	std	Y+19, r24	; 0x13
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <APP_newPassword+0x24a>
     d72:	88 ec       	ldi	r24, 0xC8	; 200
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9a 8b       	std	Y+18, r25	; 0x12
     d78:	89 8b       	std	Y+17, r24	; 0x11
     d7a:	89 89       	ldd	r24, Y+17	; 0x11
     d7c:	9a 89       	ldd	r25, Y+18	; 0x12
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <APP_newPassword+0x238>
     d82:	9a 8b       	std	Y+18, r25	; 0x12
     d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d86:	8b 89       	ldd	r24, Y+19	; 0x13
     d88:	9c 89       	ldd	r25, Y+20	; 0x14
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	9c 8b       	std	Y+20, r25	; 0x14
     d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d90:	8b 89       	ldd	r24, Y+19	; 0x13
     d92:	9c 89       	ldd	r25, Y+20	; 0x14
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	69 f7       	brne	.-38     	; 0xd72 <APP_newPassword+0x22c>
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <APP_newPassword+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9a:	6d 89       	ldd	r22, Y+21	; 0x15
     d9c:	7e 89       	ldd	r23, Y+22	; 0x16
     d9e:	8f 89       	ldd	r24, Y+23	; 0x17
     da0:	98 8d       	ldd	r25, Y+24	; 0x18
     da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	9c 8b       	std	Y+20, r25	; 0x14
     dac:	8b 8b       	std	Y+19, r24	; 0x13
     dae:	8b 89       	ldd	r24, Y+19	; 0x13
     db0:	9c 89       	ldd	r25, Y+20	; 0x14
     db2:	98 8b       	std	Y+16, r25	; 0x10
     db4:	8f 87       	std	Y+15, r24	; 0x0f
     db6:	8f 85       	ldd	r24, Y+15	; 0x0f
     db8:	98 89       	ldd	r25, Y+16	; 0x10
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <APP_newPassword+0x274>
     dbe:	98 8b       	std	Y+16, r25	; 0x10
     dc0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
	}
	LCD_clearScreen();
	LCD_displayString("ReEnter new Pass:");
	LCD_moveCursor(1, 0);
	for(int i=0; i<PASSWORDLIMIT ; i++){
     dc2:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc4:	98 a9       	ldd	r25, Y+48	; 0x30
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	98 ab       	std	Y+48, r25	; 0x30
     dca:	8f a7       	std	Y+47, r24	; 0x2f
     dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
     dce:	98 a9       	ldd	r25, Y+48	; 0x30
     dd0:	85 30       	cpi	r24, 0x05	; 5
     dd2:	91 05       	cpc	r25, r1
     dd4:	0c f4       	brge	.+2      	; 0xdd8 <APP_newPassword+0x292>
     dd6:	70 cf       	rjmp	.-288    	; 0xcb8 <APP_newPassword+0x172>
		arrayPass2[index2] = key;
		index2++;
		_delay_ms(500);
	}

	for(int i=0;i<PASSWORDLIMIT;i++){
     dd8:	1e a6       	std	Y+46, r1	; 0x2e
     dda:	1d a6       	std	Y+45, r1	; 0x2d
     ddc:	1c c0       	rjmp	.+56     	; 0xe16 <APP_newPassword+0x2d0>
		if(arrayPass[i]!=arrayPass2[i]){
     dde:	2d a5       	ldd	r18, Y+45	; 0x2d
     de0:	3e a5       	ldd	r19, Y+46	; 0x2e
     de2:	ce 01       	movw	r24, r28
     de4:	c7 96       	adiw	r24, 0x37	; 55
     de6:	fc 01       	movw	r30, r24
     de8:	e2 0f       	add	r30, r18
     dea:	f3 1f       	adc	r31, r19
     dec:	40 81       	ld	r20, Z
     dee:	2d a5       	ldd	r18, Y+45	; 0x2d
     df0:	3e a5       	ldd	r19, Y+46	; 0x2e
     df2:	ce 01       	movw	r24, r28
     df4:	cc 96       	adiw	r24, 0x3c	; 60
     df6:	fc 01       	movw	r30, r24
     df8:	e2 0f       	add	r30, r18
     dfa:	f3 1f       	adc	r31, r19
     dfc:	80 81       	ld	r24, Z
     dfe:	48 17       	cp	r20, r24
     e00:	21 f0       	breq	.+8      	; 0xe0a <APP_newPassword+0x2c4>
			compareResults++;
     e02:	8b a9       	ldd	r24, Y+51	; 0x33
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	8b ab       	std	Y+51, r24	; 0x33
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <APP_newPassword+0x2c6>
		}
		else
		{
			compareResults=0;
     e0a:	1b aa       	std	Y+51, r1	; 0x33
		arrayPass2[index2] = key;
		index2++;
		_delay_ms(500);
	}

	for(int i=0;i<PASSWORDLIMIT;i++){
     e0c:	8d a5       	ldd	r24, Y+45	; 0x2d
     e0e:	9e a5       	ldd	r25, Y+46	; 0x2e
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9e a7       	std	Y+46, r25	; 0x2e
     e14:	8d a7       	std	Y+45, r24	; 0x2d
     e16:	8d a5       	ldd	r24, Y+45	; 0x2d
     e18:	9e a5       	ldd	r25, Y+46	; 0x2e
     e1a:	85 30       	cpi	r24, 0x05	; 5
     e1c:	91 05       	cpc	r25, r1
     e1e:	fc f2       	brlt	.-66     	; 0xdde <APP_newPassword+0x298>
		{
			compareResults=0;
		}
	}

	if(compareResults==0){
     e20:	8b a9       	ldd	r24, Y+51	; 0x33
     e22:	88 23       	and	r24, r24
     e24:	49 f5       	brne	.+82     	; 0xe78 <APP_newPassword+0x332>
		UART_sendByte(SAVE);
     e26:	81 e7       	ldi	r24, 0x71	; 113
     e28:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>
		for(int i=0;i<PASSWORDLIMIT;i++){
     e2c:	1c a6       	std	Y+44, r1	; 0x2c
     e2e:	1b a6       	std	Y+43, r1	; 0x2b
     e30:	13 c0       	rjmp	.+38     	; 0xe58 <APP_newPassword+0x312>
			while(UART_recieveByte()!= M2_Ready);
     e32:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <UART_recieveByte>
     e36:	87 37       	cpi	r24, 0x77	; 119
     e38:	e1 f7       	brne	.-8      	; 0xe32 <APP_newPassword+0x2ec>
			UART_sendByte(arrayPass[i]);
     e3a:	2b a5       	ldd	r18, Y+43	; 0x2b
     e3c:	3c a5       	ldd	r19, Y+44	; 0x2c
     e3e:	ce 01       	movw	r24, r28
     e40:	c7 96       	adiw	r24, 0x37	; 55
     e42:	fc 01       	movw	r30, r24
     e44:	e2 0f       	add	r30, r18
     e46:	f3 1f       	adc	r31, r19
     e48:	80 81       	ld	r24, Z
     e4a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>
		}
	}

	if(compareResults==0){
		UART_sendByte(SAVE);
		for(int i=0;i<PASSWORDLIMIT;i++){
     e4e:	8b a5       	ldd	r24, Y+43	; 0x2b
     e50:	9c a5       	ldd	r25, Y+44	; 0x2c
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	9c a7       	std	Y+44, r25	; 0x2c
     e56:	8b a7       	std	Y+43, r24	; 0x2b
     e58:	8b a5       	ldd	r24, Y+43	; 0x2b
     e5a:	9c a5       	ldd	r25, Y+44	; 0x2c
     e5c:	85 30       	cpi	r24, 0x05	; 5
     e5e:	91 05       	cpc	r25, r1
     e60:	44 f3       	brlt	.-48     	; 0xe32 <APP_newPassword+0x2ec>
			while(UART_recieveByte()!= M2_Ready);
			UART_sendByte(arrayPass[i]);
		}
		while(UART_recieveByte() != SAVED);
     e62:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <UART_recieveByte>
     e66:	85 36       	cpi	r24, 0x65	; 101
     e68:	e1 f7       	brne	.-8      	; 0xe62 <APP_newPassword+0x31c>
		g_returnMainOptions=0;
     e6a:	10 92 2f 01 	sts	0x012F, r1
		UART_sendByte(g_returnMainOptions);
     e6e:	80 91 2f 01 	lds	r24, 0x012F
     e72:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>
     e76:	7a c0       	rjmp	.+244    	; 0xf6c <APP_newPassword+0x426>
	}
	else {
		LCD_clearScreen();
     e78:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
		LCD_displayString("MissMatch");
     e7c:	82 e8       	ldi	r24, 0x82	; 130
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	aa e7       	ldi	r26, 0x7A	; 122
     e8a:	b4 e4       	ldi	r27, 0x44	; 68
     e8c:	8b 87       	std	Y+11, r24	; 0x0b
     e8e:	9c 87       	std	Y+12, r25	; 0x0c
     e90:	ad 87       	std	Y+13, r26	; 0x0d
     e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e94:	6b 85       	ldd	r22, Y+11	; 0x0b
     e96:	7c 85       	ldd	r23, Y+12	; 0x0c
     e98:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a ef       	ldi	r20, 0xFA	; 250
     ea2:	54 e4       	ldi	r21, 0x44	; 68
     ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8f 83       	std	Y+7, r24	; 0x07
     eae:	98 87       	std	Y+8, r25	; 0x08
     eb0:	a9 87       	std	Y+9, r26	; 0x09
     eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb4:	6f 81       	ldd	r22, Y+7	; 0x07
     eb6:	78 85       	ldd	r23, Y+8	; 0x08
     eb8:	89 85       	ldd	r24, Y+9	; 0x09
     eba:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	5f e3       	ldi	r21, 0x3F	; 63
     ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec8:	88 23       	and	r24, r24
     eca:	2c f4       	brge	.+10     	; 0xed6 <APP_newPassword+0x390>
		__ticks = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	3f c0       	rjmp	.+126    	; 0xf54 <APP_newPassword+0x40e>
	else if (__tmp > 65535)
     ed6:	6f 81       	ldd	r22, Y+7	; 0x07
     ed8:	78 85       	ldd	r23, Y+8	; 0x08
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	3f ef       	ldi	r19, 0xFF	; 255
     ee2:	4f e7       	ldi	r20, 0x7F	; 127
     ee4:	57 e4       	ldi	r21, 0x47	; 71
     ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eea:	18 16       	cp	r1, r24
     eec:	4c f5       	brge	.+82     	; 0xf40 <APP_newPassword+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eee:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e2       	ldi	r20, 0x20	; 32
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9e 83       	std	Y+6, r25	; 0x06
     f14:	8d 83       	std	Y+5, r24	; 0x05
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <APP_newPassword+0x3f0>
     f18:	88 ec       	ldi	r24, 0xC8	; 200
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	8b 83       	std	Y+3, r24	; 0x03
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <APP_newPassword+0x3de>
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f36:	8d 81       	ldd	r24, Y+5	; 0x05
     f38:	9e 81       	ldd	r25, Y+6	; 0x06
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	69 f7       	brne	.-38     	; 0xf18 <APP_newPassword+0x3d2>
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <APP_newPassword+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f40:	6f 81       	ldd	r22, Y+7	; 0x07
     f42:	78 85       	ldd	r23, Y+8	; 0x08
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	9a 85       	ldd	r25, Y+10	; 0x0a
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9e 83       	std	Y+6, r25	; 0x06
     f52:	8d 83       	std	Y+5, r24	; 0x05
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <APP_newPassword+0x41a>
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		APP_newPassword();
     f68:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_newPassword>
	}
}
     f6c:	c0 5c       	subi	r28, 0xC0	; 192
     f6e:	df 4f       	sbci	r29, 0xFF	; 255
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <APP_passwordCheck>:




void APP_passwordCheck(void){
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	c1 55       	subi	r28, 0x51	; 81
     f8e:	d0 40       	sbci	r29, 0x00	; 0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	fe 01       	movw	r30, r28
     f9c:	ed 5b       	subi	r30, 0xBD	; 189
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	aa e7       	ldi	r26, 0x7A	; 122
     fa6:	b4 e4       	ldi	r27, 0x44	; 68
     fa8:	80 83       	st	Z, r24
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	a2 83       	std	Z+2, r26	; 0x02
     fae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb0:	8e 01       	movw	r16, r28
     fb2:	01 5c       	subi	r16, 0xC1	; 193
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	fe 01       	movw	r30, r28
     fb8:	ed 5b       	subi	r30, 0xBD	; 189
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	60 81       	ld	r22, Z
     fbe:	71 81       	ldd	r23, Z+1	; 0x01
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	93 81       	ldd	r25, Z+3	; 0x03
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	4a ef       	ldi	r20, 0xFA	; 250
     fca:	54 e4       	ldi	r21, 0x44	; 68
     fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	f8 01       	movw	r30, r16
     fd6:	80 83       	st	Z, r24
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	a2 83       	std	Z+2, r26	; 0x02
     fdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fde:	fe 01       	movw	r30, r28
     fe0:	ff 96       	adiw	r30, 0x3f	; 63
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	5f e3       	ldi	r21, 0x3F	; 63
     ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff6:	88 23       	and	r24, r24
     ff8:	2c f4       	brge	.+10     	; 0x1004 <APP_passwordCheck+0x84>
		__ticks = 1;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9e af       	std	Y+62, r25	; 0x3e
    1000:	8d af       	std	Y+61, r24	; 0x3d
    1002:	46 c0       	rjmp	.+140    	; 0x1090 <APP_passwordCheck+0x110>
	else if (__tmp > 65535)
    1004:	fe 01       	movw	r30, r28
    1006:	ff 96       	adiw	r30, 0x3f	; 63
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	64 f5       	brge	.+88     	; 0x1078 <APP_passwordCheck+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	fe 01       	movw	r30, r28
    1022:	ed 5b       	subi	r30, 0xBD	; 189
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e2       	ldi	r20, 0x20	; 32
    1034:	51 e4       	ldi	r21, 0x41	; 65
    1036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	bc 01       	movw	r22, r24
    1040:	cd 01       	movw	r24, r26
    1042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9e af       	std	Y+62, r25	; 0x3e
    104c:	8d af       	std	Y+61, r24	; 0x3d
    104e:	0f c0       	rjmp	.+30     	; 0x106e <APP_passwordCheck+0xee>
    1050:	88 ec       	ldi	r24, 0xC8	; 200
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9c af       	std	Y+60, r25	; 0x3c
    1056:	8b af       	std	Y+59, r24	; 0x3b
    1058:	8b ad       	ldd	r24, Y+59	; 0x3b
    105a:	9c ad       	ldd	r25, Y+60	; 0x3c
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <APP_passwordCheck+0xdc>
    1060:	9c af       	std	Y+60, r25	; 0x3c
    1062:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1064:	8d ad       	ldd	r24, Y+61	; 0x3d
    1066:	9e ad       	ldd	r25, Y+62	; 0x3e
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	9e af       	std	Y+62, r25	; 0x3e
    106c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1070:	9e ad       	ldd	r25, Y+62	; 0x3e
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	69 f7       	brne	.-38     	; 0x1050 <APP_passwordCheck+0xd0>
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <APP_passwordCheck+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1078:	fe 01       	movw	r30, r28
    107a:	ff 96       	adiw	r30, 0x3f	; 63
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e af       	std	Y+62, r25	; 0x3e
    108e:	8d af       	std	Y+61, r24	; 0x3d
    1090:	8d ad       	ldd	r24, Y+61	; 0x3d
    1092:	9e ad       	ldd	r25, Y+62	; 0x3e
    1094:	9a af       	std	Y+58, r25	; 0x3a
    1096:	89 af       	std	Y+57, r24	; 0x39
    1098:	89 ad       	ldd	r24, Y+57	; 0x39
    109a:	9a ad       	ldd	r25, Y+58	; 0x3a
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <APP_passwordCheck+0x11c>
    10a0:	9a af       	std	Y+58, r25	; 0x3a
    10a2:	89 af       	std	Y+57, r24	; 0x39
	uint8 key;

	/*declaring passwordErrors for detecting Miss Match passwords if not equal 0
	 *declaring wrongEntry for detecting wrong entries numbers for buzzer on decision
	 */
	uint8 passwordErrors =0;
    10a4:	fe 01       	movw	r30, r28
    10a6:	e5 5b       	subi	r30, 0xB5	; 181
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	10 82       	st	Z, r1

	/*configure the screen for enter password*/
	LCD_clearScreen();
    10ac:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    10b0:	8c e8       	ldi	r24, 0x8C	; 140
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
	LCD_moveCursor(1, 0);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	0e 94 5e 15 	call	0x2abc	; 0x2abc <LCD_moveCursor>

	/*getting the password entered by keypad and saving it in arrayPass*/
	for(int i=0;i<PASSWORDLIMIT;i++){
    10c0:	fe 01       	movw	r30, r28
    10c2:	e7 5b       	subi	r30, 0xB7	; 183
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	11 82       	std	Z+1, r1	; 0x01
    10c8:	10 82       	st	Z, r1
    10ca:	9d c0       	rjmp	.+314    	; 0x1206 <APP_passwordCheck+0x286>
		key = KEYPAD_getPressedKey();
    10cc:	0e 94 32 10 	call	0x2064	; 0x2064 <KEYPAD_getPressedKey>
    10d0:	fe 01       	movw	r30, r28
    10d2:	e4 5b       	subi	r30, 0xB4	; 180
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 83       	st	Z, r24

		if(key >= 0 && key <= 9){    /*get in the array integers only*/
    10d8:	fe 01       	movw	r30, r28
    10da:	e4 5b       	subi	r30, 0xB4	; 180
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	8a 30       	cpi	r24, 0x0A	; 10
    10e2:	98 f4       	brcc	.+38     	; 0x110a <APP_passwordCheck+0x18a>
			arrayPass[i] = key;
    10e4:	fe 01       	movw	r30, r28
    10e6:	e7 5b       	subi	r30, 0xB7	; 183
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	20 81       	ld	r18, Z
    10ec:	31 81       	ldd	r19, Z+1	; 0x01
    10ee:	ce 01       	movw	r24, r28
    10f0:	83 5b       	subi	r24, 0xB3	; 179
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	dc 01       	movw	r26, r24
    10f6:	a2 0f       	add	r26, r18
    10f8:	b3 1f       	adc	r27, r19
    10fa:	fe 01       	movw	r30, r28
    10fc:	e4 5b       	subi	r30, 0xB4	; 180
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	80 81       	ld	r24, Z
    1102:	8c 93       	st	X, r24
			LCD_displayCharacter('*');
    1104:	8a e2       	ldi	r24, 0x2A	; 42
    1106:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_displayCharacter>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	aa ef       	ldi	r26, 0xFA	; 250
    1110:	b3 e4       	ldi	r27, 0x43	; 67
    1112:	8d ab       	std	Y+53, r24	; 0x35
    1114:	9e ab       	std	Y+54, r25	; 0x36
    1116:	af ab       	std	Y+55, r26	; 0x37
    1118:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111a:	6d a9       	ldd	r22, Y+53	; 0x35
    111c:	7e a9       	ldd	r23, Y+54	; 0x36
    111e:	8f a9       	ldd	r24, Y+55	; 0x37
    1120:	98 ad       	ldd	r25, Y+56	; 0x38
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	4a ef       	ldi	r20, 0xFA	; 250
    1128:	54 e4       	ldi	r21, 0x44	; 68
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	89 ab       	std	Y+49, r24	; 0x31
    1134:	9a ab       	std	Y+50, r25	; 0x32
    1136:	ab ab       	std	Y+51, r26	; 0x33
    1138:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    113a:	69 a9       	ldd	r22, Y+49	; 0x31
    113c:	7a a9       	ldd	r23, Y+50	; 0x32
    113e:	8b a9       	ldd	r24, Y+51	; 0x33
    1140:	9c a9       	ldd	r25, Y+52	; 0x34
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114e:	88 23       	and	r24, r24
    1150:	2c f4       	brge	.+10     	; 0x115c <APP_passwordCheck+0x1dc>
		__ticks = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	98 ab       	std	Y+48, r25	; 0x30
    1158:	8f a7       	std	Y+47, r24	; 0x2f
    115a:	3f c0       	rjmp	.+126    	; 0x11da <APP_passwordCheck+0x25a>
	else if (__tmp > 65535)
    115c:	69 a9       	ldd	r22, Y+49	; 0x31
    115e:	7a a9       	ldd	r23, Y+50	; 0x32
    1160:	8b a9       	ldd	r24, Y+51	; 0x33
    1162:	9c a9       	ldd	r25, Y+52	; 0x34
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	57 e4       	ldi	r21, 0x47	; 71
    116c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1170:	18 16       	cp	r1, r24
    1172:	4c f5       	brge	.+82     	; 0x11c6 <APP_passwordCheck+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1174:	6d a9       	ldd	r22, Y+53	; 0x35
    1176:	7e a9       	ldd	r23, Y+54	; 0x36
    1178:	8f a9       	ldd	r24, Y+55	; 0x37
    117a:	98 ad       	ldd	r25, Y+56	; 0x38
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e2       	ldi	r20, 0x20	; 32
    1182:	51 e4       	ldi	r21, 0x41	; 65
    1184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	98 ab       	std	Y+48, r25	; 0x30
    119a:	8f a7       	std	Y+47, r24	; 0x2f
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <APP_passwordCheck+0x23c>
    119e:	88 ec       	ldi	r24, 0xC8	; 200
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9e a7       	std	Y+46, r25	; 0x2e
    11a4:	8d a7       	std	Y+45, r24	; 0x2d
    11a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    11a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <APP_passwordCheck+0x22a>
    11ae:	9e a7       	std	Y+46, r25	; 0x2e
    11b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	98 ab       	std	Y+48, r25	; 0x30
    11ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11be:	98 a9       	ldd	r25, Y+48	; 0x30
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	69 f7       	brne	.-38     	; 0x119e <APP_passwordCheck+0x21e>
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <APP_passwordCheck+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c6:	69 a9       	ldd	r22, Y+49	; 0x31
    11c8:	7a a9       	ldd	r23, Y+50	; 0x32
    11ca:	8b a9       	ldd	r24, Y+51	; 0x33
    11cc:	9c a9       	ldd	r25, Y+52	; 0x34
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	98 ab       	std	Y+48, r25	; 0x30
    11d8:	8f a7       	std	Y+47, r24	; 0x2f
    11da:	8f a5       	ldd	r24, Y+47	; 0x2f
    11dc:	98 a9       	ldd	r25, Y+48	; 0x30
    11de:	9c a7       	std	Y+44, r25	; 0x2c
    11e0:	8b a7       	std	Y+43, r24	; 0x2b
    11e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <APP_passwordCheck+0x266>
    11ea:	9c a7       	std	Y+44, r25	; 0x2c
    11ec:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_clearScreen();
	LCD_displayString("Enter Password:");
	LCD_moveCursor(1, 0);

	/*getting the password entered by keypad and saving it in arrayPass*/
	for(int i=0;i<PASSWORDLIMIT;i++){
    11ee:	de 01       	movw	r26, r28
    11f0:	a7 5b       	subi	r26, 0xB7	; 183
    11f2:	bf 4f       	sbci	r27, 0xFF	; 255
    11f4:	fe 01       	movw	r30, r28
    11f6:	e7 5b       	subi	r30, 0xB7	; 183
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	9c 93       	st	X, r25
    1204:	8e 93       	st	-X, r24
    1206:	fe 01       	movw	r30, r28
    1208:	e7 5b       	subi	r30, 0xB7	; 183
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	85 30       	cpi	r24, 0x05	; 5
    1212:	91 05       	cpc	r25, r1
    1214:	0c f4       	brge	.+2      	; 0x1218 <APP_passwordCheck+0x298>
    1216:	5a cf       	rjmp	.-332    	; 0x10cc <APP_passwordCheck+0x14c>

		_delay_ms(500);  /*delay to get the next key pressed correctly*/

	}
	/*sending a handshake with the HMI to get READY for checking the password*/
	UART_sendByte(checkPasswordEntered);
    1218:	89 e7       	ldi	r24, 0x79	; 121
    121a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>


	/*sending the array to CONTROL to check with the one already saved in EEPROM  address*/
	for(int i=0;i<PASSWORDLIMIT;i++){
    121e:	fe 01       	movw	r30, r28
    1220:	e9 5b       	subi	r30, 0xB9	; 185
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	11 82       	std	Z+1, r1	; 0x01
    1226:	10 82       	st	Z, r1
    1228:	27 c0       	rjmp	.+78     	; 0x1278 <APP_passwordCheck+0x2f8>
		UART_sendByte(arrayPass[i]); /*sending the password array*/
    122a:	fe 01       	movw	r30, r28
    122c:	e9 5b       	subi	r30, 0xB9	; 185
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	20 81       	ld	r18, Z
    1232:	31 81       	ldd	r19, Z+1	; 0x01
    1234:	ce 01       	movw	r24, r28
    1236:	83 5b       	subi	r24, 0xB3	; 179
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	fc 01       	movw	r30, r24
    123c:	e2 0f       	add	r30, r18
    123e:	f3 1f       	adc	r31, r19
    1240:	80 81       	ld	r24, Z
    1242:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>


		/*detecting if the HMI send that the password in wrong compared to the one saved in eeprom*/
		if(UART_recieveByte() == wrongPassword){
    1246:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <UART_recieveByte>
    124a:	85 37       	cpi	r24, 0x75	; 117
    124c:	49 f4       	brne	.+18     	; 0x1260 <APP_passwordCheck+0x2e0>
			passwordErrors++;
    124e:	de 01       	movw	r26, r28
    1250:	a5 5b       	subi	r26, 0xB5	; 181
    1252:	bf 4f       	sbci	r27, 0xFF	; 255
    1254:	fe 01       	movw	r30, r28
    1256:	e5 5b       	subi	r30, 0xB5	; 181
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	8c 93       	st	X, r24
	/*sending a handshake with the HMI to get READY for checking the password*/
	UART_sendByte(checkPasswordEntered);


	/*sending the array to CONTROL to check with the one already saved in EEPROM  address*/
	for(int i=0;i<PASSWORDLIMIT;i++){
    1260:	de 01       	movw	r26, r28
    1262:	a9 5b       	subi	r26, 0xB9	; 185
    1264:	bf 4f       	sbci	r27, 0xFF	; 255
    1266:	fe 01       	movw	r30, r28
    1268:	e9 5b       	subi	r30, 0xB9	; 185
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	9c 93       	st	X, r25
    1276:	8e 93       	st	-X, r24
    1278:	fe 01       	movw	r30, r28
    127a:	e9 5b       	subi	r30, 0xB9	; 185
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	80 81       	ld	r24, Z
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	85 30       	cpi	r24, 0x05	; 5
    1284:	91 05       	cpc	r25, r1
    1286:	8c f2       	brlt	.-94     	; 0x122a <APP_passwordCheck+0x2aa>
		}

	}


	if(passwordErrors != 0) /*which means that the password is not correct and errors found */
    1288:	fe 01       	movw	r30, r28
    128a:	e5 5b       	subi	r30, 0xB5	; 181
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	88 23       	and	r24, r24
    1292:	09 f4       	brne	.+2      	; 0x1296 <APP_passwordCheck+0x316>
    1294:	10 c1       	rjmp	.+544    	; 0x14b6 <APP_passwordCheck+0x536>
	{
		/*increment the number of wrong entries to decide about the buzzzer*/
		wrongEntry++;
    1296:	80 91 30 01 	lds	r24, 0x0130
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 30 01 	sts	0x0130, r24
		/*sending the number of wrong Entries to Control as if 1 or 2 will ask to try again
		 *but if 3 times wrong will activate the buzzer
		 */

		UART_sendByte(wrongEntry);
    12a0:	80 91 30 01 	lds	r24, 0x0130
    12a4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>

		/*handle the LCD in HMI for the wrong password trials*/
		if(wrongEntry < 3)
    12a8:	80 91 30 01 	lds	r24, 0x0130
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <APP_passwordCheck+0x332>
    12b0:	82 c0       	rjmp	.+260    	; 0x13b6 <APP_passwordCheck+0x436>
		{
			LCD_clearScreen();
    12b2:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    12b6:	8c e9       	ldi	r24, 0x9C	; 156
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Try Again");
    12be:	2b ea       	ldi	r18, 0xAB	; 171
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <LCD_displayStringRowColumn>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	aa ef       	ldi	r26, 0xFA	; 250
    12d2:	b3 e4       	ldi	r27, 0x43	; 67
    12d4:	8f a3       	std	Y+39, r24	; 0x27
    12d6:	98 a7       	std	Y+40, r25	; 0x28
    12d8:	a9 a7       	std	Y+41, r26	; 0x29
    12da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	6f a1       	ldd	r22, Y+39	; 0x27
    12de:	78 a5       	ldd	r23, Y+40	; 0x28
    12e0:	89 a5       	ldd	r24, Y+41	; 0x29
    12e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a ef       	ldi	r20, 0xFA	; 250
    12ea:	54 e4       	ldi	r21, 0x44	; 68
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	8b a3       	std	Y+35, r24	; 0x23
    12f6:	9c a3       	std	Y+36, r25	; 0x24
    12f8:	ad a3       	std	Y+37, r26	; 0x25
    12fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12fc:	6b a1       	ldd	r22, Y+35	; 0x23
    12fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1300:	8d a1       	ldd	r24, Y+37	; 0x25
    1302:	9e a1       	ldd	r25, Y+38	; 0x26
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <APP_passwordCheck+0x39e>
		__ticks = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9a a3       	std	Y+34, r25	; 0x22
    131a:	89 a3       	std	Y+33, r24	; 0x21
    131c:	3f c0       	rjmp	.+126    	; 0x139c <APP_passwordCheck+0x41c>
	else if (__tmp > 65535)
    131e:	6b a1       	ldd	r22, Y+35	; 0x23
    1320:	7c a1       	ldd	r23, Y+36	; 0x24
    1322:	8d a1       	ldd	r24, Y+37	; 0x25
    1324:	9e a1       	ldd	r25, Y+38	; 0x26
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	4c f5       	brge	.+82     	; 0x1388 <APP_passwordCheck+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1336:	6f a1       	ldd	r22, Y+39	; 0x27
    1338:	78 a5       	ldd	r23, Y+40	; 0x28
    133a:	89 a5       	ldd	r24, Y+41	; 0x29
    133c:	9a a5       	ldd	r25, Y+42	; 0x2a
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e2       	ldi	r20, 0x20	; 32
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9a a3       	std	Y+34, r25	; 0x22
    135c:	89 a3       	std	Y+33, r24	; 0x21
    135e:	0f c0       	rjmp	.+30     	; 0x137e <APP_passwordCheck+0x3fe>
    1360:	88 ec       	ldi	r24, 0xC8	; 200
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	98 a3       	std	Y+32, r25	; 0x20
    1366:	8f 8f       	std	Y+31, r24	; 0x1f
    1368:	8f 8d       	ldd	r24, Y+31	; 0x1f
    136a:	98 a1       	ldd	r25, Y+32	; 0x20
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <APP_passwordCheck+0x3ec>
    1370:	98 a3       	std	Y+32, r25	; 0x20
    1372:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	89 a1       	ldd	r24, Y+33	; 0x21
    1376:	9a a1       	ldd	r25, Y+34	; 0x22
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	9a a3       	std	Y+34, r25	; 0x22
    137c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	89 a1       	ldd	r24, Y+33	; 0x21
    1380:	9a a1       	ldd	r25, Y+34	; 0x22
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	69 f7       	brne	.-38     	; 0x1360 <APP_passwordCheck+0x3e0>
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <APP_passwordCheck+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1388:	6b a1       	ldd	r22, Y+35	; 0x23
    138a:	7c a1       	ldd	r23, Y+36	; 0x24
    138c:	8d a1       	ldd	r24, Y+37	; 0x25
    138e:	9e a1       	ldd	r25, Y+38	; 0x26
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9a a3       	std	Y+34, r25	; 0x22
    139a:	89 a3       	std	Y+33, r24	; 0x21
    139c:	89 a1       	ldd	r24, Y+33	; 0x21
    139e:	9a a1       	ldd	r25, Y+34	; 0x22
    13a0:	9e 8f       	std	Y+30, r25	; 0x1e
    13a2:	8d 8f       	std	Y+29, r24	; 0x1d
    13a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <APP_passwordCheck+0x428>
    13ac:	9e 8f       	std	Y+30, r25	; 0x1e
    13ae:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500); /*delay for appearing on screen that it is wrong password*/
			APP_passwordCheck(); /*asking to check password again if wrong trials is less than 3*/
    13b0:	0e 94 c0 07 	call	0xf80	; 0xf80 <APP_passwordCheck>
    13b4:	03 c1       	rjmp	.+518    	; 0x15bc <APP_passwordCheck+0x63c>

		}
		else /*if the number of wrong trials is 3 will appear and error message on lcd*/
		{
			LCD_clearScreen();
    13b6:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
			LCD_displayString("ERROR!");
    13ba:	85 eb       	ldi	r24, 0xB5	; 181
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
			wrongEntry=0; /*reseting the wrong trials */
    13c2:	10 92 30 01 	sts	0x0130, r1
			g_returnMainOptions =1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 2f 01 	sts	0x012F, r24
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e4       	ldi	r25, 0x40	; 64
    13d0:	ac e9       	ldi	r26, 0x9C	; 156
    13d2:	b5 e4       	ldi	r27, 0x45	; 69
    13d4:	89 8f       	std	Y+25, r24	; 0x19
    13d6:	9a 8f       	std	Y+26, r25	; 0x1a
    13d8:	ab 8f       	std	Y+27, r26	; 0x1b
    13da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	69 8d       	ldd	r22, Y+25	; 0x19
    13de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	4a ef       	ldi	r20, 0xFA	; 250
    13ea:	54 e4       	ldi	r21, 0x44	; 68
    13ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	8d 8b       	std	Y+21, r24	; 0x15
    13f6:	9e 8b       	std	Y+22, r25	; 0x16
    13f8:	af 8b       	std	Y+23, r26	; 0x17
    13fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13fc:	6d 89       	ldd	r22, Y+21	; 0x15
    13fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1400:	8f 89       	ldd	r24, Y+23	; 0x17
    1402:	98 8d       	ldd	r25, Y+24	; 0x18
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e8       	ldi	r20, 0x80	; 128
    140a:	5f e3       	ldi	r21, 0x3F	; 63
    140c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1410:	88 23       	and	r24, r24
    1412:	2c f4       	brge	.+10     	; 0x141e <APP_passwordCheck+0x49e>
		__ticks = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9c 8b       	std	Y+20, r25	; 0x14
    141a:	8b 8b       	std	Y+19, r24	; 0x13
    141c:	3f c0       	rjmp	.+126    	; 0x149c <APP_passwordCheck+0x51c>
	else if (__tmp > 65535)
    141e:	6d 89       	ldd	r22, Y+21	; 0x15
    1420:	7e 89       	ldd	r23, Y+22	; 0x16
    1422:	8f 89       	ldd	r24, Y+23	; 0x17
    1424:	98 8d       	ldd	r25, Y+24	; 0x18
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	3f ef       	ldi	r19, 0xFF	; 255
    142a:	4f e7       	ldi	r20, 0x7F	; 127
    142c:	57 e4       	ldi	r21, 0x47	; 71
    142e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1432:	18 16       	cp	r1, r24
    1434:	4c f5       	brge	.+82     	; 0x1488 <APP_passwordCheck+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	69 8d       	ldd	r22, Y+25	; 0x19
    1438:	7a 8d       	ldd	r23, Y+26	; 0x1a
    143a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    143c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e2       	ldi	r20, 0x20	; 32
    1444:	51 e4       	ldi	r21, 0x41	; 65
    1446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9c 8b       	std	Y+20, r25	; 0x14
    145c:	8b 8b       	std	Y+19, r24	; 0x13
    145e:	0f c0       	rjmp	.+30     	; 0x147e <APP_passwordCheck+0x4fe>
    1460:	88 ec       	ldi	r24, 0xC8	; 200
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9a 8b       	std	Y+18, r25	; 0x12
    1466:	89 8b       	std	Y+17, r24	; 0x11
    1468:	89 89       	ldd	r24, Y+17	; 0x11
    146a:	9a 89       	ldd	r25, Y+18	; 0x12
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <APP_passwordCheck+0x4ec>
    1470:	9a 8b       	std	Y+18, r25	; 0x12
    1472:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1474:	8b 89       	ldd	r24, Y+19	; 0x13
    1476:	9c 89       	ldd	r25, Y+20	; 0x14
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	9c 8b       	std	Y+20, r25	; 0x14
    147c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147e:	8b 89       	ldd	r24, Y+19	; 0x13
    1480:	9c 89       	ldd	r25, Y+20	; 0x14
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	69 f7       	brne	.-38     	; 0x1460 <APP_passwordCheck+0x4e0>
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <APP_passwordCheck+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	7e 89       	ldd	r23, Y+22	; 0x16
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9c 8b       	std	Y+20, r25	; 0x14
    149a:	8b 8b       	std	Y+19, r24	; 0x13
    149c:	8b 89       	ldd	r24, Y+19	; 0x13
    149e:	9c 89       	ldd	r25, Y+20	; 0x14
    14a0:	98 8b       	std	Y+16, r25	; 0x10
    14a2:	8f 87       	std	Y+15, r24	; 0x0f
    14a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a6:	98 89       	ldd	r25, Y+16	; 0x10
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <APP_passwordCheck+0x528>
    14ac:	98 8b       	std	Y+16, r25	; 0x10
    14ae:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5000); //timer
			APP_mainMenu();
    14b0:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <APP_mainMenu>
    14b4:	83 c0       	rjmp	.+262    	; 0x15bc <APP_passwordCheck+0x63c>


	}
	else {

		passwordErrors=0;
    14b6:	fe 01       	movw	r30, r28
    14b8:	e5 5b       	subi	r30, 0xB5	; 181
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	10 82       	st	Z, r1
		LCD_clearScreen();
    14be:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
		LCD_displayString("Right password!");
    14c2:	8c eb       	ldi	r24, 0xBC	; 188
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
		UART_sendByte(correctPassword1); /*sending to control that no Errors*/
    14ca:	84 e0       	ldi	r24, 0x04	; 4
    14cc:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>
		/*reseting the wrong Entry to zero in order if the password typed from second time correctly
		 *and the application is still on so that if entered again wrong is not considered to
		 *decide about the buzzer
		 */
		wrongEntry =0;
    14d0:	10 92 30 01 	sts	0x0130, r1
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	aa e7       	ldi	r26, 0x7A	; 122
    14da:	b4 e4       	ldi	r27, 0x44	; 68
    14dc:	8b 87       	std	Y+11, r24	; 0x0b
    14de:	9c 87       	std	Y+12, r25	; 0x0c
    14e0:	ad 87       	std	Y+13, r26	; 0x0d
    14e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a ef       	ldi	r20, 0xFA	; 250
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8f 83       	std	Y+7, r24	; 0x07
    14fe:	98 87       	std	Y+8, r25	; 0x08
    1500:	a9 87       	std	Y+9, r26	; 0x09
    1502:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <APP_passwordCheck+0x5a6>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <APP_passwordCheck+0x624>
	else if (__tmp > 65535)
    1526:	6f 81       	ldd	r22, Y+7	; 0x07
    1528:	78 85       	ldd	r23, Y+8	; 0x08
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <APP_passwordCheck+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <APP_passwordCheck+0x606>
    1568:	88 ec       	ldi	r24, 0xC8	; 200
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <APP_passwordCheck+0x5f4>
    1578:	9c 83       	std	Y+4, r25	; 0x04
    157a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <APP_passwordCheck+0x5e8>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <APP_passwordCheck+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <APP_passwordCheck+0x630>
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		g_returnMainOptions=0;
    15b8:	10 92 2f 01 	sts	0x012F, r1


	}
}
    15bc:	cf 5a       	subi	r28, 0xAF	; 175
    15be:	df 4f       	sbci	r29, 0xFF	; 255
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <APP_mainMenu>:




void APP_mainMenu(void){
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	0f 92       	push	r0
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	uint8 keyPressed;

	LCD_clearScreen(); /*clear the screen for appearing main menu*/
    15de:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 1, "x:Change Password"); /*display change password option*/
    15e2:	2c ec       	ldi	r18, 0xCC	; 204
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	a9 01       	movw	r20, r18
    15ec:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 1, "-:Open The Door");/*display open door option*/
    15f0:	2e ed       	ldi	r18, 0xDE	; 222
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	a9 01       	movw	r20, r18
    15fa:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <LCD_displayStringRowColumn>
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <APP_mainMenu+0x32>
	/*get the key pressed by keypad in local variable*/
	while((keyPressed != '*') && (keyPressed != '-')) { /*if the input was not proper get another input until it is right 'x' or '-'*/
		keyPressed = KEYPAD_getPressedKey();
    1600:	0e 94 32 10 	call	0x2064	; 0x2064 <KEYPAD_getPressedKey>
    1604:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen(); /*clear the screen for appearing main menu*/
	LCD_displayStringRowColumn(0, 1, "x:Change Password"); /*display change password option*/
	LCD_displayStringRowColumn(1, 1, "-:Open The Door");/*display open door option*/
	/*get the key pressed by keypad in local variable*/
	while((keyPressed != '*') && (keyPressed != '-')) { /*if the input was not proper get another input until it is right 'x' or '-'*/
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	8a 32       	cpi	r24, 0x2A	; 42
    160a:	19 f0       	breq	.+6      	; 0x1612 <APP_mainMenu+0x3e>
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	8d 32       	cpi	r24, 0x2D	; 45
    1610:	b9 f7       	brne	.-18     	; 0x1600 <APP_mainMenu+0x2c>
		keyPressed = KEYPAD_getPressedKey();
	}
	APP_passwordCheck();
    1612:	0e 94 c0 07 	call	0xf80	; 0xf80 <APP_passwordCheck>
	UART_sendByte(g_returnMainOptions);
    1616:	80 91 2f 01 	lds	r24, 0x012F
    161a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>
	if(g_returnMainOptions == 0)
    161e:	80 91 2f 01 	lds	r24, 0x012F
    1622:	88 23       	and	r24, r24
    1624:	61 f4       	brne	.+24     	; 0x163e <APP_mainMenu+0x6a>
	{
		UART_sendByte(keyPressed);
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>
		if(keyPressed == '*')
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	8a 32       	cpi	r24, 0x2A	; 42
    1630:	19 f4       	brne	.+6      	; 0x1638 <APP_mainMenu+0x64>
		{
			APP_newPassword();
    1632:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_newPassword>
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <APP_mainMenu+0x6e>
		}
		else
		{
			APP_openDoor();
    1638:	0e 94 25 0b 	call	0x164a	; 0x164a <APP_openDoor>
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <APP_mainMenu+0x6e>
		}
	}
	else
	{
		g_returnMainOptions =0;
    163e:	10 92 2f 01 	sts	0x012F, r1
	}


}
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <APP_openDoor>:


void APP_openDoor(void){
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	aa 97       	sbiw	r28, 0x2a	; 42
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(unlockDoor);
    165e:	83 e7       	ldi	r24, 0x73	; 115
    1660:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>

	LCD_clearScreen();
    1664:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
	LCD_displayString("Door is Opening!");
    1668:	8e ee       	ldi	r24, 0xEE	; 238
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e6       	ldi	r25, 0x60	; 96
    1674:	aa e6       	ldi	r26, 0x6A	; 106
    1676:	b6 e4       	ldi	r27, 0x46	; 70
    1678:	8f a3       	std	Y+39, r24	; 0x27
    167a:	98 a7       	std	Y+40, r25	; 0x28
    167c:	a9 a7       	std	Y+41, r26	; 0x29
    167e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1680:	6f a1       	ldd	r22, Y+39	; 0x27
    1682:	78 a5       	ldd	r23, Y+40	; 0x28
    1684:	89 a5       	ldd	r24, Y+41	; 0x29
    1686:	9a a5       	ldd	r25, Y+42	; 0x2a
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4a ef       	ldi	r20, 0xFA	; 250
    168e:	54 e4       	ldi	r21, 0x44	; 68
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	8b a3       	std	Y+35, r24	; 0x23
    169a:	9c a3       	std	Y+36, r25	; 0x24
    169c:	ad a3       	std	Y+37, r26	; 0x25
    169e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16a0:	6b a1       	ldd	r22, Y+35	; 0x23
    16a2:	7c a1       	ldd	r23, Y+36	; 0x24
    16a4:	8d a1       	ldd	r24, Y+37	; 0x25
    16a6:	9e a1       	ldd	r25, Y+38	; 0x26
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e8       	ldi	r20, 0x80	; 128
    16ae:	5f e3       	ldi	r21, 0x3F	; 63
    16b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b4:	88 23       	and	r24, r24
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <APP_openDoor+0x78>
		__ticks = 1;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9a a3       	std	Y+34, r25	; 0x22
    16be:	89 a3       	std	Y+33, r24	; 0x21
    16c0:	3f c0       	rjmp	.+126    	; 0x1740 <APP_openDoor+0xf6>
	else if (__tmp > 65535)
    16c2:	6b a1       	ldd	r22, Y+35	; 0x23
    16c4:	7c a1       	ldd	r23, Y+36	; 0x24
    16c6:	8d a1       	ldd	r24, Y+37	; 0x25
    16c8:	9e a1       	ldd	r25, Y+38	; 0x26
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	3f ef       	ldi	r19, 0xFF	; 255
    16ce:	4f e7       	ldi	r20, 0x7F	; 127
    16d0:	57 e4       	ldi	r21, 0x47	; 71
    16d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d6:	18 16       	cp	r1, r24
    16d8:	4c f5       	brge	.+82     	; 0x172c <APP_openDoor+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16da:	6f a1       	ldd	r22, Y+39	; 0x27
    16dc:	78 a5       	ldd	r23, Y+40	; 0x28
    16de:	89 a5       	ldd	r24, Y+41	; 0x29
    16e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e2       	ldi	r20, 0x20	; 32
    16e8:	51 e4       	ldi	r21, 0x41	; 65
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9a a3       	std	Y+34, r25	; 0x22
    1700:	89 a3       	std	Y+33, r24	; 0x21
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <APP_openDoor+0xd8>
    1704:	88 ec       	ldi	r24, 0xC8	; 200
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	98 a3       	std	Y+32, r25	; 0x20
    170a:	8f 8f       	std	Y+31, r24	; 0x1f
    170c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    170e:	98 a1       	ldd	r25, Y+32	; 0x20
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <APP_openDoor+0xc6>
    1714:	98 a3       	std	Y+32, r25	; 0x20
    1716:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1718:	89 a1       	ldd	r24, Y+33	; 0x21
    171a:	9a a1       	ldd	r25, Y+34	; 0x22
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9a a3       	std	Y+34, r25	; 0x22
    1720:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1722:	89 a1       	ldd	r24, Y+33	; 0x21
    1724:	9a a1       	ldd	r25, Y+34	; 0x22
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	69 f7       	brne	.-38     	; 0x1704 <APP_openDoor+0xba>
    172a:	14 c0       	rjmp	.+40     	; 0x1754 <APP_openDoor+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	6b a1       	ldd	r22, Y+35	; 0x23
    172e:	7c a1       	ldd	r23, Y+36	; 0x24
    1730:	8d a1       	ldd	r24, Y+37	; 0x25
    1732:	9e a1       	ldd	r25, Y+38	; 0x26
    1734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	9a a3       	std	Y+34, r25	; 0x22
    173e:	89 a3       	std	Y+33, r24	; 0x21
    1740:	89 a1       	ldd	r24, Y+33	; 0x21
    1742:	9a a1       	ldd	r25, Y+34	; 0x22
    1744:	9e 8f       	std	Y+30, r25	; 0x1e
    1746:	8d 8f       	std	Y+29, r24	; 0x1d
    1748:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <APP_openDoor+0x102>
    1750:	9e 8f       	std	Y+30, r25	; 0x1e
    1752:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(15000);
	LCD_clearScreen();
    1754:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
	LCD_displayString("Door is open!");
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
	LCD_clearScreen();
    1760:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_clearScreen>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e8       	ldi	r25, 0x80	; 128
    1768:	ab e3       	ldi	r26, 0x3B	; 59
    176a:	b5 e4       	ldi	r27, 0x45	; 69
    176c:	89 8f       	std	Y+25, r24	; 0x19
    176e:	9a 8f       	std	Y+26, r25	; 0x1a
    1770:	ab 8f       	std	Y+27, r26	; 0x1b
    1772:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	69 8d       	ldd	r22, Y+25	; 0x19
    1776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    177a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8d 8b       	std	Y+21, r24	; 0x15
    178e:	9e 8b       	std	Y+22, r25	; 0x16
    1790:	af 8b       	std	Y+23, r26	; 0x17
    1792:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1794:	6d 89       	ldd	r22, Y+21	; 0x15
    1796:	7e 89       	ldd	r23, Y+22	; 0x16
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <APP_openDoor+0x16c>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9c 8b       	std	Y+20, r25	; 0x14
    17b2:	8b 8b       	std	Y+19, r24	; 0x13
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <APP_openDoor+0x1ea>
	else if (__tmp > 65535)
    17b6:	6d 89       	ldd	r22, Y+21	; 0x15
    17b8:	7e 89       	ldd	r23, Y+22	; 0x16
    17ba:	8f 89       	ldd	r24, Y+23	; 0x17
    17bc:	98 8d       	ldd	r25, Y+24	; 0x18
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <APP_openDoor+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	69 8d       	ldd	r22, Y+25	; 0x19
    17d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9c 8b       	std	Y+20, r25	; 0x14
    17f4:	8b 8b       	std	Y+19, r24	; 0x13
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <APP_openDoor+0x1cc>
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9a 8b       	std	Y+18, r25	; 0x12
    17fe:	89 8b       	std	Y+17, r24	; 0x11
    1800:	89 89       	ldd	r24, Y+17	; 0x11
    1802:	9a 89       	ldd	r25, Y+18	; 0x12
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <APP_openDoor+0x1ba>
    1808:	9a 8b       	std	Y+18, r25	; 0x12
    180a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8b 89       	ldd	r24, Y+19	; 0x13
    180e:	9c 89       	ldd	r25, Y+20	; 0x14
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9c 8b       	std	Y+20, r25	; 0x14
    1814:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8b 89       	ldd	r24, Y+19	; 0x13
    1818:	9c 89       	ldd	r25, Y+20	; 0x14
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <APP_openDoor+0x1ae>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <APP_openDoor+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	9c 89       	ldd	r25, Y+20	; 0x14
    1838:	98 8b       	std	Y+16, r25	; 0x10
    183a:	8f 87       	std	Y+15, r24	; 0x0f
    183c:	8f 85       	ldd	r24, Y+15	; 0x0f
    183e:	98 89       	ldd	r25, Y+16	; 0x10
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <APP_openDoor+0x1f6>
    1844:	98 8b       	std	Y+16, r25	; 0x10
    1846:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);
	LCD_displayString("Door is Closing!");
    1848:	8d e0       	ldi	r24, 0x0D	; 13
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e6       	ldi	r25, 0x60	; 96
    1854:	aa e6       	ldi	r26, 0x6A	; 106
    1856:	b6 e4       	ldi	r27, 0x46	; 70
    1858:	8b 87       	std	Y+11, r24	; 0x0b
    185a:	9c 87       	std	Y+12, r25	; 0x0c
    185c:	ad 87       	std	Y+13, r26	; 0x0d
    185e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8f 83       	std	Y+7, r24	; 0x07
    187a:	98 87       	std	Y+8, r25	; 0x08
    187c:	a9 87       	std	Y+9, r26	; 0x09
    187e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1880:	6f 81       	ldd	r22, Y+7	; 0x07
    1882:	78 85       	ldd	r23, Y+8	; 0x08
    1884:	89 85       	ldd	r24, Y+9	; 0x09
    1886:	9a 85       	ldd	r25, Y+10	; 0x0a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <APP_openDoor+0x258>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <APP_openDoor+0x2d6>
	else if (__tmp > 65535)
    18a2:	6f 81       	ldd	r22, Y+7	; 0x07
    18a4:	78 85       	ldd	r23, Y+8	; 0x08
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <APP_openDoor+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    18bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18be:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <APP_openDoor+0x2b8>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <APP_openDoor+0x2a6>
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <APP_openDoor+0x29a>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <APP_openDoor+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <APP_openDoor+0x2e2>
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15000);
}
    1934:	aa 96       	adiw	r28, 0x2a	; 42
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <main>:

int main(void){
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	2d 97       	sbiw	r28, 0x0d	; 13
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
	uint8 firstTimeFlag =0;
    195a:	19 82       	std	Y+1, r1	; 0x01
	UART_Config Config = {EIGHT,ONE,DISABLE_PARITY,9600};
    195c:	ce 01       	movw	r24, r28
    195e:	02 96       	adiw	r24, 0x02	; 2
    1960:	9a 87       	std	Y+10, r25	; 0x0a
    1962:	89 87       	std	Y+9, r24	; 0x09
    1964:	e6 e2       	ldi	r30, 0x26	; 38
    1966:	f1 e0       	ldi	r31, 0x01	; 1
    1968:	fc 87       	std	Y+12, r31	; 0x0c
    196a:	eb 87       	std	Y+11, r30	; 0x0b
    196c:	f7 e0       	ldi	r31, 0x07	; 7
    196e:	fd 87       	std	Y+13, r31	; 0x0d
    1970:	eb 85       	ldd	r30, Y+11	; 0x0b
    1972:	fc 85       	ldd	r31, Y+12	; 0x0c
    1974:	00 80       	ld	r0, Z
    1976:	8b 85       	ldd	r24, Y+11	; 0x0b
    1978:	9c 85       	ldd	r25, Y+12	; 0x0c
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	9c 87       	std	Y+12, r25	; 0x0c
    197e:	8b 87       	std	Y+11, r24	; 0x0b
    1980:	e9 85       	ldd	r30, Y+9	; 0x09
    1982:	fa 85       	ldd	r31, Y+10	; 0x0a
    1984:	00 82       	st	Z, r0
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	9a 87       	std	Y+10, r25	; 0x0a
    198e:	89 87       	std	Y+9, r24	; 0x09
    1990:	9d 85       	ldd	r25, Y+13	; 0x0d
    1992:	91 50       	subi	r25, 0x01	; 1
    1994:	9d 87       	std	Y+13, r25	; 0x0d
    1996:	ed 85       	ldd	r30, Y+13	; 0x0d
    1998:	ee 23       	and	r30, r30
    199a:	51 f7       	brne	.-44     	; 0x1970 <main+0x2a>
	UART_init(&Config);
    199c:	ce 01       	movw	r24, r28
    199e:	02 96       	adiw	r24, 0x02	; 2
    19a0:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_init>
	SREG |= (1 << 7);
    19a4:	af e5       	ldi	r26, 0x5F	; 95
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ef e5       	ldi	r30, 0x5F	; 95
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 68       	ori	r24, 0x80	; 128
    19b0:	8c 93       	st	X, r24
	LCD_init();
    19b2:	0e 94 2a 11 	call	0x2254	; 0x2254 <LCD_init>


	while(1){
		UART_sendByte(M1_Ready);
    19b6:	82 e7       	ldi	r24, 0x72	; 114
    19b8:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>
		firstTimeFlag = UART_recieveByte();
    19bc:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <UART_recieveByte>
    19c0:	89 83       	std	Y+1, r24	; 0x01
		if(firstTimeFlag != 0x01){
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	19 f0       	breq	.+6      	; 0x19ce <main+0x88>
			APP_newPassword();
    19c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_newPassword>
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <main+0x8c>
		}
		else {
			APP_mainMenu();
    19ce:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <APP_mainMenu>
		}


		return 0;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    19d6:	2d 96       	adiw	r28, 0x0d	; 13
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_setupPinDirection+0x6>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <GPIO_setupPinDirection+0x8>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	6a 83       	std	Y+2, r22	; 0x02
    19fa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	88 30       	cpi	r24, 0x08	; 8
    1a00:	08 f0       	brcs	.+2      	; 0x1a04 <GPIO_setupPinDirection+0x1c>
    1a02:	d5 c0       	rjmp	.+426    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <GPIO_setupPinDirection+0x24>
    1a0a:	d1 c0       	rjmp	.+418    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	3d 83       	std	Y+5, r19	; 0x05
    1a14:	2c 83       	std	Y+4, r18	; 0x04
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <GPIO_setupPinDirection+0x3a>
    1a20:	43 c0       	rjmp	.+134    	; 0x1aa8 <GPIO_setupPinDirection+0xc0>
    1a22:	2c 81       	ldd	r18, Y+4	; 0x04
    1a24:	3d 81       	ldd	r19, Y+5	; 0x05
    1a26:	22 30       	cpi	r18, 0x02	; 2
    1a28:	31 05       	cpc	r19, r1
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <GPIO_setupPinDirection+0x4e>
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	71 f0       	breq	.+28     	; 0x1a50 <GPIO_setupPinDirection+0x68>
    1a34:	bc c0       	rjmp	.+376    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
    1a36:	2c 81       	ldd	r18, Y+4	; 0x04
    1a38:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <GPIO_setupPinDirection+0x5a>
    1a40:	5f c0       	rjmp	.+190    	; 0x1b00 <GPIO_setupPinDirection+0x118>
    1a42:	8c 81       	ldd	r24, Y+4	; 0x04
    1a44:	9d 81       	ldd	r25, Y+5	; 0x05
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <GPIO_setupPinDirection+0x66>
    1a4c:	85 c0       	rjmp	.+266    	; 0x1b58 <GPIO_setupPinDirection+0x170>
    1a4e:	af c0       	rjmp	.+350    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	a1 f4       	brne	.+40     	; 0x1a7e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a56:	aa e3       	ldi	r26, 0x3A	; 58
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	ea e3       	ldi	r30, 0x3A	; 58
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <GPIO_setupPinDirection+0x8c>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <GPIO_setupPinDirection+0x88>
    1a78:	84 2b       	or	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	98 c0       	rjmp	.+304    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a7e:	aa e3       	ldi	r26, 0x3A	; 58
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	ea e3       	ldi	r30, 0x3A	; 58
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <GPIO_setupPinDirection+0xb4>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <GPIO_setupPinDirection+0xb0>
    1aa0:	80 95       	com	r24
    1aa2:	84 23       	and	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	83 c0       	rjmp	.+262    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	a1 f4       	brne	.+40     	; 0x1ad6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1aae:	a7 e3       	ldi	r26, 0x37	; 55
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e7 e3       	ldi	r30, 0x37	; 55
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_setupPinDirection+0xe4>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_setupPinDirection+0xe0>
    1ad0:	84 2b       	or	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	6c c0       	rjmp	.+216    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ad6:	a7 e3       	ldi	r26, 0x37	; 55
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e7 e3       	ldi	r30, 0x37	; 55
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 2e       	mov	r0, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <GPIO_setupPinDirection+0x10c>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	0a 94       	dec	r0
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <GPIO_setupPinDirection+0x108>
    1af8:	80 95       	com	r24
    1afa:	84 23       	and	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	57 c0       	rjmp	.+174    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	a1 f4       	brne	.+40     	; 0x1b2e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b06:	a4 e3       	ldi	r26, 0x34	; 52
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e4 e3       	ldi	r30, 0x34	; 52
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_setupPinDirection+0x13c>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <GPIO_setupPinDirection+0x138>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	40 c0       	rjmp	.+128    	; 0x1bae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b2e:	a4 e3       	ldi	r26, 0x34	; 52
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e4 e3       	ldi	r30, 0x34	; 52
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <GPIO_setupPinDirection+0x164>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <GPIO_setupPinDirection+0x160>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	2b c0       	rjmp	.+86     	; 0x1bae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	a1 f4       	brne	.+40     	; 0x1b86 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b5e:	a1 e3       	ldi	r26, 0x31	; 49
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e1 e3       	ldi	r30, 0x31	; 49
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <GPIO_setupPinDirection+0x194>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <GPIO_setupPinDirection+0x190>
    1b80:	84 2b       	or	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b86:	a1 e3       	ldi	r26, 0x31	; 49
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e1 e3       	ldi	r30, 0x31	; 49
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <GPIO_setupPinDirection+0x1bc>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <GPIO_setupPinDirection+0x1b8>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <GPIO_writePin+0x6>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <GPIO_writePin+0x8>
    1bc6:	0f 92       	push	r0
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	6a 83       	std	Y+2, r22	; 0x02
    1bd0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	88 30       	cpi	r24, 0x08	; 8
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <GPIO_writePin+0x1c>
    1bd8:	d5 c0       	rjmp	.+426    	; 0x1d84 <GPIO_writePin+0x1c6>
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	84 30       	cpi	r24, 0x04	; 4
    1bde:	08 f0       	brcs	.+2      	; 0x1be2 <GPIO_writePin+0x24>
    1be0:	d1 c0       	rjmp	.+418    	; 0x1d84 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	3d 83       	std	Y+5, r19	; 0x05
    1bea:	2c 83       	std	Y+4, r18	; 0x04
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <GPIO_writePin+0x3a>
    1bf6:	43 c0       	rjmp	.+134    	; 0x1c7e <GPIO_writePin+0xc0>
    1bf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <GPIO_writePin+0x4e>
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	9d 81       	ldd	r25, Y+5	; 0x05
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	71 f0       	breq	.+28     	; 0x1c26 <GPIO_writePin+0x68>
    1c0a:	bc c0       	rjmp	.+376    	; 0x1d84 <GPIO_writePin+0x1c6>
    1c0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <GPIO_writePin+0x5a>
    1c16:	5f c0       	rjmp	.+190    	; 0x1cd6 <GPIO_writePin+0x118>
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <GPIO_writePin+0x66>
    1c22:	85 c0       	rjmp	.+266    	; 0x1d2e <GPIO_writePin+0x170>
    1c24:	af c0       	rjmp	.+350    	; 0x1d84 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	a1 f4       	brne	.+40     	; 0x1c54 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c2c:	ab e3       	ldi	r26, 0x3B	; 59
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	eb e3       	ldi	r30, 0x3B	; 59
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	48 2f       	mov	r20, r24
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <GPIO_writePin+0x8c>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <GPIO_writePin+0x88>
    1c4e:	84 2b       	or	r24, r20
    1c50:	8c 93       	st	X, r24
    1c52:	98 c0       	rjmp	.+304    	; 0x1d84 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1c54:	ab e3       	ldi	r26, 0x3B	; 59
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	eb e3       	ldi	r30, 0x3B	; 59
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 2e       	mov	r0, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <GPIO_writePin+0xb4>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <GPIO_writePin+0xb0>
    1c76:	80 95       	com	r24
    1c78:	84 23       	and	r24, r20
    1c7a:	8c 93       	st	X, r24
    1c7c:	83 c0       	rjmp	.+262    	; 0x1d84 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	a1 f4       	brne	.+40     	; 0x1cac <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c84:	a8 e3       	ldi	r26, 0x38	; 56
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e8 e3       	ldi	r30, 0x38	; 56
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <GPIO_writePin+0xe4>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <GPIO_writePin+0xe0>
    1ca6:	84 2b       	or	r24, r20
    1ca8:	8c 93       	st	X, r24
    1caa:	6c c0       	rjmp	.+216    	; 0x1d84 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1cac:	a8 e3       	ldi	r26, 0x38	; 56
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e8 e3       	ldi	r30, 0x38	; 56
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <GPIO_writePin+0x10c>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <GPIO_writePin+0x108>
    1cce:	80 95       	com	r24
    1cd0:	84 23       	and	r24, r20
    1cd2:	8c 93       	st	X, r24
    1cd4:	57 c0       	rjmp	.+174    	; 0x1d84 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	a1 f4       	brne	.+40     	; 0x1d04 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1cdc:	a5 e3       	ldi	r26, 0x35	; 53
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e5 e3       	ldi	r30, 0x35	; 53
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <GPIO_writePin+0x13c>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <GPIO_writePin+0x138>
    1cfe:	84 2b       	or	r24, r20
    1d00:	8c 93       	st	X, r24
    1d02:	40 c0       	rjmp	.+128    	; 0x1d84 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d04:	a5 e3       	ldi	r26, 0x35	; 53
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e5 e3       	ldi	r30, 0x35	; 53
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <GPIO_writePin+0x164>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <GPIO_writePin+0x160>
    1d26:	80 95       	com	r24
    1d28:	84 23       	and	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	2b c0       	rjmp	.+86     	; 0x1d84 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	a1 f4       	brne	.+40     	; 0x1d5c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1d34:	a2 e3       	ldi	r26, 0x32	; 50
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e2 e3       	ldi	r30, 0x32	; 50
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <GPIO_writePin+0x194>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <GPIO_writePin+0x190>
    1d56:	84 2b       	or	r24, r20
    1d58:	8c 93       	st	X, r24
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d5c:	a2 e3       	ldi	r26, 0x32	; 50
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e2 e3       	ldi	r30, 0x32	; 50
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <GPIO_writePin+0x1bc>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <GPIO_writePin+0x1b8>
    1d7e:	80 95       	com	r24
    1d80:	84 23       	and	r24, r20
    1d82:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <GPIO_readPin+0x6>
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <GPIO_readPin+0x8>
    1d9c:	0f 92       	push	r0
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	8a 83       	std	Y+2, r24	; 0x02
    1da4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1da6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	88 30       	cpi	r24, 0x08	; 8
    1dac:	08 f0       	brcs	.+2      	; 0x1db0 <GPIO_readPin+0x1c>
    1dae:	84 c0       	rjmp	.+264    	; 0x1eb8 <GPIO_readPin+0x124>
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	84 30       	cpi	r24, 0x04	; 4
    1db4:	08 f0       	brcs	.+2      	; 0x1db8 <GPIO_readPin+0x24>
    1db6:	80 c0       	rjmp	.+256    	; 0x1eb8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	3d 83       	std	Y+5, r19	; 0x05
    1dc0:	2c 83       	std	Y+4, r18	; 0x04
    1dc2:	4c 81       	ldd	r20, Y+4	; 0x04
    1dc4:	5d 81       	ldd	r21, Y+5	; 0x05
    1dc6:	41 30       	cpi	r20, 0x01	; 1
    1dc8:	51 05       	cpc	r21, r1
    1dca:	79 f1       	breq	.+94     	; 0x1e2a <GPIO_readPin+0x96>
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	34 f4       	brge	.+12     	; 0x1de2 <GPIO_readPin+0x4e>
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	21 15       	cp	r18, r1
    1ddc:	31 05       	cpc	r19, r1
    1dde:	69 f0       	breq	.+26     	; 0x1dfa <GPIO_readPin+0x66>
    1de0:	6b c0       	rjmp	.+214    	; 0x1eb8 <GPIO_readPin+0x124>
    1de2:	4c 81       	ldd	r20, Y+4	; 0x04
    1de4:	5d 81       	ldd	r21, Y+5	; 0x05
    1de6:	42 30       	cpi	r20, 0x02	; 2
    1de8:	51 05       	cpc	r21, r1
    1dea:	b9 f1       	breq	.+110    	; 0x1e5a <GPIO_readPin+0xc6>
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	83 30       	cpi	r24, 0x03	; 3
    1df2:	91 05       	cpc	r25, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <GPIO_readPin+0x64>
    1df6:	49 c0       	rjmp	.+146    	; 0x1e8a <GPIO_readPin+0xf6>
    1df8:	5f c0       	rjmp	.+190    	; 0x1eb8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1dfa:	e9 e3       	ldi	r30, 0x39	; 57
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a9 01       	movw	r20, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <GPIO_readPin+0x7e>
    1e0e:	55 95       	asr	r21
    1e10:	47 95       	ror	r20
    1e12:	8a 95       	dec	r24
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <GPIO_readPin+0x7a>
    1e16:	ca 01       	movw	r24, r20
    1e18:	81 70       	andi	r24, 0x01	; 1
    1e1a:	90 70       	andi	r25, 0x00	; 0
    1e1c:	88 23       	and	r24, r24
    1e1e:	19 f0       	breq	.+6      	; 0x1e26 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	49 c0       	rjmp	.+146    	; 0x1eb8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e26:	19 82       	std	Y+1, r1	; 0x01
    1e28:	47 c0       	rjmp	.+142    	; 0x1eb8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e2a:	e6 e3       	ldi	r30, 0x36	; 54
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a9 01       	movw	r20, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <GPIO_readPin+0xae>
    1e3e:	55 95       	asr	r21
    1e40:	47 95       	ror	r20
    1e42:	8a 95       	dec	r24
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <GPIO_readPin+0xaa>
    1e46:	ca 01       	movw	r24, r20
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	90 70       	andi	r25, 0x00	; 0
    1e4c:	88 23       	and	r24, r24
    1e4e:	19 f0       	breq	.+6      	; 0x1e56 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	31 c0       	rjmp	.+98     	; 0x1eb8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e56:	19 82       	std	Y+1, r1	; 0x01
    1e58:	2f c0       	rjmp	.+94     	; 0x1eb8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e5a:	e3 e3       	ldi	r30, 0x33	; 51
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a9 01       	movw	r20, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <GPIO_readPin+0xde>
    1e6e:	55 95       	asr	r21
    1e70:	47 95       	ror	r20
    1e72:	8a 95       	dec	r24
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <GPIO_readPin+0xda>
    1e76:	ca 01       	movw	r24, r20
    1e78:	81 70       	andi	r24, 0x01	; 1
    1e7a:	90 70       	andi	r25, 0x00	; 0
    1e7c:	88 23       	and	r24, r24
    1e7e:	19 f0       	breq	.+6      	; 0x1e86 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	19 c0       	rjmp	.+50     	; 0x1eb8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e86:	19 82       	std	Y+1, r1	; 0x01
    1e88:	17 c0       	rjmp	.+46     	; 0x1eb8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e8a:	e0 e3       	ldi	r30, 0x30	; 48
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a9 01       	movw	r20, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_readPin+0x10e>
    1e9e:	55 95       	asr	r21
    1ea0:	47 95       	ror	r20
    1ea2:	8a 95       	dec	r24
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_readPin+0x10a>
    1ea6:	ca 01       	movw	r24, r20
    1ea8:	81 70       	andi	r24, 0x01	; 1
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	88 23       	and	r24, r24
    1eae:	19 f0       	breq	.+6      	; 0x1eb6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eb6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <GPIO_setupPortDirection+0x6>
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <GPIO_setupPortDirection+0x8>
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	84 30       	cpi	r24, 0x04	; 4
    1ede:	90 f5       	brcc	.+100    	; 0x1f44 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	3c 83       	std	Y+4, r19	; 0x04
    1ee8:	2b 83       	std	Y+3, r18	; 0x03
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	d1 f0       	breq	.+52     	; 0x1f28 <GPIO_setupPortDirection+0x5e>
    1ef4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef8:	22 30       	cpi	r18, 0x02	; 2
    1efa:	31 05       	cpc	r19, r1
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <GPIO_setupPortDirection+0x3e>
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	61 f0       	breq	.+24     	; 0x1f1e <GPIO_setupPortDirection+0x54>
    1f06:	1e c0       	rjmp	.+60     	; 0x1f44 <GPIO_setupPortDirection+0x7a>
    1f08:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0c:	22 30       	cpi	r18, 0x02	; 2
    1f0e:	31 05       	cpc	r19, r1
    1f10:	81 f0       	breq	.+32     	; 0x1f32 <GPIO_setupPortDirection+0x68>
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	83 30       	cpi	r24, 0x03	; 3
    1f18:	91 05       	cpc	r25, r1
    1f1a:	81 f0       	breq	.+32     	; 0x1f3c <GPIO_setupPortDirection+0x72>
    1f1c:	13 c0       	rjmp	.+38     	; 0x1f44 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f1e:	ea e3       	ldi	r30, 0x3A	; 58
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	80 83       	st	Z, r24
    1f26:	0e c0       	rjmp	.+28     	; 0x1f44 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f28:	e7 e3       	ldi	r30, 0x37	; 55
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	80 83       	st	Z, r24
    1f30:	09 c0       	rjmp	.+18     	; 0x1f44 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f32:	e4 e3       	ldi	r30, 0x34	; 52
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	80 83       	st	Z, r24
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1f3c:	e1 e3       	ldi	r30, 0x31	; 49
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <GPIO_writePort+0x6>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <GPIO_writePort+0x8>
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	84 30       	cpi	r24, 0x04	; 4
    1f66:	90 f5       	brcc	.+100    	; 0x1fcc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	3c 83       	std	Y+4, r19	; 0x04
    1f70:	2b 83       	std	Y+3, r18	; 0x03
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	d1 f0       	breq	.+52     	; 0x1fb0 <GPIO_writePort+0x5e>
    1f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f80:	22 30       	cpi	r18, 0x02	; 2
    1f82:	31 05       	cpc	r19, r1
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <GPIO_writePort+0x3e>
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <GPIO_writePort+0x54>
    1f8e:	1e c0       	rjmp	.+60     	; 0x1fcc <GPIO_writePort+0x7a>
    1f90:	2b 81       	ldd	r18, Y+3	; 0x03
    1f92:	3c 81       	ldd	r19, Y+4	; 0x04
    1f94:	22 30       	cpi	r18, 0x02	; 2
    1f96:	31 05       	cpc	r19, r1
    1f98:	81 f0       	breq	.+32     	; 0x1fba <GPIO_writePort+0x68>
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	83 30       	cpi	r24, 0x03	; 3
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	81 f0       	breq	.+32     	; 0x1fc4 <GPIO_writePort+0x72>
    1fa4:	13 c0       	rjmp	.+38     	; 0x1fcc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1fa6:	eb e3       	ldi	r30, 0x3B	; 59
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	80 83       	st	Z, r24
    1fae:	0e c0       	rjmp	.+28     	; 0x1fcc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1fb0:	e8 e3       	ldi	r30, 0x38	; 56
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1fba:	e5 e3       	ldi	r30, 0x35	; 53
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	80 83       	st	Z, r24
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1fc4:	e2 e3       	ldi	r30, 0x32	; 50
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <GPIO_readPort+0x6>
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <GPIO_readPort+0x8>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1fe8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	84 30       	cpi	r24, 0x04	; 4
    1fee:	90 f5       	brcc	.+100    	; 0x2054 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	3c 83       	std	Y+4, r19	; 0x04
    1ff8:	2b 83       	std	Y+3, r18	; 0x03
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	91 05       	cpc	r25, r1
    2002:	d1 f0       	breq	.+52     	; 0x2038 <GPIO_readPort+0x5e>
    2004:	2b 81       	ldd	r18, Y+3	; 0x03
    2006:	3c 81       	ldd	r19, Y+4	; 0x04
    2008:	22 30       	cpi	r18, 0x02	; 2
    200a:	31 05       	cpc	r19, r1
    200c:	2c f4       	brge	.+10     	; 0x2018 <GPIO_readPort+0x3e>
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	61 f0       	breq	.+24     	; 0x202e <GPIO_readPort+0x54>
    2016:	1e c0       	rjmp	.+60     	; 0x2054 <GPIO_readPort+0x7a>
    2018:	2b 81       	ldd	r18, Y+3	; 0x03
    201a:	3c 81       	ldd	r19, Y+4	; 0x04
    201c:	22 30       	cpi	r18, 0x02	; 2
    201e:	31 05       	cpc	r19, r1
    2020:	81 f0       	breq	.+32     	; 0x2042 <GPIO_readPort+0x68>
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	83 30       	cpi	r24, 0x03	; 3
    2028:	91 05       	cpc	r25, r1
    202a:	81 f0       	breq	.+32     	; 0x204c <GPIO_readPort+0x72>
    202c:	13 c0       	rjmp	.+38     	; 0x2054 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    202e:	e9 e3       	ldi	r30, 0x39	; 57
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	0e c0       	rjmp	.+28     	; 0x2054 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2038:	e6 e3       	ldi	r30, 0x36	; 54
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	09 c0       	rjmp	.+18     	; 0x2054 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2042:	e3 e3       	ldi	r30, 0x33	; 51
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    204c:	e0 e3       	ldi	r30, 0x30	; 48
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <KEYPAD_getPressedKey+0x6>
    206a:	0f 92       	push	r0
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2070:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2072:	1b 82       	std	Y+3, r1	; 0x03
    2074:	43 c0       	rjmp	.+134    	; 0x20fc <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	98 2f       	mov	r25, r24
    2082:	9c 5f       	subi	r25, 0xFC	; 252
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	69 2f       	mov	r22, r25
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 01       	movw	r18, r24
    2096:	2c 5f       	subi	r18, 0xFC	; 252
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <KEYPAD_getPressedKey+0x40>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	2a 95       	dec	r18
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <KEYPAD_getPressedKey+0x3c>
    20a8:	80 95       	com	r24
    20aa:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	69 81       	ldd	r22, Y+1	; 0x01
    20b0:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    20b4:	1a 82       	std	Y+2, r1	; 0x02
    20b6:	1c c0       	rjmp	.+56     	; 0x20f0 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	6a 81       	ldd	r22, Y+2	; 0x02
    20bc:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <GPIO_readPin>
    20c0:	88 23       	and	r24, r24
    20c2:	99 f4       	brne	.+38     	; 0x20ea <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	98 2f       	mov	r25, r24
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	89 0f       	add	r24, r25
    20d8:	8f 5f       	subi	r24, 0xFF	; 255
    20da:	0e 94 83 10 	call	0x2106	; 0x2106 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	8f 5f       	subi	r24, 0xFF	; 255
    20ee:	8a 83       	std	Y+2, r24	; 0x02
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	84 30       	cpi	r24, 0x04	; 4
    20f4:	08 f3       	brcs	.-62     	; 0x20b8 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	8b 83       	std	Y+3, r24	; 0x03
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	84 30       	cpi	r24, 0x04	; 4
    2100:	08 f4       	brcc	.+2      	; 0x2104 <KEYPAD_getPressedKey+0xa0>
    2102:	b9 cf       	rjmp	.-142    	; 0x2076 <KEYPAD_getPressedKey+0x12>
    2104:	b6 cf       	rjmp	.-148    	; 0x2072 <KEYPAD_getPressedKey+0xe>

00002106 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <KEYPAD_4x4_adjustKeyNumber+0x6>
    210c:	00 d0       	rcall	.+0      	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x8>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2114:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	3c 83       	std	Y+4, r19	; 0x04
    211e:	2b 83       	std	Y+3, r18	; 0x03
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	88 30       	cpi	r24, 0x08	; 8
    2126:	91 05       	cpc	r25, r1
    2128:	09 f4       	brne	.+2      	; 0x212c <KEYPAD_4x4_adjustKeyNumber+0x26>
    212a:	70 c0       	rjmp	.+224    	; 0x220c <KEYPAD_4x4_adjustKeyNumber+0x106>
    212c:	2b 81       	ldd	r18, Y+3	; 0x03
    212e:	3c 81       	ldd	r19, Y+4	; 0x04
    2130:	29 30       	cpi	r18, 0x09	; 9
    2132:	31 05       	cpc	r19, r1
    2134:	5c f5       	brge	.+86     	; 0x218c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	84 30       	cpi	r24, 0x04	; 4
    213c:	91 05       	cpc	r25, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2140:	59 c0       	rjmp	.+178    	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2142:	2b 81       	ldd	r18, Y+3	; 0x03
    2144:	3c 81       	ldd	r19, Y+4	; 0x04
    2146:	25 30       	cpi	r18, 0x05	; 5
    2148:	31 05       	cpc	r19, r1
    214a:	9c f4       	brge	.+38     	; 0x2172 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	82 30       	cpi	r24, 0x02	; 2
    2152:	91 05       	cpc	r25, r1
    2154:	09 f4       	brne	.+2      	; 0x2158 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2156:	48 c0       	rjmp	.+144    	; 0x21e8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2158:	2b 81       	ldd	r18, Y+3	; 0x03
    215a:	3c 81       	ldd	r19, Y+4	; 0x04
    215c:	23 30       	cpi	r18, 0x03	; 3
    215e:	31 05       	cpc	r19, r1
    2160:	0c f0       	brlt	.+2      	; 0x2164 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2162:	45 c0       	rjmp	.+138    	; 0x21ee <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	91 05       	cpc	r25, r1
    216c:	09 f4       	brne	.+2      	; 0x2170 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    216e:	39 c0       	rjmp	.+114    	; 0x21e2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2170:	67 c0       	rjmp	.+206    	; 0x2240 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2172:	2b 81       	ldd	r18, Y+3	; 0x03
    2174:	3c 81       	ldd	r19, Y+4	; 0x04
    2176:	26 30       	cpi	r18, 0x06	; 6
    2178:	31 05       	cpc	r19, r1
    217a:	09 f4       	brne	.+2      	; 0x217e <KEYPAD_4x4_adjustKeyNumber+0x78>
    217c:	41 c0       	rjmp	.+130    	; 0x2200 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	87 30       	cpi	r24, 0x07	; 7
    2184:	91 05       	cpc	r25, r1
    2186:	0c f0       	brlt	.+2      	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2188:	3e c0       	rjmp	.+124    	; 0x2206 <KEYPAD_4x4_adjustKeyNumber+0x100>
    218a:	37 c0       	rjmp	.+110    	; 0x21fa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    218c:	2b 81       	ldd	r18, Y+3	; 0x03
    218e:	3c 81       	ldd	r19, Y+4	; 0x04
    2190:	2c 30       	cpi	r18, 0x0C	; 12
    2192:	31 05       	cpc	r19, r1
    2194:	09 f4       	brne	.+2      	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2196:	46 c0       	rjmp	.+140    	; 0x2224 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	8d 30       	cpi	r24, 0x0D	; 13
    219e:	91 05       	cpc	r25, r1
    21a0:	5c f4       	brge	.+22     	; 0x21b8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    21a2:	2b 81       	ldd	r18, Y+3	; 0x03
    21a4:	3c 81       	ldd	r19, Y+4	; 0x04
    21a6:	2a 30       	cpi	r18, 0x0A	; 10
    21a8:	31 05       	cpc	r19, r1
    21aa:	b1 f1       	breq	.+108    	; 0x2218 <KEYPAD_4x4_adjustKeyNumber+0x112>
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	8b 30       	cpi	r24, 0x0B	; 11
    21b2:	91 05       	cpc	r25, r1
    21b4:	a4 f5       	brge	.+104    	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x118>
    21b6:	2d c0       	rjmp	.+90     	; 0x2212 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    21b8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ba:	3c 81       	ldd	r19, Y+4	; 0x04
    21bc:	2e 30       	cpi	r18, 0x0E	; 14
    21be:	31 05       	cpc	r19, r1
    21c0:	b9 f1       	breq	.+110    	; 0x2230 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	8e 30       	cpi	r24, 0x0E	; 14
    21c8:	91 05       	cpc	r25, r1
    21ca:	7c f1       	brlt	.+94     	; 0x222a <KEYPAD_4x4_adjustKeyNumber+0x124>
    21cc:	2b 81       	ldd	r18, Y+3	; 0x03
    21ce:	3c 81       	ldd	r19, Y+4	; 0x04
    21d0:	2f 30       	cpi	r18, 0x0F	; 15
    21d2:	31 05       	cpc	r19, r1
    21d4:	79 f1       	breq	.+94     	; 0x2234 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	80 31       	cpi	r24, 0x10	; 16
    21dc:	91 05       	cpc	r25, r1
    21de:	69 f1       	breq	.+90     	; 0x223a <KEYPAD_4x4_adjustKeyNumber+0x134>
    21e0:	2f c0       	rjmp	.+94     	; 0x2240 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    21e2:	87 e0       	ldi	r24, 0x07	; 7
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	2e c0       	rjmp	.+92     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    21e8:	88 e0       	ldi	r24, 0x08	; 8
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	2b c0       	rjmp	.+86     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    21ee:	89 e0       	ldi	r24, 0x09	; 9
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	28 c0       	rjmp	.+80     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    21f4:	85 e2       	ldi	r24, 0x25	; 37
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	25 c0       	rjmp	.+74     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    21fa:	84 e0       	ldi	r24, 0x04	; 4
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	22 c0       	rjmp	.+68     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2200:	85 e0       	ldi	r24, 0x05	; 5
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	1f c0       	rjmp	.+62     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2206:	86 e0       	ldi	r24, 0x06	; 6
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	1c c0       	rjmp	.+56     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    220c:	8a e2       	ldi	r24, 0x2A	; 42
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	19 c0       	rjmp	.+50     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	16 c0       	rjmp	.+44     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	13 c0       	rjmp	.+38     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    221e:	83 e0       	ldi	r24, 0x03	; 3
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	10 c0       	rjmp	.+32     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2224:	8d e2       	ldi	r24, 0x2D	; 45
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	0d c0       	rjmp	.+26     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    222a:	8d e0       	ldi	r24, 0x0D	; 13
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	0a c0       	rjmp	.+20     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2230:	19 82       	std	Y+1, r1	; 0x01
    2232:	08 c0       	rjmp	.+16     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2234:	8d e3       	ldi	r24, 0x3D	; 61
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	05 c0       	rjmp	.+10     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    223a:	8b e2       	ldi	r24, 0x2B	; 43
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2244:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <LCD_init>:
 * Description : Initialize the LCD:
 * 				 1. Setup the LCD pins directions by use the GPIO driver.
 * 				 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    225c:	83 e0       	ldi	r24, 0x03	; 3
    225e:	64 e0       	ldi	r22, 0x04	; 4
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	65 e0       	ldi	r22, 0x05	; 5
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2270:	83 e0       	ldi	r24, 0x03	; 3
    2272:	66 e0       	ldi	r22, 0x06	; 6
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	6f ef       	ldi	r22, 0xFF	; 255
    227e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2282:	88 e3       	ldi	r24, 0x38	; 56
    2284:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2288:	8c e0       	ldi	r24, 0x0C	; 12
    228a:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_sendCommand>
}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	e9 97       	sbiw	r28, 0x39	; 57
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	64 e0       	ldi	r22, 0x04	; 4
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	65 e0       	ldi	r22, 0x05	; 5
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_writePin>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a0 e8       	ldi	r26, 0x80	; 128
    22ca:	bf e3       	ldi	r27, 0x3F	; 63
    22cc:	8d ab       	std	Y+53, r24	; 0x35
    22ce:	9e ab       	std	Y+54, r25	; 0x36
    22d0:	af ab       	std	Y+55, r26	; 0x37
    22d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d4:	6d a9       	ldd	r22, Y+53	; 0x35
    22d6:	7e a9       	ldd	r23, Y+54	; 0x36
    22d8:	8f a9       	ldd	r24, Y+55	; 0x37
    22da:	98 ad       	ldd	r25, Y+56	; 0x38
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a ef       	ldi	r20, 0xFA	; 250
    22e2:	54 e4       	ldi	r21, 0x44	; 68
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	89 ab       	std	Y+49, r24	; 0x31
    22ee:	9a ab       	std	Y+50, r25	; 0x32
    22f0:	ab ab       	std	Y+51, r26	; 0x33
    22f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22f4:	69 a9       	ldd	r22, Y+49	; 0x31
    22f6:	7a a9       	ldd	r23, Y+50	; 0x32
    22f8:	8b a9       	ldd	r24, Y+51	; 0x33
    22fa:	9c a9       	ldd	r25, Y+52	; 0x34
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e8       	ldi	r20, 0x80	; 128
    2302:	5f e3       	ldi	r21, 0x3F	; 63
    2304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2308:	88 23       	and	r24, r24
    230a:	2c f4       	brge	.+10     	; 0x2316 <LCD_sendCommand+0x7c>
		__ticks = 1;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	98 ab       	std	Y+48, r25	; 0x30
    2312:	8f a7       	std	Y+47, r24	; 0x2f
    2314:	3f c0       	rjmp	.+126    	; 0x2394 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2316:	69 a9       	ldd	r22, Y+49	; 0x31
    2318:	7a a9       	ldd	r23, Y+50	; 0x32
    231a:	8b a9       	ldd	r24, Y+51	; 0x33
    231c:	9c a9       	ldd	r25, Y+52	; 0x34
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	3f ef       	ldi	r19, 0xFF	; 255
    2322:	4f e7       	ldi	r20, 0x7F	; 127
    2324:	57 e4       	ldi	r21, 0x47	; 71
    2326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232a:	18 16       	cp	r1, r24
    232c:	4c f5       	brge	.+82     	; 0x2380 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232e:	6d a9       	ldd	r22, Y+53	; 0x35
    2330:	7e a9       	ldd	r23, Y+54	; 0x36
    2332:	8f a9       	ldd	r24, Y+55	; 0x37
    2334:	98 ad       	ldd	r25, Y+56	; 0x38
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e2       	ldi	r20, 0x20	; 32
    233c:	51 e4       	ldi	r21, 0x41	; 65
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	98 ab       	std	Y+48, r25	; 0x30
    2354:	8f a7       	std	Y+47, r24	; 0x2f
    2356:	0f c0       	rjmp	.+30     	; 0x2376 <LCD_sendCommand+0xdc>
    2358:	88 ec       	ldi	r24, 0xC8	; 200
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9e a7       	std	Y+46, r25	; 0x2e
    235e:	8d a7       	std	Y+45, r24	; 0x2d
    2360:	8d a5       	ldd	r24, Y+45	; 0x2d
    2362:	9e a5       	ldd	r25, Y+46	; 0x2e
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_sendCommand+0xca>
    2368:	9e a7       	std	Y+46, r25	; 0x2e
    236a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236c:	8f a5       	ldd	r24, Y+47	; 0x2f
    236e:	98 a9       	ldd	r25, Y+48	; 0x30
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	98 ab       	std	Y+48, r25	; 0x30
    2374:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2376:	8f a5       	ldd	r24, Y+47	; 0x2f
    2378:	98 a9       	ldd	r25, Y+48	; 0x30
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	69 f7       	brne	.-38     	; 0x2358 <LCD_sendCommand+0xbe>
    237e:	14 c0       	rjmp	.+40     	; 0x23a8 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2380:	69 a9       	ldd	r22, Y+49	; 0x31
    2382:	7a a9       	ldd	r23, Y+50	; 0x32
    2384:	8b a9       	ldd	r24, Y+51	; 0x33
    2386:	9c a9       	ldd	r25, Y+52	; 0x34
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	98 ab       	std	Y+48, r25	; 0x30
    2392:	8f a7       	std	Y+47, r24	; 0x2f
    2394:	8f a5       	ldd	r24, Y+47	; 0x2f
    2396:	98 a9       	ldd	r25, Y+48	; 0x30
    2398:	9c a7       	std	Y+44, r25	; 0x2c
    239a:	8b a7       	std	Y+43, r24	; 0x2b
    239c:	8b a5       	ldd	r24, Y+43	; 0x2b
    239e:	9c a5       	ldd	r25, Y+44	; 0x2c
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_sendCommand+0x106>
    23a4:	9c a7       	std	Y+44, r25	; 0x2c
    23a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	66 e0       	ldi	r22, 0x06	; 6
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_writePin>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	a0 e8       	ldi	r26, 0x80	; 128
    23b8:	bf e3       	ldi	r27, 0x3F	; 63
    23ba:	8f a3       	std	Y+39, r24	; 0x27
    23bc:	98 a7       	std	Y+40, r25	; 0x28
    23be:	a9 a7       	std	Y+41, r26	; 0x29
    23c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	6f a1       	ldd	r22, Y+39	; 0x27
    23c4:	78 a5       	ldd	r23, Y+40	; 0x28
    23c6:	89 a5       	ldd	r24, Y+41	; 0x29
    23c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	4a ef       	ldi	r20, 0xFA	; 250
    23d0:	54 e4       	ldi	r21, 0x44	; 68
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	8b a3       	std	Y+35, r24	; 0x23
    23dc:	9c a3       	std	Y+36, r25	; 0x24
    23de:	ad a3       	std	Y+37, r26	; 0x25
    23e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23e2:	6b a1       	ldd	r22, Y+35	; 0x23
    23e4:	7c a1       	ldd	r23, Y+36	; 0x24
    23e6:	8d a1       	ldd	r24, Y+37	; 0x25
    23e8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	2c f4       	brge	.+10     	; 0x2404 <LCD_sendCommand+0x16a>
		__ticks = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9a a3       	std	Y+34, r25	; 0x22
    2400:	89 a3       	std	Y+33, r24	; 0x21
    2402:	3f c0       	rjmp	.+126    	; 0x2482 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2404:	6b a1       	ldd	r22, Y+35	; 0x23
    2406:	7c a1       	ldd	r23, Y+36	; 0x24
    2408:	8d a1       	ldd	r24, Y+37	; 0x25
    240a:	9e a1       	ldd	r25, Y+38	; 0x26
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	3f ef       	ldi	r19, 0xFF	; 255
    2410:	4f e7       	ldi	r20, 0x7F	; 127
    2412:	57 e4       	ldi	r21, 0x47	; 71
    2414:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2418:	18 16       	cp	r1, r24
    241a:	4c f5       	brge	.+82     	; 0x246e <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241c:	6f a1       	ldd	r22, Y+39	; 0x27
    241e:	78 a5       	ldd	r23, Y+40	; 0x28
    2420:	89 a5       	ldd	r24, Y+41	; 0x29
    2422:	9a a5       	ldd	r25, Y+42	; 0x2a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9a a3       	std	Y+34, r25	; 0x22
    2442:	89 a3       	std	Y+33, r24	; 0x21
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <LCD_sendCommand+0x1ca>
    2446:	88 ec       	ldi	r24, 0xC8	; 200
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	98 a3       	std	Y+32, r25	; 0x20
    244c:	8f 8f       	std	Y+31, r24	; 0x1f
    244e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2450:	98 a1       	ldd	r25, Y+32	; 0x20
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <LCD_sendCommand+0x1b8>
    2456:	98 a3       	std	Y+32, r25	; 0x20
    2458:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245a:	89 a1       	ldd	r24, Y+33	; 0x21
    245c:	9a a1       	ldd	r25, Y+34	; 0x22
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2464:	89 a1       	ldd	r24, Y+33	; 0x21
    2466:	9a a1       	ldd	r25, Y+34	; 0x22
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	69 f7       	brne	.-38     	; 0x2446 <LCD_sendCommand+0x1ac>
    246c:	14 c0       	rjmp	.+40     	; 0x2496 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246e:	6b a1       	ldd	r22, Y+35	; 0x23
    2470:	7c a1       	ldd	r23, Y+36	; 0x24
    2472:	8d a1       	ldd	r24, Y+37	; 0x25
    2474:	9e a1       	ldd	r25, Y+38	; 0x26
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9a a3       	std	Y+34, r25	; 0x22
    2480:	89 a3       	std	Y+33, r24	; 0x21
    2482:	89 a1       	ldd	r24, Y+33	; 0x21
    2484:	9a a1       	ldd	r25, Y+34	; 0x22
    2486:	9e 8f       	std	Y+30, r25	; 0x1e
    2488:	8d 8f       	std	Y+29, r24	; 0x1d
    248a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    248c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <LCD_sendCommand+0x1f4>
    2492:	9e 8f       	std	Y+30, r25	; 0x1e
    2494:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	69 ad       	ldd	r22, Y+57	; 0x39
    249a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <GPIO_writePort>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a0 e8       	ldi	r26, 0x80	; 128
    24a4:	bf e3       	ldi	r27, 0x3F	; 63
    24a6:	89 8f       	std	Y+25, r24	; 0x19
    24a8:	9a 8f       	std	Y+26, r25	; 0x1a
    24aa:	ab 8f       	std	Y+27, r26	; 0x1b
    24ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	69 8d       	ldd	r22, Y+25	; 0x19
    24b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a ef       	ldi	r20, 0xFA	; 250
    24bc:	54 e4       	ldi	r21, 0x44	; 68
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	8d 8b       	std	Y+21, r24	; 0x15
    24c8:	9e 8b       	std	Y+22, r25	; 0x16
    24ca:	af 8b       	std	Y+23, r26	; 0x17
    24cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ce:	6d 89       	ldd	r22, Y+21	; 0x15
    24d0:	7e 89       	ldd	r23, Y+22	; 0x16
    24d2:	8f 89       	ldd	r24, Y+23	; 0x17
    24d4:	98 8d       	ldd	r25, Y+24	; 0x18
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <LCD_sendCommand+0x256>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9c 8b       	std	Y+20, r25	; 0x14
    24ec:	8b 8b       	std	Y+19, r24	; 0x13
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    24f0:	6d 89       	ldd	r22, Y+21	; 0x15
    24f2:	7e 89       	ldd	r23, Y+22	; 0x16
    24f4:	8f 89       	ldd	r24, Y+23	; 0x17
    24f6:	98 8d       	ldd	r25, Y+24	; 0x18
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	69 8d       	ldd	r22, Y+25	; 0x19
    250a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    250c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9c 8b       	std	Y+20, r25	; 0x14
    252e:	8b 8b       	std	Y+19, r24	; 0x13
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_sendCommand+0x2b6>
    2532:	88 ec       	ldi	r24, 0xC8	; 200
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9a 8b       	std	Y+18, r25	; 0x12
    2538:	89 8b       	std	Y+17, r24	; 0x11
    253a:	89 89       	ldd	r24, Y+17	; 0x11
    253c:	9a 89       	ldd	r25, Y+18	; 0x12
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_sendCommand+0x2a4>
    2542:	9a 8b       	std	Y+18, r25	; 0x12
    2544:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8b 89       	ldd	r24, Y+19	; 0x13
    2548:	9c 89       	ldd	r25, Y+20	; 0x14
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_sendCommand+0x298>
    2558:	14 c0       	rjmp	.+40     	; 0x2582 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	6d 89       	ldd	r22, Y+21	; 0x15
    255c:	7e 89       	ldd	r23, Y+22	; 0x16
    255e:	8f 89       	ldd	r24, Y+23	; 0x17
    2560:	98 8d       	ldd	r25, Y+24	; 0x18
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9c 8b       	std	Y+20, r25	; 0x14
    256c:	8b 8b       	std	Y+19, r24	; 0x13
    256e:	8b 89       	ldd	r24, Y+19	; 0x13
    2570:	9c 89       	ldd	r25, Y+20	; 0x14
    2572:	98 8b       	std	Y+16, r25	; 0x10
    2574:	8f 87       	std	Y+15, r24	; 0x0f
    2576:	8f 85       	ldd	r24, Y+15	; 0x0f
    2578:	98 89       	ldd	r25, Y+16	; 0x10
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_sendCommand+0x2e0>
    257e:	98 8b       	std	Y+16, r25	; 0x10
    2580:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	66 e0       	ldi	r22, 0x06	; 6
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_writePin>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a0 e8       	ldi	r26, 0x80	; 128
    2592:	bf e3       	ldi	r27, 0x3F	; 63
    2594:	8b 87       	std	Y+11, r24	; 0x0b
    2596:	9c 87       	std	Y+12, r25	; 0x0c
    2598:	ad 87       	std	Y+13, r26	; 0x0d
    259a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	6b 85       	ldd	r22, Y+11	; 0x0b
    259e:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	8f 83       	std	Y+7, r24	; 0x07
    25b6:	98 87       	std	Y+8, r25	; 0x08
    25b8:	a9 87       	std	Y+9, r26	; 0x09
    25ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25bc:	6f 81       	ldd	r22, Y+7	; 0x07
    25be:	78 85       	ldd	r23, Y+8	; 0x08
    25c0:	89 85       	ldd	r24, Y+9	; 0x09
    25c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <LCD_sendCommand+0x344>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    25de:	6f 81       	ldd	r22, Y+7	; 0x07
    25e0:	78 85       	ldd	r23, Y+8	; 0x08
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
    261e:	0f c0       	rjmp	.+30     	; 0x263e <LCD_sendCommand+0x3a4>
    2620:	88 ec       	ldi	r24, 0xC8	; 200
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_sendCommand+0x392>
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <LCD_sendCommand+0x386>
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	6f 81       	ldd	r22, Y+7	; 0x07
    264a:	78 85       	ldd	r23, Y+8	; 0x08
    264c:	89 85       	ldd	r24, Y+9	; 0x09
    264e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9e 83       	std	Y+6, r25	; 0x06
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_sendCommand+0x3ce>
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2670:	e9 96       	adiw	r28, 0x39	; 57
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	e9 97       	sbiw	r28, 0x39	; 57
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2698:	83 e0       	ldi	r24, 0x03	; 3
    269a:	64 e0       	ldi	r22, 0x04	; 4
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	65 e0       	ldi	r22, 0x05	; 5
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_writePin>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	a0 e8       	ldi	r26, 0x80	; 128
    26b2:	bf e3       	ldi	r27, 0x3F	; 63
    26b4:	8d ab       	std	Y+53, r24	; 0x35
    26b6:	9e ab       	std	Y+54, r25	; 0x36
    26b8:	af ab       	std	Y+55, r26	; 0x37
    26ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26bc:	6d a9       	ldd	r22, Y+53	; 0x35
    26be:	7e a9       	ldd	r23, Y+54	; 0x36
    26c0:	8f a9       	ldd	r24, Y+55	; 0x37
    26c2:	98 ad       	ldd	r25, Y+56	; 0x38
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a ef       	ldi	r20, 0xFA	; 250
    26ca:	54 e4       	ldi	r21, 0x44	; 68
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	89 ab       	std	Y+49, r24	; 0x31
    26d6:	9a ab       	std	Y+50, r25	; 0x32
    26d8:	ab ab       	std	Y+51, r26	; 0x33
    26da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26dc:	69 a9       	ldd	r22, Y+49	; 0x31
    26de:	7a a9       	ldd	r23, Y+50	; 0x32
    26e0:	8b a9       	ldd	r24, Y+51	; 0x33
    26e2:	9c a9       	ldd	r25, Y+52	; 0x34
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	2c f4       	brge	.+10     	; 0x26fe <LCD_displayCharacter+0x7c>
		__ticks = 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	98 ab       	std	Y+48, r25	; 0x30
    26fa:	8f a7       	std	Y+47, r24	; 0x2f
    26fc:	3f c0       	rjmp	.+126    	; 0x277c <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    26fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2700:	7a a9       	ldd	r23, Y+50	; 0x32
    2702:	8b a9       	ldd	r24, Y+51	; 0x33
    2704:	9c a9       	ldd	r25, Y+52	; 0x34
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	4c f5       	brge	.+82     	; 0x2768 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2716:	6d a9       	ldd	r22, Y+53	; 0x35
    2718:	7e a9       	ldd	r23, Y+54	; 0x36
    271a:	8f a9       	ldd	r24, Y+55	; 0x37
    271c:	98 ad       	ldd	r25, Y+56	; 0x38
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e2       	ldi	r20, 0x20	; 32
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	98 ab       	std	Y+48, r25	; 0x30
    273c:	8f a7       	std	Y+47, r24	; 0x2f
    273e:	0f c0       	rjmp	.+30     	; 0x275e <LCD_displayCharacter+0xdc>
    2740:	88 ec       	ldi	r24, 0xC8	; 200
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9e a7       	std	Y+46, r25	; 0x2e
    2746:	8d a7       	std	Y+45, r24	; 0x2d
    2748:	8d a5       	ldd	r24, Y+45	; 0x2d
    274a:	9e a5       	ldd	r25, Y+46	; 0x2e
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <LCD_displayCharacter+0xca>
    2750:	9e a7       	std	Y+46, r25	; 0x2e
    2752:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	8f a5       	ldd	r24, Y+47	; 0x2f
    2756:	98 a9       	ldd	r25, Y+48	; 0x30
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	98 ab       	std	Y+48, r25	; 0x30
    275c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2760:	98 a9       	ldd	r25, Y+48	; 0x30
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	69 f7       	brne	.-38     	; 0x2740 <LCD_displayCharacter+0xbe>
    2766:	14 c0       	rjmp	.+40     	; 0x2790 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	69 a9       	ldd	r22, Y+49	; 0x31
    276a:	7a a9       	ldd	r23, Y+50	; 0x32
    276c:	8b a9       	ldd	r24, Y+51	; 0x33
    276e:	9c a9       	ldd	r25, Y+52	; 0x34
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	98 ab       	std	Y+48, r25	; 0x30
    277a:	8f a7       	std	Y+47, r24	; 0x2f
    277c:	8f a5       	ldd	r24, Y+47	; 0x2f
    277e:	98 a9       	ldd	r25, Y+48	; 0x30
    2780:	9c a7       	std	Y+44, r25	; 0x2c
    2782:	8b a7       	std	Y+43, r24	; 0x2b
    2784:	8b a5       	ldd	r24, Y+43	; 0x2b
    2786:	9c a5       	ldd	r25, Y+44	; 0x2c
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <LCD_displayCharacter+0x106>
    278c:	9c a7       	std	Y+44, r25	; 0x2c
    278e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2790:	83 e0       	ldi	r24, 0x03	; 3
    2792:	66 e0       	ldi	r22, 0x06	; 6
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_writePin>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e8       	ldi	r26, 0x80	; 128
    27a0:	bf e3       	ldi	r27, 0x3F	; 63
    27a2:	8f a3       	std	Y+39, r24	; 0x27
    27a4:	98 a7       	std	Y+40, r25	; 0x28
    27a6:	a9 a7       	std	Y+41, r26	; 0x29
    27a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27aa:	6f a1       	ldd	r22, Y+39	; 0x27
    27ac:	78 a5       	ldd	r23, Y+40	; 0x28
    27ae:	89 a5       	ldd	r24, Y+41	; 0x29
    27b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a ef       	ldi	r20, 0xFA	; 250
    27b8:	54 e4       	ldi	r21, 0x44	; 68
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8b a3       	std	Y+35, r24	; 0x23
    27c4:	9c a3       	std	Y+36, r25	; 0x24
    27c6:	ad a3       	std	Y+37, r26	; 0x25
    27c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27ca:	6b a1       	ldd	r22, Y+35	; 0x23
    27cc:	7c a1       	ldd	r23, Y+36	; 0x24
    27ce:	8d a1       	ldd	r24, Y+37	; 0x25
    27d0:	9e a1       	ldd	r25, Y+38	; 0x26
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <LCD_displayCharacter+0x16a>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9a a3       	std	Y+34, r25	; 0x22
    27e8:	89 a3       	std	Y+33, r24	; 0x21
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    27ec:	6b a1       	ldd	r22, Y+35	; 0x23
    27ee:	7c a1       	ldd	r23, Y+36	; 0x24
    27f0:	8d a1       	ldd	r24, Y+37	; 0x25
    27f2:	9e a1       	ldd	r25, Y+38	; 0x26
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	6f a1       	ldd	r22, Y+39	; 0x27
    2806:	78 a5       	ldd	r23, Y+40	; 0x28
    2808:	89 a5       	ldd	r24, Y+41	; 0x29
    280a:	9a a5       	ldd	r25, Y+42	; 0x2a
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9a a3       	std	Y+34, r25	; 0x22
    282a:	89 a3       	std	Y+33, r24	; 0x21
    282c:	0f c0       	rjmp	.+30     	; 0x284c <LCD_displayCharacter+0x1ca>
    282e:	88 ec       	ldi	r24, 0xC8	; 200
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	98 a3       	std	Y+32, r25	; 0x20
    2834:	8f 8f       	std	Y+31, r24	; 0x1f
    2836:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2838:	98 a1       	ldd	r25, Y+32	; 0x20
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_displayCharacter+0x1b8>
    283e:	98 a3       	std	Y+32, r25	; 0x20
    2840:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	89 a1       	ldd	r24, Y+33	; 0x21
    2844:	9a a1       	ldd	r25, Y+34	; 0x22
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	9a a3       	std	Y+34, r25	; 0x22
    284a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	89 a1       	ldd	r24, Y+33	; 0x21
    284e:	9a a1       	ldd	r25, Y+34	; 0x22
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <LCD_displayCharacter+0x1ac>
    2854:	14 c0       	rjmp	.+40     	; 0x287e <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	6b a1       	ldd	r22, Y+35	; 0x23
    2858:	7c a1       	ldd	r23, Y+36	; 0x24
    285a:	8d a1       	ldd	r24, Y+37	; 0x25
    285c:	9e a1       	ldd	r25, Y+38	; 0x26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9a a3       	std	Y+34, r25	; 0x22
    2868:	89 a3       	std	Y+33, r24	; 0x21
    286a:	89 a1       	ldd	r24, Y+33	; 0x21
    286c:	9a a1       	ldd	r25, Y+34	; 0x22
    286e:	9e 8f       	std	Y+30, r25	; 0x1e
    2870:	8d 8f       	std	Y+29, r24	; 0x1d
    2872:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2874:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_displayCharacter+0x1f4>
    287a:	9e 8f       	std	Y+30, r25	; 0x1e
    287c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	69 ad       	ldd	r22, Y+57	; 0x39
    2882:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <GPIO_writePort>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	a0 e8       	ldi	r26, 0x80	; 128
    288c:	bf e3       	ldi	r27, 0x3F	; 63
    288e:	89 8f       	std	Y+25, r24	; 0x19
    2890:	9a 8f       	std	Y+26, r25	; 0x1a
    2892:	ab 8f       	std	Y+27, r26	; 0x1b
    2894:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2896:	69 8d       	ldd	r22, Y+25	; 0x19
    2898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    289a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    289c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4a ef       	ldi	r20, 0xFA	; 250
    28a4:	54 e4       	ldi	r21, 0x44	; 68
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	8d 8b       	std	Y+21, r24	; 0x15
    28b0:	9e 8b       	std	Y+22, r25	; 0x16
    28b2:	af 8b       	std	Y+23, r26	; 0x17
    28b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28b6:	6d 89       	ldd	r22, Y+21	; 0x15
    28b8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ba:	8f 89       	ldd	r24, Y+23	; 0x17
    28bc:	98 8d       	ldd	r25, Y+24	; 0x18
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e8       	ldi	r20, 0x80	; 128
    28c4:	5f e3       	ldi	r21, 0x3F	; 63
    28c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ca:	88 23       	and	r24, r24
    28cc:	2c f4       	brge	.+10     	; 0x28d8 <LCD_displayCharacter+0x256>
		__ticks = 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9c 8b       	std	Y+20, r25	; 0x14
    28d4:	8b 8b       	std	Y+19, r24	; 0x13
    28d6:	3f c0       	rjmp	.+126    	; 0x2956 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    28d8:	6d 89       	ldd	r22, Y+21	; 0x15
    28da:	7e 89       	ldd	r23, Y+22	; 0x16
    28dc:	8f 89       	ldd	r24, Y+23	; 0x17
    28de:	98 8d       	ldd	r25, Y+24	; 0x18
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	57 e4       	ldi	r21, 0x47	; 71
    28e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	4c f5       	brge	.+82     	; 0x2942 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f0:	69 8d       	ldd	r22, Y+25	; 0x19
    28f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9c 8b       	std	Y+20, r25	; 0x14
    2916:	8b 8b       	std	Y+19, r24	; 0x13
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <LCD_displayCharacter+0x2b6>
    291a:	88 ec       	ldi	r24, 0xC8	; 200
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9a 8b       	std	Y+18, r25	; 0x12
    2920:	89 8b       	std	Y+17, r24	; 0x11
    2922:	89 89       	ldd	r24, Y+17	; 0x11
    2924:	9a 89       	ldd	r25, Y+18	; 0x12
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_displayCharacter+0x2a4>
    292a:	9a 8b       	std	Y+18, r25	; 0x12
    292c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292e:	8b 89       	ldd	r24, Y+19	; 0x13
    2930:	9c 89       	ldd	r25, Y+20	; 0x14
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	9c 8b       	std	Y+20, r25	; 0x14
    2936:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2938:	8b 89       	ldd	r24, Y+19	; 0x13
    293a:	9c 89       	ldd	r25, Y+20	; 0x14
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	69 f7       	brne	.-38     	; 0x291a <LCD_displayCharacter+0x298>
    2940:	14 c0       	rjmp	.+40     	; 0x296a <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2942:	6d 89       	ldd	r22, Y+21	; 0x15
    2944:	7e 89       	ldd	r23, Y+22	; 0x16
    2946:	8f 89       	ldd	r24, Y+23	; 0x17
    2948:	98 8d       	ldd	r25, Y+24	; 0x18
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9c 8b       	std	Y+20, r25	; 0x14
    2954:	8b 8b       	std	Y+19, r24	; 0x13
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	9c 89       	ldd	r25, Y+20	; 0x14
    295a:	98 8b       	std	Y+16, r25	; 0x10
    295c:	8f 87       	std	Y+15, r24	; 0x0f
    295e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2960:	98 89       	ldd	r25, Y+16	; 0x10
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <LCD_displayCharacter+0x2e0>
    2966:	98 8b       	std	Y+16, r25	; 0x10
    2968:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	66 e0       	ldi	r22, 0x06	; 6
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_writePin>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	a0 e8       	ldi	r26, 0x80	; 128
    297a:	bf e3       	ldi	r27, 0x3F	; 63
    297c:	8b 87       	std	Y+11, r24	; 0x0b
    297e:	9c 87       	std	Y+12, r25	; 0x0c
    2980:	ad 87       	std	Y+13, r26	; 0x0d
    2982:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	6b 85       	ldd	r22, Y+11	; 0x0b
    2986:	7c 85       	ldd	r23, Y+12	; 0x0c
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a ef       	ldi	r20, 0xFA	; 250
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8f 83       	std	Y+7, r24	; 0x07
    299e:	98 87       	std	Y+8, r25	; 0x08
    29a0:	a9 87       	std	Y+9, r26	; 0x09
    29a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e8       	ldi	r20, 0x80	; 128
    29b2:	5f e3       	ldi	r21, 0x3F	; 63
    29b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b8:	88 23       	and	r24, r24
    29ba:	2c f4       	brge	.+10     	; 0x29c6 <LCD_displayCharacter+0x344>
		__ticks = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	3f c0       	rjmp	.+126    	; 0x2a44 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	3f ef       	ldi	r19, 0xFF	; 255
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	57 e4       	ldi	r21, 0x47	; 71
    29d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	4c f5       	brge	.+82     	; 0x2a30 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29de:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e2       	ldi	r20, 0x20	; 32
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
    2a06:	0f c0       	rjmp	.+30     	; 0x2a26 <LCD_displayCharacter+0x3a4>
    2a08:	88 ec       	ldi	r24, 0xC8	; 200
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9c 83       	std	Y+4, r25	; 0x04
    2a0e:	8b 83       	std	Y+3, r24	; 0x03
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_displayCharacter+0x392>
    2a18:	9c 83       	std	Y+4, r25	; 0x04
    2a1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	69 f7       	brne	.-38     	; 0x2a08 <LCD_displayCharacter+0x386>
    2a2e:	14 c0       	rjmp	.+40     	; 0x2a58 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a30:	6f 81       	ldd	r22, Y+7	; 0x07
    2a32:	78 85       	ldd	r23, Y+8	; 0x08
    2a34:	89 85       	ldd	r24, Y+9	; 0x09
    2a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <LCD_displayCharacter+0x3ce>
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2a58:	e9 96       	adiw	r28, 0x39	; 57
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <LCD_displayString+0x6>
    2a70:	0f 92       	push	r0
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	9b 83       	std	Y+3, r25	; 0x03
    2a78:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a7a:	19 82       	std	Y+1, r1	; 0x01
    2a7c:	0e c0       	rjmp	.+28     	; 0x2a9a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	28 2f       	mov	r18, r24
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	fc 01       	movw	r30, r24
    2a8a:	e2 0f       	add	r30, r18
    2a8c:	f3 1f       	adc	r31, r19
    2a8e:	80 81       	ld	r24, Z
    2a90:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_displayCharacter>
		i++;
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	8f 5f       	subi	r24, 0xFF	; 255
    2a98:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e2 0f       	add	r30, r18
    2aa8:	f3 1f       	adc	r31, r19
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 23       	and	r24, r24
    2aae:	39 f7       	brne	.-50     	; 0x2a7e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <LCD_moveCursor+0x6>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <LCD_moveCursor+0x8>
    2ac4:	0f 92       	push	r0
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	8a 83       	std	Y+2, r24	; 0x02
    2acc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	3d 83       	std	Y+5, r19	; 0x05
    2ad6:	2c 83       	std	Y+4, r18	; 0x04
    2ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ada:	9d 81       	ldd	r25, Y+5	; 0x05
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	91 05       	cpc	r25, r1
    2ae0:	c1 f0       	breq	.+48     	; 0x2b12 <LCD_moveCursor+0x56>
    2ae2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ae6:	22 30       	cpi	r18, 0x02	; 2
    2ae8:	31 05       	cpc	r19, r1
    2aea:	2c f4       	brge	.+10     	; 0x2af6 <LCD_moveCursor+0x3a>
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	9d 81       	ldd	r25, Y+5	; 0x05
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	61 f0       	breq	.+24     	; 0x2b0c <LCD_moveCursor+0x50>
    2af4:	19 c0       	rjmp	.+50     	; 0x2b28 <LCD_moveCursor+0x6c>
    2af6:	2c 81       	ldd	r18, Y+4	; 0x04
    2af8:	3d 81       	ldd	r19, Y+5	; 0x05
    2afa:	22 30       	cpi	r18, 0x02	; 2
    2afc:	31 05       	cpc	r19, r1
    2afe:	69 f0       	breq	.+26     	; 0x2b1a <LCD_moveCursor+0x5e>
    2b00:	8c 81       	ldd	r24, Y+4	; 0x04
    2b02:	9d 81       	ldd	r25, Y+5	; 0x05
    2b04:	83 30       	cpi	r24, 0x03	; 3
    2b06:	91 05       	cpc	r25, r1
    2b08:	61 f0       	breq	.+24     	; 0x2b22 <LCD_moveCursor+0x66>
    2b0a:	0e c0       	rjmp	.+28     	; 0x2b28 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	0b c0       	rjmp	.+22     	; 0x2b28 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	80 5c       	subi	r24, 0xC0	; 192
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	07 c0       	rjmp	.+14     	; 0x2b28 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	80 5f       	subi	r24, 0xF0	; 240
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    2b20:	03 c0       	rjmp	.+6      	; 0x2b28 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	80 5b       	subi	r24, 0xB0	; 176
    2b26:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	80 68       	ori	r24, 0x80	; 128
    2b2c:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_sendCommand>
}
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <LCD_displayStringRowColumn+0x6>
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <LCD_displayStringRowColumn+0x8>
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	6a 83       	std	Y+2, r22	; 0x02
    2b50:	5c 83       	std	Y+4, r21	; 0x04
    2b52:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	6a 81       	ldd	r22, Y+2	; 0x02
    2b58:	0e 94 5e 15 	call	0x2abc	; 0x2abc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b60:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
}
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	62 97       	sbiw	r28, 0x12	; 18
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	9a 8b       	std	Y+18, r25	; 0x12
    2b88:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b8a:	89 89       	ldd	r24, Y+17	; 0x11
    2b8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b8e:	9e 01       	movw	r18, r28
    2b90:	2f 5f       	subi	r18, 0xFF	; 255
    2b92:	3f 4f       	sbci	r19, 0xFF	; 255
    2b94:	b9 01       	movw	r22, r18
    2b96:	4a e0       	ldi	r20, 0x0A	; 10
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	0e 94 9a 18 	call	0x3134	; 0x3134 <itoa>
   LCD_displayString(buff); /* Display the string */
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	01 96       	adiw	r24, 0x01	; 1
    2ba2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayString>
}
    2ba6:	62 96       	adiw	r28, 0x12	; 18
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	cf 91       	pop	r28
    2bb4:	df 91       	pop	r29
    2bb6:	08 95       	ret

00002bb8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_sendCommand>
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
#if (TIMERNUMBER  == 0)
ISR(TIMER0_OVF_vect)
{
    2bcc:	1f 92       	push	r1
    2bce:	0f 92       	push	r0
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	0f 92       	push	r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	2f 93       	push	r18
    2bd8:	3f 93       	push	r19
    2bda:	4f 93       	push	r20
    2bdc:	5f 93       	push	r21
    2bde:	6f 93       	push	r22
    2be0:	7f 93       	push	r23
    2be2:	8f 93       	push	r24
    2be4:	9f 93       	push	r25
    2be6:	af 93       	push	r26
    2be8:	bf 93       	push	r27
    2bea:	ef 93       	push	r30
    2bec:	ff 93       	push	r31
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimerPtr != NULL_PTR)
    2bf6:	80 91 32 01 	lds	r24, 0x0132
    2bfa:	90 91 33 01 	lds	r25, 0x0133
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	29 f0       	breq	.+10     	; 0x2c0c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_callBackTimerPtr)();
    2c02:	e0 91 32 01 	lds	r30, 0x0132
    2c06:	f0 91 33 01 	lds	r31, 0x0133
    2c0a:	09 95       	icall
	}
}
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	ff 91       	pop	r31
    2c12:	ef 91       	pop	r30
    2c14:	bf 91       	pop	r27
    2c16:	af 91       	pop	r26
    2c18:	9f 91       	pop	r25
    2c1a:	8f 91       	pop	r24
    2c1c:	7f 91       	pop	r23
    2c1e:	6f 91       	pop	r22
    2c20:	5f 91       	pop	r21
    2c22:	4f 91       	pop	r20
    2c24:	3f 91       	pop	r19
    2c26:	2f 91       	pop	r18
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

00002c32 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2c32:	1f 92       	push	r1
    2c34:	0f 92       	push	r0
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	0f 92       	push	r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	2f 93       	push	r18
    2c3e:	3f 93       	push	r19
    2c40:	4f 93       	push	r20
    2c42:	5f 93       	push	r21
    2c44:	6f 93       	push	r22
    2c46:	7f 93       	push	r23
    2c48:	8f 93       	push	r24
    2c4a:	9f 93       	push	r25
    2c4c:	af 93       	push	r26
    2c4e:	bf 93       	push	r27
    2c50:	ef 93       	push	r30
    2c52:	ff 93       	push	r31
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimerPtr != NULL_PTR)
    2c5c:	80 91 32 01 	lds	r24, 0x0132
    2c60:	90 91 33 01 	lds	r25, 0x0133
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	29 f0       	breq	.+10     	; 0x2c72 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_callBackTimerPtr)();
    2c68:	e0 91 32 01 	lds	r30, 0x0132
    2c6c:	f0 91 33 01 	lds	r31, 0x0133
    2c70:	09 95       	icall
	}
}
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	ff 91       	pop	r31
    2c78:	ef 91       	pop	r30
    2c7a:	bf 91       	pop	r27
    2c7c:	af 91       	pop	r26
    2c7e:	9f 91       	pop	r25
    2c80:	8f 91       	pop	r24
    2c82:	7f 91       	pop	r23
    2c84:	6f 91       	pop	r22
    2c86:	5f 91       	pop	r21
    2c88:	4f 91       	pop	r20
    2c8a:	3f 91       	pop	r19
    2c8c:	2f 91       	pop	r18
    2c8e:	0f 90       	pop	r0
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	0f 90       	pop	r0
    2c94:	1f 90       	pop	r1
    2c96:	18 95       	reti

00002c98 <TIMER_init>:
 * Arguments  : &TIMER_ConfigType
 * Return Type: void
 */
#if TIMERNUMBER  == 0
void TIMER_init(const TIMER_Config * TIMER_ConfigType)
{
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <TIMER_init+0x6>
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01

	SREG &= ~(1<<7); /*Disable I-bit at the beginning*/
    2ca6:	af e5       	ldi	r26, 0x5F	; 95
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	ef e5       	ldi	r30, 0x5F	; 95
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	8f 77       	andi	r24, 0x7F	; 127
    2cb2:	8c 93       	st	X, r24

	/*FOC0=1:Non_PWM mode always
	 * and setting all other bits zero
	 */
	TCCR0 = (1<<FOC0);
    2cb4:	e3 e5       	ldi	r30, 0x53	; 83
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 e8       	ldi	r24, 0x80	; 128
    2cba:	80 83       	st	Z, r24
	if (TIMER_ConfigType->TIMER_MODE == 1)  /*compare mode*/
    2cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc0:	81 81       	ldd	r24, Z+1	; 0x01
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	21 f5       	brne	.+72     	; 0x2d0e <TIMER_init+0x76>
	{
		/*WGM00=0: for compare mode
		 *COM01:0=0: No need for OC0*/
		TCCR0 |= (1<WGM01);
    2cc6:	a3 e5       	ldi	r26, 0x53	; 83
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e3 e5       	ldi	r30, 0x53	; 83
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	81 60       	ori	r24, 0x01	; 1
    2cd2:	8c 93       	st	X, r24
		/*Setting the compare value by config*/
		OCR0 = TIMER_ConfigType->compareValue;
    2cd4:	ac e5       	ldi	r26, 0x5C	; 92
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cda:	fa 81       	ldd	r31, Y+2	; 0x02
    2cdc:	83 81       	ldd	r24, Z+3	; 0x03
    2cde:	8c 93       	st	X, r24
		/*setting the reset value*/
		TCNT0 = TIMER_ConfigType->initialValue;
    2ce0:	a2 e5       	ldi	r26, 0x52	; 82
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	8c 93       	st	X, r24

		/*Masking the first 3 bits of TCCR0 to insert the Clock freq*/
		TCCR0 = (TCCR0 & 0xF8) | (TIMER_ConfigType->CLOCK_FREQ); /*Put the prescalar in the first 3-bits*/
    2cec:	a3 e5       	ldi	r26, 0x53	; 83
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e3 e5       	ldi	r30, 0x53	; 83
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	98 2f       	mov	r25, r24
    2cf8:	98 7f       	andi	r25, 0xF8	; 248
    2cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfe:	80 81       	ld	r24, Z
    2d00:	89 2b       	or	r24, r25
    2d02:	8c 93       	st	X, r24
		TIMSK = (1<<OCIE0); /*OCIE0=1: Enable output compare match interrupt*/
    2d04:	e9 e5       	ldi	r30, 0x59	; 89
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	82 e0       	ldi	r24, 0x02	; 2
    2d0a:	80 83       	st	Z, r24
    2d0c:	04 c0       	rjmp	.+8      	; 0x2d16 <TIMER_init+0x7e>
	}
	else
	{
		TIMSK = (1<<TOIE0); /*TOIE0=1: Enable overflow interrupt*/
    2d0e:	e9 e5       	ldi	r30, 0x59	; 89
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	80 83       	st	Z, r24
	}

	SREG |= (1<<7); /*Enable I-bit*/
    2d16:	af e5       	ldi	r26, 0x5F	; 95
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ef e5       	ldi	r30, 0x5F	; 95
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 68       	ori	r24, 0x80	; 128
    2d22:	8c 93       	st	X, r24
}
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <Timer_setCallBack>:
 * Description:Function to call back function in app layer
 * Arguments  : void(*aTimer_ptr)(void)
 * Return Type: void
 */
void Timer_setCallBack( void(*aTimer_ptr)(void))
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <Timer_setCallBack+0x6>
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	9a 83       	std	Y+2, r25	; 0x02
    2d3a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackTimerPtr = aTimer_ptr;
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	90 93 33 01 	sts	0x0133, r25
    2d44:	80 93 32 01 	sts	0x0132, r24
}
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <Timer_DeInit>:
 * Description: Function to disable the Timer1
 * Arguments  : void
 * Return Type: void
 */
void Timer_DeInit(void)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2d5a:	ef e4       	ldi	r30, 0x4F	; 79
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	10 82       	st	Z, r1
	TCCR1B = 0;
    2d60:	ee e4       	ldi	r30, 0x4E	; 78
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	10 82       	st	Z, r1
	TCNT1 = 0;
    2d66:	ec e4       	ldi	r30, 0x4C	; 76
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	11 82       	std	Z+1, r1	; 0x01
    2d6c:	10 82       	st	Z, r1
	OCR1A = 0 ;
    2d6e:	ea e4       	ldi	r30, 0x4A	; 74
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	11 82       	std	Z+1, r1	; 0x01
    2d74:	10 82       	st	Z, r1
	OCR1B = 0 ;
    2d76:	e8 e4       	ldi	r30, 0x48	; 72
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	11 82       	std	Z+1, r1	; 0x01
    2d7c:	10 82       	st	Z, r1


}
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(I2C_Config* Config)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <TWI_init+0x6>
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2d92:	e0 e2       	ldi	r30, 0x20	; 32
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	80 83       	st	Z, r24
	TWSR = 0x00;
    2d9a:	e1 e2       	ldi	r30, 0x21	; 33
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config->address; // my address = 0x01 :)
    2da0:	a2 e2       	ldi	r26, 0x22	; 34
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e9 81       	ldd	r30, Y+1	; 0x01
    2da6:	fa 81       	ldd	r31, Y+2	; 0x02
    2da8:	81 81       	ldd	r24, Z+1	; 0x01
    2daa:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2dac:	e6 e5       	ldi	r30, 0x56	; 86
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	84 e0       	ldi	r24, 0x04	; 4
    2db2:	80 83       	st	Z, r24
}
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <TWI_start>:

void TWI_start(void)
{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2dc6:	e6 e5       	ldi	r30, 0x56	; 86
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	84 ea       	ldi	r24, 0xA4	; 164
    2dcc:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2dce:	e6 e5       	ldi	r30, 0x56	; 86
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	88 23       	and	r24, r24
    2dd6:	dc f7       	brge	.-10     	; 0x2dce <TWI_start+0x10>
}
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <TWI_stop>:

void TWI_stop(void)
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2de6:	e6 e5       	ldi	r30, 0x56	; 86
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	84 e9       	ldi	r24, 0x94	; 148
    2dec:	80 83       	st	Z, r24
}
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	0f 92       	push	r0
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2e00:	e3 e2       	ldi	r30, 0x23	; 35
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2e08:	e6 e5       	ldi	r30, 0x56	; 86
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	84 e8       	ldi	r24, 0x84	; 132
    2e0e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2e10:	e6 e5       	ldi	r30, 0x56	; 86
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	88 23       	and	r24, r24
    2e18:	dc f7       	brge	.-10     	; 0x2e10 <TWI_writeByte+0x1c>
}
    2e1a:	0f 90       	pop	r0
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2e2a:	e6 e5       	ldi	r30, 0x56	; 86
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	84 ec       	ldi	r24, 0xC4	; 196
    2e30:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2e32:	e6 e5       	ldi	r30, 0x56	; 86
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	88 23       	and	r24, r24
    2e3a:	dc f7       	brge	.-10     	; 0x2e32 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2e3c:	e3 e2       	ldi	r30, 0x23	; 35
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
}
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2e50:	e6 e5       	ldi	r30, 0x56	; 86
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	84 e8       	ldi	r24, 0x84	; 132
    2e56:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2e58:	e6 e5       	ldi	r30, 0x56	; 86
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	88 23       	and	r24, r24
    2e60:	dc f7       	brge	.-10     	; 0x2e58 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2e62:	e3 e2       	ldi	r30, 0x23	; 35
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
}
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	0f 92       	push	r0
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2e78:	e1 e2       	ldi	r30, 0x21	; 33
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	88 7f       	andi	r24, 0xF8	; 248
    2e80:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_Config * UART_ConfigType)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <UART_init+0x6>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <UART_init+0x8>
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    2e9c:	1a 82       	std	Y+2, r1	; 0x02
    2e9e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2ea0:	eb e2       	ldi	r30, 0x2B	; 43
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	82 e0       	ldi	r24, 0x02	; 2
    2ea6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE) ;
    2ea8:	ea e2       	ldi	r30, 0x2A	; 42
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	88 e9       	ldi	r24, 0x98	; 152
    2eae:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((UART_ConfigType->dataBits)<<UCSZ0)| ((UART_ConfigType->stopBit)<<USBS) | ((UART_ConfigType->parityMode)<<UPM0);
    2eb0:	a0 e4       	ldi	r26, 0x40	; 64
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb8:	80 81       	ld	r24, Z
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	88 0f       	add	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	20 68       	ori	r18, 0x80	; 128
    2ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eca:	82 81       	ldd	r24, Z+2	; 0x02
    2ecc:	88 2f       	mov	r24, r24
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	28 2b       	or	r18, r24
    2ede:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee2:	81 81       	ldd	r24, Z+1	; 0x01
    2ee4:	88 2f       	mov	r24, r24
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	82 95       	swap	r24
    2eea:	92 95       	swap	r25
    2eec:	90 7f       	andi	r25, 0xF0	; 240
    2eee:	98 27       	eor	r25, r24
    2ef0:	80 7f       	andi	r24, 0xF0	; 240
    2ef2:	98 27       	eor	r25, r24
    2ef4:	82 2b       	or	r24, r18
    2ef6:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UART_ConfigType->baurdRate * 8UL))) - 1);
    2ef8:	eb 81       	ldd	r30, Y+3	; 0x03
    2efa:	fc 81       	ldd	r31, Y+4	; 0x04
    2efc:	83 81       	ldd	r24, Z+3	; 0x03
    2efe:	94 81       	ldd	r25, Z+4	; 0x04
    2f00:	a5 81       	ldd	r26, Z+5	; 0x05
    2f02:	b6 81       	ldd	r27, Z+6	; 0x06
    2f04:	88 0f       	add	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	aa 1f       	adc	r26, r26
    2f0a:	bb 1f       	adc	r27, r27
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	aa 1f       	adc	r26, r26
    2f12:	bb 1f       	adc	r27, r27
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	aa 1f       	adc	r26, r26
    2f1a:	bb 1f       	adc	r27, r27
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	ad 01       	movw	r20, r26
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	92 e1       	ldi	r25, 0x12	; 18
    2f24:	aa e7       	ldi	r26, 0x7A	; 122
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	bc 01       	movw	r22, r24
    2f2a:	cd 01       	movw	r24, r26
    2f2c:	0e 94 41 18 	call	0x3082	; 0x3082 <__udivmodsi4>
    2f30:	da 01       	movw	r26, r20
    2f32:	c9 01       	movw	r24, r18
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	9a 83       	std	Y+2, r25	; 0x02
    2f38:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f3a:	e0 e4       	ldi	r30, 0x40	; 64
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	89 2f       	mov	r24, r25
    2f44:	99 27       	eor	r25, r25
    2f46:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f48:	e9 e2       	ldi	r30, 0x29	; 41
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	80 83       	st	Z, r24
}
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	0f 92       	push	r0
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f6a:	eb e2       	ldi	r30, 0x2B	; 43
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	80 72       	andi	r24, 0x20	; 32
    2f76:	90 70       	andi	r25, 0x00	; 0
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	b9 f3       	breq	.-18     	; 0x2f6a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f7c:	ec e2       	ldi	r30, 0x2C	; 44
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2f84:	0f 90       	pop	r0
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f94:	eb e2       	ldi	r30, 0x2B	; 43
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	88 23       	and	r24, r24
    2f9c:	dc f7       	brge	.-10     	; 0x2f94 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2f9e:	ec e2       	ldi	r30, 0x2C	; 44
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
}
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <UART_sendString+0x6>
    2fb0:	0f 92       	push	r0
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	9b 83       	std	Y+3, r25	; 0x03
    2fb8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fba:	19 82       	std	Y+1, r1	; 0x01
    2fbc:	0e c0       	rjmp	.+28     	; 0x2fda <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc8:	fc 01       	movw	r30, r24
    2fca:	e2 0f       	add	r30, r18
    2fcc:	f3 1f       	adc	r31, r19
    2fce:	80 81       	ld	r24, Z
    2fd0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_sendByte>
		i++;
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	8f 5f       	subi	r24, 0xFF	; 255
    2fd8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	28 2f       	mov	r18, r24
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	e2 0f       	add	r30, r18
    2fe8:	f3 1f       	adc	r31, r19
    2fea:	80 81       	ld	r24, Z
    2fec:	88 23       	and	r24, r24
    2fee:	39 f7       	brne	.-50     	; 0x2fbe <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	00 d0       	rcall	.+0      	; 0x3006 <UART_receiveString+0xa>
    3006:	0f 92       	push	r0
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	9b 83       	std	Y+3, r25	; 0x03
    300e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3010:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	8a 81       	ldd	r24, Y+2	; 0x02
    301a:	9b 81       	ldd	r25, Y+3	; 0x03
    301c:	8c 01       	movw	r16, r24
    301e:	02 0f       	add	r16, r18
    3020:	13 1f       	adc	r17, r19
    3022:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <UART_recieveByte>
    3026:	f8 01       	movw	r30, r16
    3028:	80 83       	st	Z, r24
    302a:	0f c0       	rjmp	.+30     	; 0x304a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	9b 81       	ldd	r25, Y+3	; 0x03
    303c:	8c 01       	movw	r16, r24
    303e:	02 0f       	add	r16, r18
    3040:	13 1f       	adc	r17, r19
    3042:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <UART_recieveByte>
    3046:	f8 01       	movw	r30, r16
    3048:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	28 2f       	mov	r18, r24
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	9b 81       	ldd	r25, Y+3	; 0x03
    3054:	fc 01       	movw	r30, r24
    3056:	e2 0f       	add	r30, r18
    3058:	f3 1f       	adc	r31, r19
    305a:	80 81       	ld	r24, Z
    305c:	83 32       	cpi	r24, 0x23	; 35
    305e:	31 f7       	brne	.-52     	; 0x302c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	9b 81       	ldd	r25, Y+3	; 0x03
    306a:	fc 01       	movw	r30, r24
    306c:	e2 0f       	add	r30, r18
    306e:	f3 1f       	adc	r31, r19
    3070:	10 82       	st	Z, r1
}
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	08 95       	ret

00003082 <__udivmodsi4>:
    3082:	a1 e2       	ldi	r26, 0x21	; 33
    3084:	1a 2e       	mov	r1, r26
    3086:	aa 1b       	sub	r26, r26
    3088:	bb 1b       	sub	r27, r27
    308a:	fd 01       	movw	r30, r26
    308c:	0d c0       	rjmp	.+26     	; 0x30a8 <__udivmodsi4_ep>

0000308e <__udivmodsi4_loop>:
    308e:	aa 1f       	adc	r26, r26
    3090:	bb 1f       	adc	r27, r27
    3092:	ee 1f       	adc	r30, r30
    3094:	ff 1f       	adc	r31, r31
    3096:	a2 17       	cp	r26, r18
    3098:	b3 07       	cpc	r27, r19
    309a:	e4 07       	cpc	r30, r20
    309c:	f5 07       	cpc	r31, r21
    309e:	20 f0       	brcs	.+8      	; 0x30a8 <__udivmodsi4_ep>
    30a0:	a2 1b       	sub	r26, r18
    30a2:	b3 0b       	sbc	r27, r19
    30a4:	e4 0b       	sbc	r30, r20
    30a6:	f5 0b       	sbc	r31, r21

000030a8 <__udivmodsi4_ep>:
    30a8:	66 1f       	adc	r22, r22
    30aa:	77 1f       	adc	r23, r23
    30ac:	88 1f       	adc	r24, r24
    30ae:	99 1f       	adc	r25, r25
    30b0:	1a 94       	dec	r1
    30b2:	69 f7       	brne	.-38     	; 0x308e <__udivmodsi4_loop>
    30b4:	60 95       	com	r22
    30b6:	70 95       	com	r23
    30b8:	80 95       	com	r24
    30ba:	90 95       	com	r25
    30bc:	9b 01       	movw	r18, r22
    30be:	ac 01       	movw	r20, r24
    30c0:	bd 01       	movw	r22, r26
    30c2:	cf 01       	movw	r24, r30
    30c4:	08 95       	ret

000030c6 <__prologue_saves__>:
    30c6:	2f 92       	push	r2
    30c8:	3f 92       	push	r3
    30ca:	4f 92       	push	r4
    30cc:	5f 92       	push	r5
    30ce:	6f 92       	push	r6
    30d0:	7f 92       	push	r7
    30d2:	8f 92       	push	r8
    30d4:	9f 92       	push	r9
    30d6:	af 92       	push	r10
    30d8:	bf 92       	push	r11
    30da:	cf 92       	push	r12
    30dc:	df 92       	push	r13
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	ca 1b       	sub	r28, r26
    30f0:	db 0b       	sbc	r29, r27
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	09 94       	ijmp

000030fe <__epilogue_restores__>:
    30fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3100:	39 88       	ldd	r3, Y+17	; 0x11
    3102:	48 88       	ldd	r4, Y+16	; 0x10
    3104:	5f 84       	ldd	r5, Y+15	; 0x0f
    3106:	6e 84       	ldd	r6, Y+14	; 0x0e
    3108:	7d 84       	ldd	r7, Y+13	; 0x0d
    310a:	8c 84       	ldd	r8, Y+12	; 0x0c
    310c:	9b 84       	ldd	r9, Y+11	; 0x0b
    310e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3110:	b9 84       	ldd	r11, Y+9	; 0x09
    3112:	c8 84       	ldd	r12, Y+8	; 0x08
    3114:	df 80       	ldd	r13, Y+7	; 0x07
    3116:	ee 80       	ldd	r14, Y+6	; 0x06
    3118:	fd 80       	ldd	r15, Y+5	; 0x05
    311a:	0c 81       	ldd	r16, Y+4	; 0x04
    311c:	1b 81       	ldd	r17, Y+3	; 0x03
    311e:	aa 81       	ldd	r26, Y+2	; 0x02
    3120:	b9 81       	ldd	r27, Y+1	; 0x01
    3122:	ce 0f       	add	r28, r30
    3124:	d1 1d       	adc	r29, r1
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	ed 01       	movw	r28, r26
    3132:	08 95       	ret

00003134 <itoa>:
    3134:	fb 01       	movw	r30, r22
    3136:	9f 01       	movw	r18, r30
    3138:	e8 94       	clt
    313a:	42 30       	cpi	r20, 0x02	; 2
    313c:	c4 f0       	brlt	.+48     	; 0x316e <itoa+0x3a>
    313e:	45 32       	cpi	r20, 0x25	; 37
    3140:	b4 f4       	brge	.+44     	; 0x316e <itoa+0x3a>
    3142:	4a 30       	cpi	r20, 0x0A	; 10
    3144:	29 f4       	brne	.+10     	; 0x3150 <itoa+0x1c>
    3146:	97 fb       	bst	r25, 7
    3148:	1e f4       	brtc	.+6      	; 0x3150 <itoa+0x1c>
    314a:	90 95       	com	r25
    314c:	81 95       	neg	r24
    314e:	9f 4f       	sbci	r25, 0xFF	; 255
    3150:	64 2f       	mov	r22, r20
    3152:	77 27       	eor	r23, r23
    3154:	0e 94 cb 18 	call	0x3196	; 0x3196 <__udivmodhi4>
    3158:	80 5d       	subi	r24, 0xD0	; 208
    315a:	8a 33       	cpi	r24, 0x3A	; 58
    315c:	0c f0       	brlt	.+2      	; 0x3160 <itoa+0x2c>
    315e:	89 5d       	subi	r24, 0xD9	; 217
    3160:	81 93       	st	Z+, r24
    3162:	cb 01       	movw	r24, r22
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	a1 f7       	brne	.-24     	; 0x3150 <itoa+0x1c>
    3168:	16 f4       	brtc	.+4      	; 0x316e <itoa+0x3a>
    316a:	5d e2       	ldi	r21, 0x2D	; 45
    316c:	51 93       	st	Z+, r21
    316e:	10 82       	st	Z, r1
    3170:	c9 01       	movw	r24, r18
    3172:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <strrev>

00003176 <strrev>:
    3176:	dc 01       	movw	r26, r24
    3178:	fc 01       	movw	r30, r24
    317a:	67 2f       	mov	r22, r23
    317c:	71 91       	ld	r23, Z+
    317e:	77 23       	and	r23, r23
    3180:	e1 f7       	brne	.-8      	; 0x317a <strrev+0x4>
    3182:	32 97       	sbiw	r30, 0x02	; 2
    3184:	04 c0       	rjmp	.+8      	; 0x318e <strrev+0x18>
    3186:	7c 91       	ld	r23, X
    3188:	6d 93       	st	X+, r22
    318a:	70 83       	st	Z, r23
    318c:	62 91       	ld	r22, -Z
    318e:	ae 17       	cp	r26, r30
    3190:	bf 07       	cpc	r27, r31
    3192:	c8 f3       	brcs	.-14     	; 0x3186 <strrev+0x10>
    3194:	08 95       	ret

00003196 <__udivmodhi4>:
    3196:	aa 1b       	sub	r26, r26
    3198:	bb 1b       	sub	r27, r27
    319a:	51 e1       	ldi	r21, 0x11	; 17
    319c:	07 c0       	rjmp	.+14     	; 0x31ac <__udivmodhi4_ep>

0000319e <__udivmodhi4_loop>:
    319e:	aa 1f       	adc	r26, r26
    31a0:	bb 1f       	adc	r27, r27
    31a2:	a6 17       	cp	r26, r22
    31a4:	b7 07       	cpc	r27, r23
    31a6:	10 f0       	brcs	.+4      	; 0x31ac <__udivmodhi4_ep>
    31a8:	a6 1b       	sub	r26, r22
    31aa:	b7 0b       	sbc	r27, r23

000031ac <__udivmodhi4_ep>:
    31ac:	88 1f       	adc	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	5a 95       	dec	r21
    31b2:	a9 f7       	brne	.-22     	; 0x319e <__udivmodhi4_loop>
    31b4:	80 95       	com	r24
    31b6:	90 95       	com	r25
    31b8:	bc 01       	movw	r22, r24
    31ba:	cd 01       	movw	r24, r26
    31bc:	08 95       	ret

000031be <_exit>:
    31be:	f8 94       	cli

000031c0 <__stop_program>:
    31c0:	ff cf       	rjmp	.-2      	; 0x31c0 <__stop_program>
